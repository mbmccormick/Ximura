From: "Saved by Windows Internet Explorer 7"
Subject: rfc 4566
Date: Wed, 25 Oct 2006 02:46:30 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0002_01C6F7DF.C647F4D0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.5600.16384

This is a multi-part message in MIME format.

------=_NextPart_000_0002_01C6F7DF.C647F4D0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://tools.ietf.org/html/rfc4566

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en"><HEAD><TITLE>rfc 4566</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3Dindex,follow name=3Drobots>
<META content=3D"rfcmarkup version 1.31" name=3Dcreator>
<SCRIPT src=3D"http://tools.ietf.org/js/MochiKit.js"=20
type=3Dtext/javascript></SCRIPT>
<LINK href=3D"/rfc.png" type=3Dimage/png rel=3Dicon><LINK =
href=3D"/rfc.png"=20
type=3Dimage/png rel=3D"shortcut icon">
<STYLE type=3Dtext/css>BODY {
	FONT-SIZE: 1em; MARGIN: 8px
}
H1 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H2 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H3 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H4 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H5 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H6 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h7 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h8 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h9 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
.pre {
	FONT-FAMILY: monospace; WHITE-SPACE: pre
}
.header {
	FONT-WEIGHT: bold
}
.header2 {
	FONT-WEIGHT: bold
}

@media Print   =20
{
BODY {
	FONT-SIZE: 10.5pt
}
H1 {
	FONT-SIZE: 10.5pt
}
H2 {
	FONT-SIZE: 10.5pt
}
H3 {
	FONT-SIZE: 10.5pt
}
H4 {
	FONT-SIZE: 10.5pt
}
H5 {
	FONT-SIZE: 10.5pt
}
H6 {
	FONT-SIZE: 10.5pt
}
h7 {
	FONT-SIZE: 10.5pt
}
h8 {
	FONT-SIZE: 10.5pt
}
h9 {
	FONT-SIZE: 10.5pt
}
A:link {
	TEXT-DECORATION: none
}
A:visited {
	TEXT-DECORATION: none
}
.break {
	PAGE-BREAK-BEFORE: always
}
.noprint {
	DISPLAY: none
}

}

@media Screen   =20
{
.grey {
	COLOR: #777
}
.grey A:link {
	COLOR: #777
}
.grey A:visited {
	COLOR: #777
}

}
</STYLE>

<SCRIPT><!--=0A=
    function addHeaderTags() {=0A=
	headertags =3D getElementsByTagAndClassName("span", "header");=0A=
	for ( i=3D0; i < headertags.length; i++) {=0A=
	    elem =3D headertags[i];=0A=
	    if (elem) {=0A=
		level =3D elem.getAttribute("level");=0A=
		elem.innerHTML =3D "<H"+level+">"+elem.innerHTML+"</H"+level+">";		=0A=
	    }=0A=
	}=0A=
    }=0A=
    // -->=0A=
    </SCRIPT>

<META content=3D"MSHTML 6.00.5600.16384" name=3DGENERATOR></HEAD>
<BODY onload=3DaddHeaderTags()><SPAN class=3D"pre noprint">[<A=20
href=3D"http://tools.ietf.org/rfc/">RFCs</A>] [<A=20
href=3D"http://tools.ietf.org/id/">I-Ds</A>] [<A=20
href=3D"http://tools.ietf.org/rfc/rfc4566.txt">Plain =
Text</A>]</SPAN><PRE>                                                    =
                   =20


Network Working Group                                         M. Handley
Request for Comments: 4566                                           UCL
Obsoletes: <A href=3D"http://tools.ietf.org/html/rfc2327">2327</A>, <A =
href=3D"http://tools.ietf.org/html/rfc3266">3266</A>                     =
                   V. Jacobson
Category: Standards Track                                  Packet Design
                                                              C. Perkins
                                                   University of Glasgow
                                                               July 2006


                   <SPAN class=3Dheader level=3D"1">SDP: Session =
Description Protocol</SPAN>

Status of This Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) The Internet Society (2006).

Abstract

   This memo defines the Session Description Protocol (SDP).  SDP is
   intended for describing multimedia sessions for the purposes of
   session announcement, session invitation, and other forms of
   multimedia session initiation.

Table of Contents

   1. Introduction =
....................................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-3">3</A>
   2. Glossary of Terms =
...............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-3">3</A>
   3. Examples of SDP Usage =
...........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-4">4</A>
      3.1. Session Initiation =
.........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-4">4</A>
      3.2. Streaming Media =
............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-4">4</A>
      3.3. Email and the World Wide Web =
...............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-4">4</A>
      3.4. Multicast Session Announcement =
.............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-4">4</A>
   4. Requirements and Recommendations =
................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-5">5</A>
      4.1. Media and Transport Information =
............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-6">6</A>
      4.2. Timing Information =
.........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-6">6</A>
      4.3. Private Sessions =
...........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-7">7</A>
      4.4. Obtaining Further Information about a Session =
..............<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-7">7</A>
      4.5. Categorisation =
.............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-7">7</A>
      4.6. Internationalisation =
.......................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-7">7</A>





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 1]</SPAN>
<A id=3Dpage-2 href=3D"http://tools.ietf.org/html/rfc4566#page-2" =
name=3Dpage-2><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   5. SDP Specification =
...............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-7">7</A>
      5.1. Protocol Version ("v=3D") =
...................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-10">10</A>
      5.2. Origin ("o=3D") =
.............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-11">11</A>
      5.3. Session Name ("s=3D") =
.......................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-12">12</A>
      5.4. Session Information ("i=3D") =
................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-12">12</A>
      5.5. URI ("u=3D") =
................................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-13">13</A>
      5.6. Email Address and Phone Number ("e=3D" and "p=3D") =
............<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-13">13</A>
      5.7. Connection Data ("c=3D") =
....................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-14">14</A>
      5.8. Bandwidth ("b=3D") =
..........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-16">16</A>
      5.9. Timing ("t=3D") =
.............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-17">17</A>
      5.10. Repeat Times ("r=3D") =
......................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-18">18</A>
      5.11. Time Zones ("z=3D") =
........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-19">19</A>
      5.12. Encryption Keys ("k=3D") =
...................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-19">19</A>
      5.13. Attributes ("a=3D") =
........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-21">21</A>
      5.14. Media Descriptions ("m=3D") =
................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-22">22</A>
   6. SDP Attributes .................................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-24">24</A>
   7. Security Considerations ........................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-31">31</A>
   8. IANA Considerations ............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-33">33</A>
      8.1. The "application/sdp" Media Type ..........................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-33">33</A>
      8.2. Registration of Parameters ................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-34">34</A>
           8.2.1. Media Types ("media") ..............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-34">34</A>
           8.2.2. Transport Protocols ("proto") ......................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-34">34</A>
           8.2.3. Media Formats ("fmt") ..............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-35">35</A>
           8.2.4. Attribute Names ("att-field") ......................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-36">36</A>
           8.2.5. Bandwidth Specifiers ("bwtype") ....................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-37">37</A>
           8.2.6. Network Types ("nettype") ..........................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-37">37</A>
           8.2.7. Address Types ("addrtype") .........................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-38">38</A>
           8.2.8. Registration Procedure .............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-38">38</A>
      8.3. Encryption Key Access Methods .............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-39">39</A>
   9. SDP Grammar ....................................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-39">39</A>
   10. Summary of Changes from <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> =
..............................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-44">44</A>
   11. Acknowledgements ..............................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-45">45</A>
   12. References ....................................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-45">45</A>
      12.1. Normative References .....................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-45">45</A>
      12.2. Informative References ...................................<A =
href=3D"http://tools.ietf.org/html/rfc4566#page-46">46</A>
















<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 2]</SPAN>
<A id=3Dpage-3 href=3D"http://tools.ietf.org/html/rfc4566#page-3" =
name=3Dpage-3><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-1>1</A>.  =
Introduction</SPAN>

   When initiating multimedia teleconferences, voice-over-IP calls,
   streaming video, or other sessions, there is a requirement to convey
   media details, transport addresses, and other session description
   metadata to the participants.

   SDP provides a standard representation for such information,
   irrespective of how that information is transported.  SDP is purely a
   format for session description -- it does not incorporate a transport
   protocol, and it is intended to use different transport protocols as
   appropriate, including the Session Announcement Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-14">14</A>],
   Session Initiation Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-15">15</A>], Real Time =
Streaming Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-16">16</A>],
   electronic mail using the MIME extensions, and the Hypertext
   Transport Protocol.

   SDP is intended to be general purpose so that it can be used in a
   wide range of network environments and applications.  However, it is
   not intended to support negotiation of session content or media
   encodings: this is viewed as outside the scope of session
   description.

   This memo obsoletes <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-6">6</A>] and <A =
href=3D"http://tools.ietf.org/html/rfc3266">RFC 3266</A> [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-10">10</A>].  <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-10">Section 10</A>
   outlines the changes introduced in this memo.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-2>2</A>.  Glossary of =
Terms</SPAN>

   The following terms are used in this document and have specific
   meaning within the context of this document.

   Conference: A multimedia conference is a set of two or more
      communicating users along with the software they are using to
      communicate.

   Session: A multimedia session is a set of multimedia senders and
      receivers and the data streams flowing from senders to receivers.
      A multimedia conference is an example of a multimedia session.

   Session Description: A well-defined format for conveying sufficient
      information to discover and participate in a multimedia session.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <A =
href=3D"http://tools.ietf.org/html/rfc2119">RFC 2119</A> [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-3">3</A>].







<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 3]</SPAN>
<A id=3Dpage-4 href=3D"http://tools.ietf.org/html/rfc4566#page-4" =
name=3Dpage-4><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-3>3</A>.  Examples of =
SDP Usage</SPAN>

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-3.1>3.1</A>.  Session =
Initiation</SPAN>

   The Session Initiation Protocol (SIP) [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-15">15</A>] is an =
application-layer
   control protocol for creating, modifying, and terminating sessions
   such as Internet multimedia conferences, Internet telephone calls,
   and multimedia distribution.  The SIP messages used to create
   sessions carry session descriptions that allow participants to agree
   on a set of compatible media types.  These session descriptions are
   commonly formatted using SDP.  When used with SIP, the offer/answer
   model [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-17">17</A>] =
provides a limited framework for negotiation using SDP.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-3.2>3.2</A>.  =
Streaming Media</SPAN>

   The Real Time Streaming Protocol (RTSP) [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-16">16</A>], is an =
application-level
   protocol for control over the delivery of data with real-time
   properties.  RTSP provides an extensible framework to enable
   controlled, on-demand delivery of real-time data, such as audio and
   video.  An RTSP client and server negotiate an appropriate set of
   parameters for media delivery, partially using SDP syntax to describe
   those parameters.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-3.3>3.3</A>.  Email =
and the World Wide Web</SPAN>

   Alternative means of conveying session descriptions include
   electronic mail and the World Wide Web (WWW).  For both email and WWW
   distribution, the media type "application/sdp" is used.  This enables
   the automatic launching of applications for participation in the
   session from the WWW client or mail reader in a standard manner.

   Note that announcements of multicast sessions made only via email or
   the WWW do not have the property that the receiver of a session
   announcement can necessarily receive the session because the
   multicast sessions may be restricted in scope, and access to the WWW
   server or reception of email is possible outside this scope.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-3.4>3.4</A>.  =
Multicast Session Announcement</SPAN>

   In order to assist the advertisement of multicast multimedia
   conferences and other multicast sessions, and to communicate the
   relevant session setup information to prospective participants, a
   distributed session directory may be used.  An instance of such a
   session directory periodically sends packets containing a description
   of the session to a well-known multicast group.  These advertisements
   are received by other session directories such that potential remote
   participants can use the session description to start the tools
   required to participate in the session.



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 4]</SPAN>
<A id=3Dpage-5 href=3D"http://tools.ietf.org/html/rfc4566#page-5" =
name=3Dpage-5><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   One protocol used to implement such a distributed directory is the
   Session Announcement Protocol (SAP) [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-14">14</A>].  SDP =
provides the
   recommended session description format for such session
   announcements.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-4>4</A>.  =
Requirements and Recommendations</SPAN>

   The purpose of SDP is to convey information about media streams in
   multimedia sessions to allow the recipients of a session description
   to participate in the session.  SDP is primarily intended for use in
   an internetwork, although it is sufficiently general that it can
   describe conferences in other network environments.  Media streams
   can be many-to-many.  Sessions need not be continually active.

   Thus far, multicast-based sessions on the Internet have differed from
   many other forms of conferencing in that anyone receiving the traffic
   can join the session (unless the session traffic is encrypted).  In
   such an environment, SDP serves two primary purposes.  It is a means
   to communicate the existence of a session, and it is a means to
   convey sufficient information to enable joining and participating in
   the session.  In a unicast environment, only the latter purpose is
   likely to be relevant.

   An SDP session description includes the following:

   o  Session name and purpose

   o  Time(s) the session is active

   o  The media comprising the session

   o  Information needed to receive those media (addresses, ports,
      formats, etc.)

   As resources necessary to participate in a session may be limited,
   some additional information may also be desirable:

   o  Information about the bandwidth to be used by the session

   o  Contact information for the person responsible for the session

   In general, SDP must convey sufficient information to enable
   applications to join a session (with the possible exception of
   encryption keys) and to announce the resources to be used to any
   non-participants that may need to know.  (This latter feature is
   primarily useful when SDP is used with a multicast session
   announcement protocol.)




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 5]</SPAN>
<A id=3Dpage-6 href=3D"http://tools.ietf.org/html/rfc4566#page-6" =
name=3Dpage-6><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.1>4.1</A>.  Media =
and Transport Information</SPAN>

   An SDP session description includes the following media information:

   o  The type of media (video, audio, etc.)

   o  The transport protocol (RTP/UDP/IP, H.320, etc.)

   o  The format of the media (H.261 video, MPEG video, etc.)

   In addition to media format and transport protocol, SDP conveys
   address and port details.  For an IP multicast session, these
   comprise:

   o  The multicast group address for media

   o  The transport port for media

   This address and port are the destination address and destination
   port of the multicast stream, whether being sent, received, or both.

   For unicast IP sessions, the following are conveyed:

   o  The remote address for media

   o  The remote transport port for media

   The semantics of this address and port depend on the media and
   transport protocol defined.  By default, this SHOULD be the remote
   address and remote port to which data is sent.  Some media types may
   redefine this behaviour, but this is NOT RECOMMENDED since it
   complicates implementations (including middleboxes that must parse
   the addresses to open Network Address Translation (NAT) or firewall
   pinholes).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.2>4.2</A>.  Timing =
Information</SPAN>

   Sessions may be either bounded or unbounded in time.  Whether or not
   they are bounded, they may be only active at specific times.  SDP can
   convey:

   o  An arbitrary list of start and stop times bounding the session

   o  For each bound, repeat times such as "every Wednesday at 10am for
      one hour"

   This timing information is globally consistent, irrespective of local
   time zone or daylight saving time (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-5.9">Section =
5.9</A>).



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 6]</SPAN>
<A id=3Dpage-7 href=3D"http://tools.ietf.org/html/rfc4566#page-7" =
name=3Dpage-7><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.3>4.3</A>.  Private =
Sessions</SPAN>

   It is possible to create both public sessions and private sessions.
   SDP itself does not distinguish between these; private sessions are
   typically conveyed by encrypting the session description during
   distribution.  The details of how encryption is performed are
   dependent on the mechanism used to convey SDP; mechanisms are
   currently defined for SDP transported using SAP [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-14">14</A>] and SIP [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-15">15</A>],
   and others may be defined in the future.

   If a session announcement is private, it is possible to use that
   private announcement to convey encryption keys necessary to decode
   each of the media in a conference, including enough information to
   know which encryption scheme is used for each media.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.4>4.4</A>.  =
Obtaining Further Information about a Session</SPAN>

   A session description should convey enough information to decide
   whether or not to participate in a session.  SDP may include
   additional pointers in the form of Uniform Resource Identifiers
   (URIs) for more information about the session.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.5>4.5</A>.  =
Categorisation</SPAN>

   When many session descriptions are being distributed by SAP, or any
   other advertisement mechanism, it may be desirable to filter session
   announcements that are of interest from those that are not.  SDP
   supports a categorisation mechanism for sessions that is capable of
   being automated (the "a=3Dcat:" attribute; see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section 6</A>).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.6>4.6</A>.  =
Internationalisation</SPAN>

   The SDP specification recommends the use of the ISO 10646 character
   sets in the UTF-8 encoding [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-5">5</A>] to allow many =
different languages to
   be represented.  However, to assist in compact representations, SDP
   also allows other character sets such as ISO 8859-1 to be used when
   desired.  Internationalisation only applies to free-text fields
   (session name and background information), and not to SDP as a whole.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-5>5</A>.  SDP =
Specification</SPAN>

   An SDP session description is denoted by the media type
   "application/sdp" (See <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).

   An SDP session description is entirely textual using the ISO 10646
   character set in UTF-8 encoding.  SDP field names and attribute names
   use only the US-ASCII subset of UTF-8, but textual fields and
   attribute values MAY use the full ISO 10646 character set.  Field and



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 7]</SPAN>
<A id=3Dpage-8 href=3D"http://tools.ietf.org/html/rfc4566#page-8" =
name=3Dpage-8><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   attribute values that use the full UTF-8 character set are never
   directly compared, hence there is no requirement for UTF-8
   normalisation.  The textual form, as opposed to a binary encoding
   such as ASN.1 or XDR, was chosen to enhance portability, to enable a
   variety of transports to be used, and to allow flexible, text-based
   toolkits to be used to generate and process session descriptions.
   However, since SDP may be used in environments where the maximum
   permissible size of a session description is limited, the encoding is
   deliberately compact.  Also, since announcements may be transported
   via very unreliable means or damaged by an intermediate caching
   server, the encoding was designed with strict order and formatting
   rules so that most errors would result in malformed session
   announcements that could be detected easily and discarded.  This also
   allows rapid discarding of encrypted session announcements for which
   a receiver does not have the correct key.

   An SDP session description consists of a number of lines of text of
   the form:

      &lt;type&gt;=3D&lt;value&gt;

   where &lt;type&gt; MUST be exactly one case-significant character and
   &lt;value&gt; is structured text whose format depends on =
&lt;type&gt;.  In
   general, &lt;value&gt; is either a number of fields delimited by a =
single
   space character or a free format string, and is case-significant
   unless a specific field defines otherwise.  Whitespace MUST NOT be
   used on either side of the "=3D" sign.

   An SDP session description consists of a session-level section
   followed by zero or more media-level sections.  The session-level
   part starts with a "v=3D" line and continues to the first media-level
   section.  Each media-level section starts with an "m=3D" line and
   continues to the next media-level section or end of the whole session
   description.  In general, session-level values are the default for
   all media unless overridden by an equivalent media-level value.

   Some lines in each description are REQUIRED and some are OPTIONAL,
   but all MUST appear in exactly the order given here (the fixed order
   greatly enhances error detection and allows for a simple parser).
   OPTIONAL items are marked with a "*".











<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 8]</SPAN>
<A id=3Dpage-9 href=3D"http://tools.ietf.org/html/rfc4566#page-9" =
name=3Dpage-9><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      Session description
         v=3D  (protocol version)
         o=3D  (originator and session identifier)
         s=3D  (session name)
         i=3D* (session information)
         u=3D* (URI of description)
         e=3D* (email address)
         p=3D* (phone number)
         c=3D* (connection information -- not required if included in
              all media)
         b=3D* (zero or more bandwidth information lines)
         One or more time descriptions ("t=3D" and "r=3D" lines; see =
below)
         z=3D* (time zone adjustments)
         k=3D* (encryption key)
         a=3D* (zero or more session attribute lines)
         Zero or more media descriptions

      Time description
         t=3D  (time the session is active)
         r=3D* (zero or more repeat times)

      Media description, if present
         m=3D  (media name and transport address)
         i=3D* (media title)
         c=3D* (connection information -- optional if included at
              session level)
         b=3D* (zero or more bandwidth information lines)
         k=3D* (encryption key)
         a=3D* (zero or more media attribute lines)

   The set of type letters is deliberately small and not intended to be
   extensible -- an SDP parser MUST completely ignore any session
   description that contains a type letter that it does not understand.
   The attribute mechanism ("a=3D" described below) is the primary means
   for extending SDP and tailoring it to particular applications or
   media.  Some attributes (the ones listed in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section 6</A> of =
this memo)
   have a defined meaning, but others may be added on an application-,
   media-, or session-specific basis.  An SDP parser MUST ignore any
   attribute it doesn't understand.

   An SDP session description may contain URIs that reference external
   content in the "u=3D", "k=3D", and "a=3D" lines.  These URIs may be
   dereferenced in some cases, making the session description non-self-
   contained.







<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
          [Page 9]</SPAN>
<A id=3Dpage-10 href=3D"http://tools.ietf.org/html/rfc4566#page-10" =
name=3Dpage-10><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   The connection ("c=3D") and attribute ("a=3D") information in the
   session-level section applies to all the media of that session unless
   overridden by connection information or an attribute of the same name
   in the media description.  For instance, in the example below, each
   media behaves as if it were given a "recvonly" attribute.

   An example SDP description is:

      v=3D0
      o=3Djdoe 2890844526 2890842807 IN IP4 10.47.16.5
      s=3DSDP Seminar
      i=3DA Seminar on the session description protocol
      u=3Dhttp://www.example.com/seminars/sdp.pdf
      e=3Dj.doe@example.com (Jane Doe)
      c=3DIN IP4 224.2.17.12/127
      t=3D2873397496 2873404696
      a=3Drecvonly
      m=3Daudio 49170 RTP/AVP 0
      m=3Dvideo 51372 RTP/AVP 99
      a=3Drtpmap:99 h263-1998/90000

   Text fields such as the session name and information are octet
   strings that may contain any octet with the exceptions of 0x00 (Nul),
   0x0a (ASCII newline), and 0x0d (ASCII carriage return).  The sequence
   CRLF (0x0d0a) is used to end a record, although parsers SHOULD be
   tolerant and also accept records terminated with a single newline
   character.  If the "a=3Dcharset" attribute is not present, these =
octet
   strings MUST be interpreted as containing ISO-10646 characters in
   UTF-8 encoding (the presence of the "a=3Dcharset" attribute may force
   some fields to be interpreted differently).

   A session description can contain domain names in the "o=3D", "u=3D",
   "e=3D", "c=3D", and "a=3D" lines.  Any domain name used in SDP MUST =
comply
   with [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-1">1</A>], =
[<A href=3D"http://tools.ietf.org/html/rfc4566#ref-2">2</A>].  =
Internationalised domain names (IDNs) MUST be
   represented using the ASCII Compatible Encoding (ACE) form defined in
   [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-11">11</A>] and =
MUST NOT be directly represented in UTF-8 or any other
   encoding (this requirement is for compatibility with <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> and
   other SDP-related standards, which predate the development of
   internationalised domain names).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.1>5.1</A>.  =
Protocol Version ("v=3D")</SPAN>

      v=3D0

   The "v=3D" field gives the version of the Session Description =
Protocol.
   This memo defines version 0.  There is no minor version number.





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 10]</SPAN>
<A id=3Dpage-11 href=3D"http://tools.ietf.org/html/rfc4566#page-11" =
name=3Dpage-11><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.2>5.2</A>.  Origin =
("o=3D")</SPAN>

      o=3D&lt;username&gt; &lt;sess-id&gt; &lt;sess-version&gt; =
&lt;nettype&gt; &lt;addrtype&gt;
        &lt;unicast-address&gt;

   The "o=3D" field gives the originator of the session (her username =
and
   the address of the user's host) plus a session identifier and version
   number:

   &lt;username&gt; is the user's login on the originating host, or it =
is "-"
      if the originating host does not support the concept of user IDs.
      The &lt;username&gt; MUST NOT contain spaces.

   &lt;sess-id&gt; is a numeric string such that the tuple of =
&lt;username&gt;,
      &lt;sess-id&gt;, &lt;nettype&gt;, &lt;addrtype&gt;, and =
&lt;unicast-address&gt; forms a
      globally unique identifier for the session.  The method of
      &lt;sess-id&gt; allocation is up to the creating tool, but it has =
been
      suggested that a Network Time Protocol (NTP) format timestamp be
      used to ensure uniqueness [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-13">13</A>].

   &lt;sess-version&gt; is a version number for this session =
description.  Its
      usage is up to the creating tool, so long as &lt;sess-version&gt; =
is
      increased when a modification is made to the session data.  Again,
      it is RECOMMENDED that an NTP format timestamp is used.

   &lt;nettype&gt; is a text string giving the type of network.  =
Initially
      "IN" is defined to have the meaning "Internet", but other values
      MAY be registered in the future (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).

   &lt;addrtype&gt; is a text string giving the type of the address that
      follows.  Initially "IP4" and "IP6" are defined, but other values
      MAY be registered in the future (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).

   &lt;unicast-address&gt; is the address of the machine from which the
      session was created.  For an address type of IP4, this is either
      the fully qualified domain name of the machine or the dotted-
      decimal representation of the IP version 4 address of the machine.
      For an address type of IP6, this is either the fully qualified
      domain name of the machine or the compressed textual
      representation of the IP version 6 address of the machine.  For
      both IP4 and IP6, the fully qualified domain name is the form that
      SHOULD be given unless this is unavailable, in which case the
      globally unique address MAY be substituted.  A local IP address
      MUST NOT be used in any context where the SDP description might
      leave the scope in which the address is meaningful (for example, a
      local address MUST NOT be included in an application-level
      referral that might leave the scope).




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 11]</SPAN>
<A id=3Dpage-12 href=3D"http://tools.ietf.org/html/rfc4566#page-12" =
name=3Dpage-12><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   In general, the "o=3D" field serves as a globally unique identifier =
for
   this version of this session description, and the subfields excepting
   the version taken together identify the session irrespective of any
   modifications.

   For privacy reasons, it is sometimes desirable to obfuscate the
   username and IP address of the session originator.  If this is a
   concern, an arbitrary &lt;username&gt; and private =
&lt;unicast-address&gt; MAY be
   chosen to populate the "o=3D" field, provided that these are selected
   in a manner that does not affect the global uniqueness of the field.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.3>5.3</A>.  Session =
Name ("s=3D")</SPAN>

      s=3D&lt;session name&gt;

   The "s=3D" field is the textual session name.  There MUST be one and
   only one "s=3D" field per session description.  The "s=3D" field MUST =
NOT
   be empty and SHOULD contain ISO 10646 characters (but see also the
   "a=3Dcharset" attribute).  If a session has no meaningful name, the
   value "s=3D " SHOULD be used (i.e., a single space as the session
   name).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.4>5.4</A>.  Session =
Information ("i=3D")</SPAN>

      i=3D&lt;session description&gt;

   The "i=3D" field provides textual information about the session.  =
There
   MUST be at most one session-level "i=3D" field per session =
description,
   and at most one "i=3D" field per media.  If the "a=3Dcharset" =
attribute
   is present, it specifies the character set used in the "i=3D" field.
   If the "a=3Dcharset" attribute is not present, the "i=3D" field MUST
   contain ISO 10646 characters in UTF-8 encoding.

   A single "i=3D" field MAY also be used for each media definition.  In
   media definitions, "i=3D" fields are primarily intended for labelling
   media streams.  As such, they are most likely to be useful when a
   single session has more than one distinct media stream of the same
   media type.  An example would be two different whiteboards, one for
   slides and one for feedback and questions.

   The "i=3D" field is intended to provide a free-form human-readable
   description of the session or the purpose of a media stream.  It is
   not suitable for parsing by automata.








<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 12]</SPAN>
<A id=3Dpage-13 href=3D"http://tools.ietf.org/html/rfc4566#page-13" =
name=3Dpage-13><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.5>5.5</A>.  URI =
("u=3D")</SPAN>

      u=3D&lt;uri&gt;

   A URI is a Uniform Resource Identifier as used by WWW clients [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-7">7</A>].
   The URI should be a pointer to additional information about the
   session.  This field is OPTIONAL, but if it is present it MUST be
   specified before the first media field.  No more than one URI field
   is allowed per session description.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.6>5.6</A>.  Email =
Address and Phone Number ("e=3D" and "p=3D")</SPAN>

      e=3D&lt;email-address&gt;
      p=3D&lt;phone-number&gt;

   The "e=3D" and "p=3D" lines specify contact information for the =
person
   responsible for the conference.  This is not necessarily the same
   person that created the conference announcement.

   Inclusion of an email address or phone number is OPTIONAL.  Note that
   the previous version of SDP specified that either an email field or a
   phone field MUST be specified, but this was widely ignored.  The
   change brings the specification into line with common usage.

   If an email address or phone number is present, it MUST be specified
   before the first media field.  More than one email or phone field can
   be given for a session description.

   Phone numbers SHOULD be given in the form of an international public
   telecommunication number (see ITU-T Recommendation E.164) preceded by
   a "+".  Spaces and hyphens may be used to split up a phone field to
   aid readability if desired.  For example:

      p=3D+1 617 555-6011

   Both email addresses and phone numbers can have an OPTIONAL free text
   string associated with them, normally giving the name of the person
   who may be contacted.  This MUST be enclosed in parentheses if it is
   present.  For example:

      e=3Dj.doe@example.com (Jane Doe)

   The alternative <A href=3D"http://tools.ietf.org/html/rfc2822">RFC =
2822</A> [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-29">29</A>] =
name quoting convention is also allowed
   for both email addresses and phone numbers.  For example:

      e=3DJane Doe &lt;j.doe@example.com&gt;





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 13]</SPAN>
<A id=3Dpage-14 href=3D"http://tools.ietf.org/html/rfc4566#page-14" =
name=3Dpage-14><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   The free text string SHOULD be in the ISO-10646 character set with
   UTF-8 encoding, or alternatively in ISO-8859-1 or other encodings if
   the appropriate session-level "a=3Dcharset" attribute is set.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.7>5.7</A>.  =
Connection Data ("c=3D")</SPAN>

      c=3D&lt;nettype&gt; &lt;addrtype&gt; &lt;connection-address&gt;

   The "c=3D" field contains connection data.

   A session description MUST contain either at least one "c=3D" field =
in
   each media description or a single "c=3D" field at the session level.
   It MAY contain a single session-level "c=3D" field and additional =
"c=3D"
   field(s) per media description, in which case the per-media values
   override the session-level settings for the respective media.

   The first sub-field ("&lt;nettype&gt;") is the network type, which is =
a
   text string giving the type of network.  Initially, "IN" is defined
   to have the meaning "Internet", but other values MAY be registered in
   the future (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).

   The second sub-field ("&lt;addrtype&gt;") is the address type.  This =
allows
   SDP to be used for sessions that are not IP based.  This memo only
   defines IP4 and IP6, but other values MAY be registered in the future
   (see <A href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section =
8</A>).

   The third sub-field ("&lt;connection-address&gt;") is the connection
   address.  OPTIONAL sub-fields MAY be added after the connection
   address depending on the value of the &lt;addrtype&gt; field.

   When the &lt;addrtype&gt; is IP4 and IP6, the connection address is =
defined
   as follows:

   o  If the session is multicast, the connection address will be an IP
      multicast group address.  If the session is not multicast, then
      the connection address contains the unicast IP address of the
      expected data source or data relay or data sink as determined by
      additional attribute fields.  It is not expected that unicast
      addresses will be given in a session description that is
      communicated by a multicast announcement, though this is not
      prohibited.

   o  Sessions using an IPv4 multicast connection address MUST also have
      a time to live (TTL) value present in addition to the multicast
      address.  The TTL and the address together define the scope with
      which multicast packets sent in this conference will be sent.  TTL
      values MUST be in the range 0-255.  Although the TTL MUST be
      specified, its use to scope multicast traffic is deprecated;



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 14]</SPAN>
<A id=3Dpage-15 href=3D"http://tools.ietf.org/html/rfc4566#page-15" =
name=3Dpage-15><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      applications SHOULD use an administratively scoped address
      instead.

   The TTL for the session is appended to the address using a slash as a
   separator.  An example is:

      c=3DIN IP4 224.2.36.42/127

   IPv6 multicast does not use TTL scoping, and hence the TTL value MUST
   NOT be present for IPv6 multicast.  It is expected that IPv6 scoped
   addresses will be used to limit the scope of conferences.

   Hierarchical or layered encoding schemes are data streams where the
   encoding from a single media source is split into a number of layers.
   The receiver can choose the desired quality (and hence bandwidth) by
   only subscribing to a subset of these layers.  Such layered encodings
   are normally transmitted in multiple multicast groups to allow
   multicast pruning.  This technique keeps unwanted traffic from sites
   only requiring certain levels of the hierarchy.  For applications
   requiring multiple multicast groups, we allow the following notation
   to be used for the connection address:

      &lt;base multicast address&gt;[/&lt;ttl&gt;]/&lt;number of =
addresses&gt;

   If the number of addresses is not given, it is assumed to be one.
   Multicast addresses so assigned are contiguously allocated above the
   base address, so that, for example:

      c=3DIN IP4 224.2.1.1/127/3

   would state that addresses 224.2.1.1, 224.2.1.2, and 224.2.1.3 are to
   be used at a TTL of 127.  This is semantically identical to including
   multiple "c=3D" lines in a media description:

      c=3DIN IP4 224.2.1.1/127
      c=3DIN IP4 224.2.1.2/127
      c=3DIN IP4 224.2.1.3/127

   Similarly, an IPv6 example would be:

      c=3DIN IP6 FF15::101/3

   which is semantically equivalent to:

      c=3DIN IP6 FF15::101
      c=3DIN IP6 FF15::102
      c=3DIN IP6 FF15::103




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 15]</SPAN>
<A id=3Dpage-16 href=3D"http://tools.ietf.org/html/rfc4566#page-16" =
name=3Dpage-16><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   (remembering that the TTL field is not present in IPv6 multicast).

   Multiple addresses or "c=3D" lines MAY be specified on a per-media
   basis only if they provide multicast addresses for different layers
   in a hierarchical or layered encoding scheme.  They MUST NOT be
   specified for a session-level "c=3D" field.

   The slash notation for multiple addresses described above MUST NOT be
   used for IP unicast addresses.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.8>5.8</A>.  =
Bandwidth ("b=3D")</SPAN>

      b=3D&lt;bwtype&gt;:&lt;bandwidth&gt;

   This OPTIONAL field denotes the proposed bandwidth to be used by the
   session or media.  The &lt;bwtype&gt; is an alphanumeric modifier =
giving
   the meaning of the &lt;bandwidth&gt; figure.  Two values are defined =
in
   this specification, but other values MAY be registered in the future
   (see <A href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section =
8</A> and [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-21">21</A>], [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-25">25</A>]):

   CT If the bandwidth of a session or media in a session is different
      from the bandwidth implicit from the scope, a "b=3DCT:..." line
      SHOULD be supplied for the session giving the proposed upper limit
      to the bandwidth used (the "conference total" bandwidth).  The
      primary purpose of this is to give an approximate idea as to
      whether two or more sessions can coexist simultaneously.  When
      using the CT modifier with RTP, if several RTP sessions are part
      of the conference, the conference total refers to total bandwidth
      of all RTP sessions.

   AS The bandwidth is interpreted to be application specific (it will
      be the application's concept of maximum bandwidth).  Normally,
      this will coincide with what is set on the application's "maximum
      bandwidth" control if applicable.  For RTP-based applications, AS
      gives the RTP "session bandwidth" as defined in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-6.2">Section 6.2</A> =
of
      [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-19">19</A>].

   Note that CT gives a total bandwidth figure for all the media at all
   sites.  AS gives a bandwidth figure for a single media at a single
   site, although there may be many sites sending simultaneously.

   A prefix "X-" is defined for &lt;bwtype&gt; names.  This is intended =
for
   experimental purposes only.  For example:

      b=3DX-YZ:128






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 16]</SPAN>
<A id=3Dpage-17 href=3D"http://tools.ietf.org/html/rfc4566#page-17" =
name=3Dpage-17><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   Use of the "X-" prefix is NOT RECOMMENDED: instead new modifiers
   SHOULD be registered with IANA in the standard namespace.  SDP
   parsers MUST ignore bandwidth fields with unknown modifiers.
   Modifiers MUST be alphanumeric and, although no length limit is
   given, it is recommended that they be short.

   The &lt;bandwidth&gt; is interpreted as kilobits per second by =
default.
   The definition of a new &lt;bwtype&gt; modifier MAY specify that the
   bandwidth is to be interpreted in some alternative unit (the "CT" and
   "AS" modifiers defined in this memo use the default units).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.9>5.9</A>.  Timing =
("t=3D")</SPAN>

      t=3D&lt;start-time&gt; &lt;stop-time&gt;

   The "t=3D" lines specify the start and stop times for a session.
   Multiple "t=3D" lines MAY be used if a session is active at multiple
   irregularly spaced times; each additional "t=3D" line specifies an
   additional period of time for which the session will be active.  If
   the session is active at regular times, an "r=3D" line (see below)
   should be used in addition to, and following, a "t=3D" line -- in =
which
   case the "t=3D" line specifies the start and stop times of the repeat
   sequence.

   The first and second sub-fields give the start and stop times,
   respectively, for the session.  These values are the decimal
   representation of Network Time Protocol (NTP) time values in seconds
   since 1900 [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-13">13</A>].  To convert =
these values to UNIX time, subtract
   decimal 2208988800.

   NTP timestamps are elsewhere represented by 64-bit values, which wrap
   sometime in the year 2036.  Since SDP uses an arbitrary length
   decimal representation, this should not cause an issue (SDP
   timestamps MUST continue counting seconds since 1900, NTP will use
   the value modulo the 64-bit limit).

   If the &lt;stop-time&gt; is set to zero, then the session is not =
bounded,
   though it will not become active until after the &lt;start-time&gt;.  =
If
   the &lt;start-time&gt; is also zero, the session is regarded as =
permanent.

   User interfaces SHOULD strongly discourage the creation of unbounded
   and permanent sessions as they give no information about when the
   session is actually going to terminate, and so make scheduling
   difficult.

   The general assumption may be made, when displaying unbounded
   sessions that have not timed out to the user, that an unbounded
   session will only be active until half an hour from the current time



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 17]</SPAN>
<A id=3Dpage-18 href=3D"http://tools.ietf.org/html/rfc4566#page-18" =
name=3Dpage-18><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   or the session start time, whichever is the later.  If behaviour
   other than this is required, an end-time SHOULD be given and modified
   as appropriate when new information becomes available about when the
   session should really end.

   Permanent sessions may be shown to the user as never being active
   unless there are associated repeat times that state precisely when
   the session will be active.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.10>5.10</A>.  =
Repeat Times ("r=3D")</SPAN>

      r=3D&lt;repeat interval&gt; &lt;active duration&gt; &lt;offsets =
from start-time&gt;

   "r=3D" fields specify repeat times for a session.  For example, if a
   session is active at 10am on Monday and 11am on Tuesday for one hour
   each week for three months, then the &lt;start-time&gt; in the
   corresponding "t=3D" field would be the NTP representation of 10am on
   the first Monday, the &lt;repeat interval&gt; would be 1 week, the =
&lt;active
   duration&gt; would be 1 hour, and the offsets would be zero and 25
   hours.  The corresponding "t=3D" field stop time would be the NTP
   representation of the end of the last session three months later.  By
   default, all fields are in seconds, so the "r=3D" and "t=3D" fields =
might
   be the following:

      t=3D3034423619 3042462419
      r=3D604800 3600 0 90000

   To make description more compact, times may also be given in units of
   days, hours, or minutes.  The syntax for these is a number
   immediately followed by a single case-sensitive character.
   Fractional units are not allowed -- a smaller unit should be used
   instead.  The following unit specification characters are allowed:

      d - days (86400 seconds)
      h - hours (3600 seconds)
      m - minutes (60 seconds)
      s - seconds (allowed for completeness)

   Thus, the above session announcement could also have been written:

      r=3D7d 1h 0 25h

   Monthly and yearly repeats cannot be directly specified with a single
   SDP repeat time; instead, separate "t=3D" fields should be used to
   explicitly list the session times.






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 18]</SPAN>
<A id=3Dpage-19 href=3D"http://tools.ietf.org/html/rfc4566#page-19" =
name=3Dpage-19><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.11>5.11</A>.  Time =
Zones ("z=3D")</SPAN>

      z=3D&lt;adjustment time&gt; &lt;offset&gt; &lt;adjustment time&gt; =
&lt;offset&gt; ....

   To schedule a repeated session that spans a change from daylight
   saving time to standard time or vice versa, it is necessary to
   specify offsets from the base time.  This is required because
   different time zones change time at different times of day, different
   countries change to or from daylight saving time on different dates,
   and some countries do not have daylight saving time at all.

   Thus, in order to schedule a session that is at the same time winter
   and summer, it must be possible to specify unambiguously by whose
   time zone a session is scheduled.  To simplify this task for
   receivers, we allow the sender to specify the NTP time that a time
   zone adjustment happens and the offset from the time when the session
   was first scheduled.  The "z=3D" field allows the sender to specify a
   list of these adjustment times and offsets from the base time.

   An example might be the following:

      z=3D2882844526 -1h 2898848070 0

   This specifies that at time 2882844526, the time base by which the
   session's repeat times are calculated is shifted back by 1 hour, and
   that at time 2898848070, the session's original time base is
   restored.  Adjustments are always relative to the specified start
   time -- they are not cumulative.  Adjustments apply to all "t=3D" and
   "r=3D" lines in a session description.

   If a session is likely to last several years, it is expected that the
   session announcement will be modified periodically rather than
   transmit several years' worth of adjustments in one session
   announcement.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.12>5.12</A>.  =
Encryption Keys ("k=3D")</SPAN>

      k=3D&lt;method&gt;
      k=3D&lt;method&gt;:&lt;encryption key&gt;

   If transported over a secure and trusted channel, the Session
   Description Protocol MAY be used to convey encryption keys.  A simple
   mechanism for key exchange is provided by the key field ("k=3D"),
   although this is primarily supported for compatibility with older
   implementations and its use is NOT RECOMMENDED.  Work is in progress
   to define new key exchange mechanisms for use with SDP [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-27">27</A>] [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-28">28</A>], and
   it is expected that new applications will use those mechanisms.




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 19]</SPAN>
<A id=3Dpage-20 href=3D"http://tools.ietf.org/html/rfc4566#page-20" =
name=3Dpage-20><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   A key field is permitted before the first media entry (in which case
   it applies to all media in the session), or for each media entry as
   required.  The format of keys and their usage are outside the scope
   of this document, and the key field provides no way to indicate the
   encryption algorithm to be used, key type, or other information about
   the key: this is assumed to be provided by the higher-level protocol
   using SDP.  If there is a need to convey this information within SDP,
   the extensions mentioned previously SHOULD be used.  Many security
   protocols require two keys: one for confidentiality, another for
   integrity.  This specification does not support transfer of two keys.

   The method indicates the mechanism to be used to obtain a usable key
   by external means, or from the encoded encryption key given.  The
   following methods are defined:

      k=3Dclear:&lt;encryption key&gt;

         The encryption key is included untransformed in this key field.
         This method MUST NOT be used unless it can be guaranteed that
         the SDP is conveyed over a secure channel.  The encryption key
         is interpreted as text according to the charset attribute; use
         the "k=3Dbase64:" method to convey characters that are =
otherwise
         prohibited in SDP.

      k=3Dbase64:&lt;encoded encryption key&gt;

         The encryption key is included in this key field but has been
         base64 encoded [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-12">12</A>] because it =
includes characters that are
         prohibited in SDP.  This method MUST NOT be used unless it can
         be guaranteed that the SDP is conveyed over a secure channel.

      k=3Duri:&lt;URI to obtain key&gt;

         A Uniform Resource Identifier is included in the key field.
         The URI refers to the data containing the key, and may require
         additional authentication before the key can be returned.  When
         a request is made to the given URI, the reply should specify
         the encoding for the key.  The URI is often an Secure Socket
         Layer/Transport Layer Security (SSL/TLS)-protected HTTP URI
         ("https:"), although this is not required.

      k=3Dprompt

         No key is included in this SDP description, but the session or
         media stream referred to by this key field is encrypted.  The
         user should be prompted for the key when attempting to join the
         session, and this user-supplied key should then be used to




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 20]</SPAN>
<A id=3Dpage-21 href=3D"http://tools.ietf.org/html/rfc4566#page-21" =
name=3Dpage-21><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         decrypt the media streams.  The use of user-specified keys is
         NOT RECOMMENDED, since such keys tend to have weak security
         properties.

   The key field MUST NOT be used unless it can be guaranteed that the
   SDP is conveyed over a secure and trusted channel.  An example of
   such a channel might be SDP embedded inside an S/MIME message or a
   TLS-protected HTTP session.  It is important to ensure that the
   secure channel is with the party that is authorised to join the
   session, not an intermediary: if a caching proxy server is used, it
   is important to ensure that the proxy is either trusted or unable to
   access the SDP.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.13>5.13</A>.  =
Attributes ("a=3D")</SPAN>

      a=3D&lt;attribute&gt;
      a=3D&lt;attribute&gt;:&lt;value&gt;

   Attributes are the primary means for extending SDP.  Attributes may
   be defined to be used as "session-level" attributes, "media-level"
   attributes, or both.

   A media description may have any number of attributes ("a=3D" fields)
   that are media specific.  These are referred to as "media-level"
   attributes and add information about the media stream.  Attribute
   fields can also be added before the first media field; these
   "session-level" attributes convey additional information that applies
   to the conference as a whole rather than to individual media.

   Attribute fields may be of two forms:

   o  A property attribute is simply of the form "a=3D&lt;flag&gt;".  =
These are
      binary attributes, and the presence of the attribute conveys that
      the attribute is a property of the session.  An example might be
      "a=3Drecvonly".

   o  A value attribute is of the form =
"a=3D&lt;attribute&gt;:&lt;value&gt;".  For
      example, a whiteboard could have the value attribute "a=3Dorient:
      landscape"

   Attribute interpretation depends on the media tool being invoked.
   Thus receivers of session descriptions should be configurable in
   their interpretation of session descriptions in general and of
   attributes in particular.

   Attribute names MUST use the US-ASCII subset of ISO-10646/UTF-8.





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 21]</SPAN>
<A id=3Dpage-22 href=3D"http://tools.ietf.org/html/rfc4566#page-22" =
name=3Dpage-22><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   Attribute values are octet strings, and MAY use any octet value
   except 0x00 (Nul), 0x0A (LF), and 0x0D (CR).  By default, attribute
   values are to be interpreted as in ISO-10646 character set with UTF-8
   encoding.  Unlike other text fields, attribute values are NOT
   normally affected by the "charset" attribute as this would make
   comparisons against known values problematic.  However, when an
   attribute is defined, it can be defined to be charset dependent, in
   which case its value should be interpreted in the session charset
   rather than in ISO-10646.

   Attributes MUST be registered with IANA (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).  =
If an
   attribute is received that is not understood, it MUST be ignored by
   the receiver.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.14>5.14</A>.  Media =
Descriptions ("m=3D")</SPAN>

      m=3D&lt;media&gt; &lt;port&gt; &lt;proto&gt; &lt;fmt&gt; ...

   A session description may contain a number of media descriptions.
   Each media description starts with an "m=3D" field and is terminated =
by
   either the next "m=3D" field or by the end of the session =
description.
   A media field has several sub-fields:

   &lt;media&gt; is the media type.  Currently defined media are =
"audio",
      "video", "text", "application", and "message", although this list
      may be extended in the future (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).

   &lt;port&gt; is the transport port to which the media stream is sent. =
 The
      meaning of the transport port depends on the network being used as
      specified in the relevant "c=3D" field, and on the transport
      protocol defined in the &lt;proto&gt; sub-field of the media =
field.
      Other ports used by the media application (such as the RTP Control
      Protocol (RTCP) port [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-19">19</A>]) MAY be =
derived algorithmically from the
      base media port or MAY be specified in a separate attribute (for
      example, "a=3Drtcp:" as defined in [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-22">22</A>]).

      If non-contiguous ports are used or if they don't follow the
      parity rule of even RTP ports and odd RTCP ports, the "a=3Drtcp:"
      attribute MUST be used.  Applications that are requested to send
      media to a &lt;port&gt; that is odd and where the "a=3Drtcp:" is =
present
      MUST NOT subtract 1 from the RTP port: that is, they MUST send the
      RTP to the port indicated in &lt;port&gt; and send the RTCP to the =
port
      indicated in the "a=3Drtcp" attribute.

      For applications where hierarchically encoded streams are being
      sent to a unicast address, it may be necessary to specify multiple
      transport ports.  This is done using a similar notation to that
      used for IP multicast addresses in the "c=3D" field:



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 22]</SPAN>
<A id=3Dpage-23 href=3D"http://tools.ietf.org/html/rfc4566#page-23" =
name=3Dpage-23><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         m=3D&lt;media&gt; &lt;port&gt;/&lt;number of ports&gt; =
&lt;proto&gt; &lt;fmt&gt; ...

      In such a case, the ports used depend on the transport protocol.
      For RTP, the default is that only the even-numbered ports are used
      for data with the corresponding one-higher odd ports used for the
      RTCP belonging to the RTP session, and the &lt;number of ports&gt;
      denoting the number of RTP sessions.  For example:

         m=3Dvideo 49170/2 RTP/AVP 31

      would specify that ports 49170 and 49171 form one RTP/RTCP pair
      and 49172 and 49173 form the second RTP/RTCP pair.  RTP/AVP is the
      transport protocol and 31 is the format (see below).  If non-
      contiguous ports are required, they must be signalled using a
      separate attribute (for example, "a=3Drtcp:" as defined in [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-22">22</A>]).

      If multiple addresses are specified in the "c=3D" field and =
multiple
      ports are specified in the "m=3D" field, a one-to-one mapping from
      port to the corresponding address is implied.  For example:

         c=3DIN IP4 224.2.1.1/127/2
         m=3Dvideo 49170/2 RTP/AVP 31

      would imply that address 224.2.1.1 is used with ports 49170 and
      49171, and address 224.2.1.2 is used with ports 49172 and 49173.

      The semantics of multiple "m=3D" lines using the same transport
      address are undefined.  This implies that, unlike limited past
      practice, there is no implicit grouping defined by such means and
      an explicit grouping framework (for example, [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-18">18</A>]) should =
instead
      be used to express the intended semantics.

   &lt;proto&gt; is the transport protocol.  The meaning of the =
transport
      protocol is dependent on the address type field in the relevant
      "c=3D" field.  Thus a "c=3D" field of IP4 indicates that the =
transport
      protocol runs over IP4.  The following transport protocols are
      defined, but may be extended through registration of new protocols
      with IANA (see <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>):

      *  udp: denotes an unspecified protocol running over UDP.

      *  RTP/AVP: denotes RTP [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-19">19</A>] used under =
the RTP Profile for Audio
         and Video Conferences with Minimal Control [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-20">20</A>] running over
         UDP.

      *  RTP/SAVP: denotes the Secure Real-time Transport Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-23">23</A>]
         running over UDP.




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 23]</SPAN>
<A id=3Dpage-24 href=3D"http://tools.ietf.org/html/rfc4566#page-24" =
name=3Dpage-24><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      The main reason to specify the transport protocol in addition to
      the media format is that the same standard media formats may be
      carried over different transport protocols even when the network
      protocol is the same -- a historical example is vat Pulse Code
      Modulation (PCM) audio and RTP PCM audio; another might be TCP/RTP
      PCM audio.  In addition, relays and monitoring tools that are
      transport-protocol-specific but format-independent are possible.

   &lt;fmt&gt; is a media format description.  The fourth and any =
subsequent
      sub-fields describe the format of the media.  The interpretation
      of the media format depends on the value of the &lt;proto&gt; =
sub-field.

      If the &lt;proto&gt; sub-field is "RTP/AVP" or "RTP/SAVP" the =
&lt;fmt&gt;
      sub-fields contain RTP payload type numbers.  When a list of
      payload type numbers is given, this implies that all of these
      payload formats MAY be used in the session, but the first of these
      formats SHOULD be used as the default format for the session.  For
      dynamic payload type assignments the "a=3Drtpmap:" attribute (see
      <A href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section =
6</A>) SHOULD be used to map from an RTP payload type number
      to a media encoding name that identifies the payload format.  The
      "a=3Dfmtp:"  attribute MAY be used to specify format parameters =
(see
      <A href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section =
6</A>).

      If the &lt;proto&gt; sub-field is "udp" the &lt;fmt&gt; sub-fields =
MUST
      reference a media type describing the format under the "audio",
      "video", "text", "application", or "message" top-level media
      types.  The media type registration SHOULD define the packet
      format for use with UDP transport.

      For media using other transport protocols, the &lt;fmt&gt; field =
is
      protocol specific.  Rules for interpretation of the &lt;fmt&gt; =
sub-
      field MUST be defined when registering new protocols (see Section
      8.2.2).

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-6>6</A>.  SDP =
Attributes</SPAN>

   The following attributes are defined.  Since application writers may
   add new attributes as they are required, this list is not exhaustive.
   Registration procedures for new attributes are defined in Section
   8.2.4.

      a=3Dcat:&lt;category&gt;

         This attribute gives the dot-separated hierarchical category of
         the session.  This is to enable a receiver to filter unwanted
         sessions by category.  There is no central registry of
         categories.  It is a session-level attribute, and it is not
         dependent on charset.



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 24]</SPAN>
<A id=3Dpage-25 href=3D"http://tools.ietf.org/html/rfc4566#page-25" =
name=3Dpage-25><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      a=3Dkeywds:&lt;keywords&gt;

         Like the cat attribute, this is to assist identifying wanted
         sessions at the receiver.  This allows a receiver to select
         interesting session based on keywords describing the purpose of
         the session; there is no central registry of keywords.  It is a
         session-level attribute.  It is a charset-dependent attribute,
         meaning that its value should be interpreted in the charset
         specified for the session description if one is specified, or
         by default in ISO 10646/UTF-8.

      a=3Dtool:&lt;name and version of tool&gt;

         This gives the name and version number of the tool used to
         create the session description.  It is a session-level
         attribute, and it is not dependent on charset.

      a=3Dptime:&lt;packet time&gt;

         This gives the length of time in milliseconds represented by
         the media in a packet.  This is probably only meaningful for
         audio data, but may be used with other media types if it makes
         sense.  It should not be necessary to know ptime to decode RTP
         or vat audio, and it is intended as a recommendation for the
         encoding/packetisation of audio.  It is a media-level
         attribute, and it is not dependent on charset.

      a=3Dmaxptime:&lt;maximum packet time&gt;

         This gives the maximum amount of media that can be encapsulated
         in each packet, expressed as time in milliseconds.  The time
         SHALL be calculated as the sum of the time the media present in
         the packet represents.  For frame-based codecs, the time SHOULD
         be an integer multiple of the frame size.  This attribute is
         probably only meaningful for audio data, but may be used with
         other media types if it makes sense.  It is a media-level
         attribute, and it is not dependent on charset.  Note that this
         attribute was introduced after <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A>, and =
non-updated
         implementations will ignore this attribute.

      a=3Drtpmap:&lt;payload type&gt; &lt;encoding name&gt;/&lt;clock =
rate&gt; [/&lt;encoding
         parameters&gt;]

         This attribute maps from an RTP payload type number (as used in
         an "m=3D" line) to an encoding name denoting the payload format
         to be used.  It also provides information on the clock rate and
         encoding parameters.  It is a media-level attribute that is not
         dependent on charset.



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 25]</SPAN>
<A id=3Dpage-26 href=3D"http://tools.ietf.org/html/rfc4566#page-26" =
name=3Dpage-26><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         Although an RTP profile may make static assignments of payload
         type numbers to payload formats, it is more common for that
         assignment to be done dynamically using "a=3Drtpmap:" =
attributes.
         As an example of a static payload type, consider u-law PCM
         coded single-channel audio sampled at 8 kHz.  This is
         completely defined in the RTP Audio/Video profile as payload
         type 0, so there is no need for an "a=3Drtpmap:" attribute, and
         the media for such a stream sent to UDP port 49232 can be
         specified as:

            m=3Daudio 49232 RTP/AVP 0

         An example of a dynamic payload type is 16-bit linear encoded
         stereo audio sampled at 16 kHz.  If we wish to use the dynamic
         RTP/AVP payload type 98 for this stream, additional information
         is required to decode it:

            m=3Daudio 49232 RTP/AVP 98
            a=3Drtpmap:98 L16/16000/2

         Up to one rtpmap attribute can be defined for each media format
         specified.  Thus, we might have the following:

            m=3Daudio 49230 RTP/AVP 96 97 98
            a=3Drtpmap:96 L8/8000
            a=3Drtpmap:97 L16/8000
            a=3Drtpmap:98 L16/11025/2

         RTP profiles that specify the use of dynamic payload types MUST
         define the set of valid encoding names and/or a means to
         register encoding names if that profile is to be used with SDP.
         The "RTP/AVP" and "RTP/SAVP" profiles use media subtypes for
         encoding names, under the top-level media type denoted in the
         "m=3D" line.  In the example above, the media types are
         "audio/l8" and "audio/l16".

         For audio streams, &lt;encoding parameters&gt; indicates the =
number
         of audio channels.  This parameter is OPTIONAL and may be
         omitted if the number of channels is one, provided that no
         additional parameters are needed.

         For video streams, no encoding parameters are currently
         specified.

         Additional encoding parameters MAY be defined in the future,
         but codec-specific parameters SHOULD NOT be added.  Parameters
         added to an "a=3Drtpmap:" attribute SHOULD only be those =
required
         for a session directory to make the choice of appropriate media



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 26]</SPAN>
<A id=3Dpage-27 href=3D"http://tools.ietf.org/html/rfc4566#page-27" =
name=3Dpage-27><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         to participate in a session.  Codec-specific parameters should
         be added in other attributes (for example, "a=3Dfmtp:").

         Note: RTP audio formats typically do not include information
         about the number of samples per packet.  If a non-default (as
         defined in the RTP Audio/Video Profile) packetisation is
         required, the "ptime" attribute is used as given above.

      a=3Drecvonly

         This specifies that the tools should be started in receive-only
         mode where applicable.  It can be either a session- or media-
         level attribute, and it is not dependent on charset.  Note that
         recvonly applies to the media only, not to any associated
         control protocol (e.g., an RTP-based system in recvonly mode
         SHOULD still send RTCP packets).

      a=3Dsendrecv

         This specifies that the tools should be started in send and
         receive mode.  This is necessary for interactive conferences
         with tools that default to receive-only mode.  It can be either
         a session or media-level attribute, and it is not dependent on
         charset.

         If none of the attributes "sendonly", "recvonly", "inactive",
         and "sendrecv" is present, "sendrecv" SHOULD be assumed as the
         default for sessions that are not of the conference type
         "broadcast" or "H332" (see below).

      a=3Dsendonly

         This specifies that the tools should be started in send-only
         mode.  An example may be where a different unicast address is
         to be used for a traffic destination than for a traffic source.
         In such a case, two media descriptions may be used, one
         sendonly and one recvonly.  It can be either a session- or
         media-level attribute, but would normally only be used as a
         media attribute.  It is not dependent on charset.  Note that
         sendonly applies only to the media, and any associated control
         protocol (e.g., RTCP) SHOULD still be received and processed as
         normal.

      a=3Dinactive

         This specifies that the tools should be started in inactive
         mode.  This is necessary for interactive conferences where
         users can put other users on hold.  No media is sent over an



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 27]</SPAN>
<A id=3Dpage-28 href=3D"http://tools.ietf.org/html/rfc4566#page-28" =
name=3Dpage-28><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         inactive media stream.  Note that an RTP-based system SHOULD
         still send RTCP, even if started inactive.  It can be either a
         session or media-level attribute, and it is not dependent on
         charset.

      a=3Dorient:&lt;orientation&gt;

         Normally this is only used for a whiteboard or presentation
         tool.  It specifies the orientation of a the workspace on the
         screen.  It is a media-level attribute.  Permitted values are
         "portrait", "landscape", and "seascape" (upside-down
         landscape).  It is not dependent on charset.

      a=3Dtype:&lt;conference type&gt;

         This specifies the type of the conference.  Suggested values
         are "broadcast", "meeting", "moderated", "test", and "H332".
         "recvonly" should be the default for "type:broadcast" sessions,
         "type:meeting" should imply "sendrecv", and "type:moderated"
         should indicate the use of a floor control tool and that the
         media tools are started so as to mute new sites joining the
         conference.

         Specifying the attribute "type:H332" indicates that this
         loosely coupled session is part of an H.332 session as defined
         in the ITU H.332 specification [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-26">26</A>].  Media tools =
should be
         started "recvonly".

         Specifying the attribute "type:test" is suggested as a hint
         that, unless explicitly requested otherwise, receivers can
         safely avoid displaying this session description to users.

         The type attribute is a session-level attribute, and it is not
         dependent on charset.

      a=3Dcharset:&lt;character set&gt;

         This specifies the character set to be used to display the
         session name and information data.  By default, the ISO-10646
         character set in UTF-8 encoding is used.  If a more compact
         representation is required, other character sets may be used.
         For example, the ISO 8859-1 is specified with the following SDP
         attribute:

            a=3Dcharset:ISO-8859-1






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 28]</SPAN>
<A id=3Dpage-29 href=3D"http://tools.ietf.org/html/rfc4566#page-29" =
name=3Dpage-29><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         This is a session-level attribute and is not dependent on
         charset.  The charset specified MUST be one of those registered
         with IANA, such as ISO-8859-1.  The character set identifier is
         a US-ASCII string and MUST be compared against the IANA
         identifiers using a case-insensitive comparison.  If the
         identifier is not recognised or not supported, all strings that
         are affected by it SHOULD be regarded as octet strings.

         Note that a character set specified MUST still prohibit the use
         of bytes 0x00 (Nul), 0x0A (LF), and 0x0d (CR).  Character sets
         requiring the use of these characters MUST define a quoting
         mechanism that prevents these bytes from appearing within text
         fields.

      a=3Dsdplang:&lt;language tag&gt;

         This can be a session-level attribute or a media-level
         attribute.  As a session-level attribute, it specifies the
         language for the session description.  As a media-level
         attribute, it specifies the language for any media-level SDP
         information field associated with that media.  Multiple sdplang
         attributes can be provided either at session or media level if
         multiple languages in the session description or media use
         multiple languages, in which case the order of the attributes
         indicates the order of importance of the various languages in
         the session or media from most important to least important.

         In general, sending session descriptions consisting of multiple
         languages is discouraged.  Instead, multiple descriptions
         SHOULD be sent describing the session, one in each language.
         However, this is not possible with all transport mechanisms,
         and so multiple sdplang attributes are allowed although NOT
         RECOMMENDED.

         The "sdplang" attribute value must be a single <A =
href=3D"http://tools.ietf.org/html/rfc3066">RFC 3066</A>
         language tag in US-ASCII [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-9">9</A>].  It is not =
dependent on the
         charset attribute.  An "sdplang" attribute SHOULD be specified
         when a session is of sufficient scope to cross geographic
         boundaries where the language of recipients cannot be assumed,
         or where the session is in a different language from the
         locally assumed norm.

      a=3Dlang:&lt;language tag&gt;

         This can be a session-level attribute or a media-level
         attribute.  As a session-level attribute, it specifies the
         default language for the session being described.  As a media-
         level attribute, it specifies the language for that media,



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 29]</SPAN>
<A id=3Dpage-30 href=3D"http://tools.ietf.org/html/rfc4566#page-30" =
name=3Dpage-30><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         overriding any session-level language specified.  Multiple lang
         attributes can be provided either at session or media level if
         the session description or media use multiple languages, in
         which case the order of the attributes indicates the order of
         importance of the various languages in the session or media
         from most important to least important.

         The "lang" attribute value must be a single <A =
href=3D"http://tools.ietf.org/html/rfc3066">RFC 3066</A> language
         tag in US-ASCII [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-9">9</A>].  It is not =
dependent on the charset
         attribute.  A "lang" attribute SHOULD be specified when a
         session is of sufficient scope to cross geographic boundaries
         where the language of recipients cannot be assumed, or where
         the session is in a different language from the locally assumed
         norm.

      a=3Dframerate:&lt;frame rate&gt;

         This gives the maximum video frame rate in frames/sec.  It is
         intended as a recommendation for the encoding of video data.
         Decimal representations of fractional values using the notation
         "&lt;integer&gt;.&lt;fraction&gt;" are allowed.  It is a =
media-level
         attribute, defined only for video media, and it is not
         dependent on charset.

      a=3Dquality:&lt;quality&gt;

         This gives a suggestion for the quality of the encoding as an
         integer value.  The intention of the quality attribute for
         video is to specify a non-default trade-off between frame-rate
         and still-image quality.  For video, the value is in the range
         0 to 10, with the following suggested meaning:

            10 - the best still-image quality the compression scheme can
                 give.
            5  - the default behaviour given no quality suggestion.
            0  - the worst still-image quality the codec designer thinks
                 is still usable.

         It is a media-level attribute, and it is not dependent on
         charset.

      a=3Dfmtp:&lt;format&gt; &lt;format specific parameters&gt;

         This attribute allows parameters that are specific to a
         particular format to be conveyed in a way that SDP does not
         have to understand them.  The format must be one of the formats
         specified for the media.  Format-specific parameters may be any
         set of parameters required to be conveyed by SDP and given



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 30]</SPAN>
<A id=3Dpage-31 href=3D"http://tools.ietf.org/html/rfc4566#page-31" =
name=3Dpage-31><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


         unchanged to the media tool that will use this format.  At most
         one instance of this attribute is allowed for each format.

         It is a media-level attribute, and it is not dependent on
         charset.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-7>7</A>.  Security =
Considerations</SPAN>

   SDP is frequently used with the Session Initiation Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-15">15</A>]
   using the offer/answer model [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-17">17</A>] to agree on =
parameters for unicast
   sessions.  When used in this manner, the security considerations of
   those protocols apply.

   SDP is a session description format that describes multimedia
   sessions.  Entities receiving and acting upon an SDP message SHOULD
   be aware that a session description cannot be trusted unless it has
   been obtained by an authenticated transport protocol from a known and
   trusted source.  Many different transport protocols may be used to
   distribute session description, and the nature of the authentication
   will differ from transport to transport.  For some transports,
   security features are often not deployed.  In case a session
   description has not been obtained in a trusted manner, the endpoint
   SHOULD exercise care because, among other attacks, the media sessions
   received may not be the intended ones, the destination where media is
   sent to may not be the expected one, any of the parameters of the
   session may be incorrect, or the media security may be compromised.
   It is up to the endpoint to make a sensible decision taking into
   account the security risks of the application and the user
   preferences and may decide to ask the user whether or not to accept
   the session.

   One transport that can be used to distribute session descriptions is
   the Session Announcement Protocol (SAP).  SAP provides both
   encryption and authentication mechanisms, but due to the nature of
   session announcements it is likely that there are many occasions
   where the originator of a session announcement cannot be
   authenticated because the originator is previously unknown to the
   receiver of the announcement and because no common public key
   infrastructure is available.

   On receiving a session description over an unauthenticated transport
   mechanism or from an untrusted party, software parsing the session
   should take a few precautions.  Session descriptions contain
   information required to start software on the receiver's system.
   Software that parses a session description MUST NOT be able to start
   other software except that which is specifically configured as
   appropriate software to participate in multimedia sessions.  It is
   normally considered inappropriate for software parsing a session



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 31]</SPAN>
<A id=3Dpage-32 href=3D"http://tools.ietf.org/html/rfc4566#page-32" =
name=3Dpage-32><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   description to start, on a user's system, software that is
   appropriate to participate in multimedia sessions, without the user
   first being informed that such software will be started and giving
   the user's consent.  Thus, a session description arriving by session
   announcement, email, session invitation, or WWW page MUST NOT deliver
   the user into an interactive multimedia session unless the user has
   explicitly pre-authorised such action.  As it is not always simple to
   tell whether or not a session is interactive, applications that are
   unsure should assume sessions are interactive.

   In this specification, there are no attributes that would allow the
   recipient of a session description to be informed to start multimedia
   tools in a mode where they default to transmitting.  Under some
   circumstances it might be appropriate to define such attributes.  If
   this is done, an application parsing a session description containing
   such attributes SHOULD either ignore them or inform the user that
   joining this session will result in the automatic transmission of
   multimedia data.  The default behaviour for an unknown attribute is
   to ignore it.

   In certain environments, it has become common for intermediary
   systems to intercept and analyse session descriptions contained
   within other signalling protocols.  This is done for a range of
   purposes, including but not limited to opening holes in firewalls to
   allow media streams to pass, or to mark, prioritize, or block traffic
   selectively.  In some cases, such intermediary systems may modify the
   session description, for example, to have the contents of the session
   description match NAT bindings dynamically created.  These behaviours
   are NOT RECOMMENDED unless the session description is conveyed in
   such a manner that allows the intermediary system to conduct proper
   checks to establish the authenticity of the session description, and
   the authority of its source to establish such communication sessions.
   SDP by itself does not include sufficient information to enable these
   checks: they depend on the encapsulating protocol (e.g., SIP or
   RTSP).

   Use of the "k=3D" field poses a significant security risk, since it
   conveys session encryption keys in the clear.  SDP MUST NOT be used
   to convey key material, unless it can be guaranteed that the channel
   over which the SDP is delivered is both private and authenticated.
   Moreover, the "k=3D" line provides no way to indicate or negotiate
   cryptographic key algorithms.  As it provides for only a single
   symmetric key, rather than separate keys for confidentiality and
   integrity, its utility is severely limited.  The use of the "k=3D" =
line
   is NOT RECOMMENDED, as discussed in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-5.12">Section =
5.12</A>.






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 32]</SPAN>
<A id=3Dpage-33 href=3D"http://tools.ietf.org/html/rfc4566#page-33" =
name=3Dpage-33><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-8>8</A>.  IANA =
Considerations</SPAN>

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-8.1>8.1</A>.  The =
"application/sdp" Media Type</SPAN>

   One media type registration from <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> is to be =
updated, as
   defined below.

      To: ietf-types@iana.org
      Subject: Registration of media type "application/sdp"

      Type name: application

      Subtype name: sdp

      Required parameters: None.

      Optional parameters: None.

      Encoding considerations:
         SDP files are primarily UTF-8 format text.  The "a=3Dcharset:"
         attribute may be used to signal the presence of other
         character sets in certain parts of an SDP file (see
         <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section&nbsp;6 of =
RFC 4566</A>).  Arbitrary binary content cannot
         be directly represented in SDP.

      Security considerations:
         See <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-7">Section&nbsp;7 of =
RFC 4566</A>

      Interoperability considerations:
         See <A href=3D"http://tools.ietf.org/html/rfc4566">RFC 4566</A>

      Published specification:
         See <A href=3D"http://tools.ietf.org/html/rfc4566">RFC 4566</A>

      Applications which use this media type:
         Voice over IP, video teleconferencing, streaming media, instant
         messaging, among others.  See also <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-3">Section&nbsp;3 of =
RFC 4566</A>.

      Additional information:

      Magic number(s):   None.
      File extension(s): The extension ".sdp" is commonly used.
      Macintosh File Type Code(s): "sdp "

      Person &amp; email address to contact for further information:
         Mark Handley  &lt;M.Handley@cs.ucl.ac.uk&gt;
         Colin Perkins &lt;csp@csperkins.org&gt;
         IETF MMUSIC working group &lt;mmusic@ietf.org&gt;



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 33]</SPAN>
<A id=3Dpage-34 href=3D"http://tools.ietf.org/html/rfc4566#page-34" =
name=3Dpage-34><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      Intended usage: COMMON

      Author/Change controller:
         Authors of <A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>
         IETF MMUSIC working group delegated from the IESG

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-8.2>8.2</A>.  =
Registration of Parameters</SPAN>

   There are seven field names that may be registered with IANA.  Using
   the terminology in the SDP specification Backus-Naur Form (BNF), they
   are "media", "proto", "fmt", "att-field", "bwtype", "nettype", and
   "addrtype".

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.1>8.2.1</A>.  =
Media Types ("media")</SPAN>

   The set of media types is intended to be small and SHOULD NOT be
   extended except under rare circumstances.  The same rules should
   apply for media names as for top-level media content types, and where
   possible the same name should be registered for SDP as for MIME.  For
   media other than existing top-level media content types, a Standards
   Track RFC MUST be produced for a new top-level content type to be
   registered, and the registration MUST provide good justification why
   no existing media name is appropriate (the "Standards Action" policy
   of <A href=3D"http://tools.ietf.org/html/rfc2434">RFC 2434</A> [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-8">8</A>].

   This memo registers the media types "audio", "video", "text",
   "application", and "message".

   Note: The media types "control" and "data" were listed as valid in
   the previous version of this specification [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-6">6</A>]; however, their
   semantics were never fully specified and they are not widely used.
   These media types have been removed in this specification, although
   they still remain valid media type capabilities for a SIP user agent
   as defined in <A href=3D"http://tools.ietf.org/html/rfc3840">RFC =
3840</A> [<A href=3D"http://tools.ietf.org/html/rfc4566#ref-24">24</A>]. =
 If these media types are considered
   useful in the future, a Standards Track RFC MUST be produced to
   document their use.  Until that is done, applications SHOULD NOT use
   these types and SHOULD NOT declare support for them in SIP
   capabilities declarations (even though they exist in the registry
   created by <A href=3D"http://tools.ietf.org/html/rfc3840">RFC =
3840</A>).

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.2>8.2.2</A>.  =
Transport Protocols ("proto")</SPAN>

   The "proto" field describes the transport protocol used.  This SHOULD
   reference a standards-track protocol RFC.  This memo registers three
   values: "RTP/AVP" is a reference to RTP [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-19">19</A>] used under =
the RTP
   Profile for Audio and Video Conferences with Minimal Control [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-20">20</A>]





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 34]</SPAN>
<A id=3Dpage-35 href=3D"http://tools.ietf.org/html/rfc4566#page-35" =
name=3Dpage-35><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   running over UDP/IP, "RTP/SAVP" is a reference to the Secure Real-
   time Transport Protocol [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-23">23</A>], and "udp" =
indicates an unspecified
   protocol over UDP.

   If other RTP profiles are defined in the future, their "proto" name
   SHOULD be specified in the same manner.  For example, an RTP profile
   whose short name is "XYZ" would be denoted by a "proto" field of
   "RTP/XYZ".

   New transport protocols SHOULD be registered with IANA.
   Registrations MUST reference an RFC describing the protocol.  Such an
   RFC MAY be Experimental or Informational, although it is preferable
   that it be Standards Track.  Registrations MUST also define the rules
   by which their "fmt" namespace is managed (see below).

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.3>8.2.3</A>.  =
Media Formats ("fmt")</SPAN>

   Each transport protocol, defined by the "proto" field, has an
   associated "fmt" namespace that describes the media formats that may
   be conveyed by that protocol.  Formats cover all the possible
   encodings that might want to be transported in a multimedia session.

   RTP payload formats under the "RTP/AVP" and "RTP/SAVP" profiles MUST
   use the payload type number as their "fmt" value.  If the payload
   type number is dynamically assigned by this session description, an
   additional "rtpmap" attribute MUST be included to specify the format
   name and parameters as defined by the media type registration for the
   payload format.  It is RECOMMENDED that other RTP profiles that are
   registered (in combination with RTP) as SDP transport protocols
   specify the same rules for the "fmt" namespace.

   For the "udp" protocol, new formats SHOULD be registered.  Use of an
   existing media subtype for the format is encouraged.  If no media
   subtype exists, it is RECOMMENDED that a suitable one be registered
   through the IETF process [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-31">31</A>] by production =
of, or reference to, a
   standards-track RFC that defines the transport protocol for the
   format.

   For other protocols, formats MAY be registered according to the rules
   of the associated "proto" specification.

   Registrations of new formats MUST specify which transport protocols
   they apply to.








<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 35]</SPAN>
<A id=3Dpage-36 href=3D"http://tools.ietf.org/html/rfc4566#page-36" =
name=3Dpage-36><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.4>8.2.4</A>.  =
Attribute Names ("att-field")</SPAN>

   Attribute field names ("att-field") MUST be registered with IANA and
   documented, because of noticeable issues due to conflicting
   attributes under the same name.  Unknown attributes in SDP are simply
   ignored, but conflicting ones that fragment the protocol are a
   serious problem.

   New attribute registrations are accepted according to the
   "Specification Required" policy of <A =
href=3D"http://tools.ietf.org/html/rfc2434">RFC 2434</A>, provided that =
the
   specification includes the following information:

   o  contact name, email address, and telephone number

   o  attribute name (as it will appear in SDP)

   o  long-form attribute name in English

   o  type of attribute (session level, media level, or both)

   o  whether the attribute value is subject to the charset attribute

   o  a one-paragraph explanation of the purpose of the attribute

   o  a specification of appropriate attribute values for this attribute

   The above is the minimum that IANA will accept.  Attributes that are
   expected to see widespread use and interoperability SHOULD be
   documented with a standards-track RFC that specifies the attribute
   more precisely.

   Submitters of registrations should ensure that the specification is
   in the spirit of SDP attributes, most notably that the attribute is
   platform independent in the sense that it makes no implicit
   assumptions about operating systems and does not name specific pieces
   of software in a manner that might inhibit interoperability.

   IANA has registered the following initial set of attribute names
   ("att-field" values), with definitions as in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-6">Section 6</A> of =
this memo
   (these definitions update those in <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A>):











<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 36]</SPAN>
<A id=3Dpage-37 href=3D"http://tools.ietf.org/html/rfc4566#page-37" =
name=3Dpage-37><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


      Name      | Session or Media level? | Dependent on charset?
      ----------+-------------------------+----------------------
      cat       | Session                 | No
      keywds    | Session                 | Yes
      tool      | Session                 | No
      ptime     | Media                   | No
      maxptime  | Media                   | No
      rtpmap    | Media                   | No
      recvonly  | Either                  | No
      sendrecv  | Either                  | No
      sendonly  | Either                  | No
      inactive  | Either                  | No
      orient    | Media                   | No
      type      | Session                 | No
      charset   | Session                 | No
      sdplang   | Either                  | No
      lang      | Either                  | No
      framerate | Media                   | No
      quality   | Media                   | No
      fmtp      | Media                   | No

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.5>8.2.5</A>.  =
Bandwidth Specifiers ("bwtype")</SPAN>

   A proliferation of bandwidth specifiers is strongly discouraged.

   New bandwidth specifiers ("bwtype" fields) MUST be registered with
   IANA.  The submission MUST reference a standards-track RFC specifying
   the semantics of the bandwidth specifier precisely, and indicating
   when it should be used, and why the existing registered bandwidth
   specifiers do not suffice.

   IANA has registered the bandwidth specifiers "CT" and "AS" with
   definitions as in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-5.8">Section 5.8</A> =
of this memo (these definitions update
   those in <A href=3D"http://tools.ietf.org/html/rfc2327">RFC =
2327</A>).

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.6>8.2.6</A>.  =
Network Types ("nettype")</SPAN>

   New network types (the "nettype" field) may be registered with IANA
   if SDP needs to be used in the context of non-Internet environments.
   Although these are not normally the preserve of IANA, there may be
   circumstances when an Internet application needs to interoperate with
   a non-Internet application, such as when gatewaying an Internet
   telephone call into the Public Switched Telephone Network (PSTN).
   The number of network types should be small and should be rarely
   extended.  A new network type cannot be registered without
   registering at least one address type to be used with that network





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 37]</SPAN>
<A id=3Dpage-38 href=3D"http://tools.ietf.org/html/rfc4566#page-38" =
name=3Dpage-38><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   type.  A new network type registration MUST reference an RFC that
   gives details of the network type and address type and specifies how
   and when they would be used.

   IANA has registered the network type "IN" to represent the Internet,
   with definition as in Sections 5.2 and 5.7 of this memo (these
   definitions update those in <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A>).

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.7>8.2.7</A>.  =
Address Types ("addrtype")</SPAN>

   New address types ("addrtype") may be registered with IANA.  An
   address type is only meaningful in the context of a network type, and
   any registration of an address type MUST specify a registered network
   type or be submitted along with a network type registration.  A new
   address type registration MUST reference an RFC giving details of the
   syntax of the address type.  Address types are not expected to be
   registered frequently.

   IANA has registered the address types "IP4" and "IP6" with
   definitions as in Sections 5.2 and 5.7 of this memo (these
   definitions update those in <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A>).

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-8.2.8>8.2.8</A>.  =
Registration Procedure</SPAN>

   In the RFC documentation that registers SDP "media", "proto", "fmt",
   "bwtype", "nettype", and "addrtype" fields, the authors MUST include
   the following information for IANA to place in the appropriate
   registry:

   o  contact name, email address, and telephone number

   o  name being registered (as it will appear in SDP)

   o  long-form name in English

   o  type of name ("media", "proto", "fmt", "bwtype", "nettype", or
      "addrtype")

   o  a one-paragraph explanation of the purpose of the registered name

   o  a reference to the specification for the registered name (this
      will typically be an RFC number)

   IANA may refer any registration to the IESG for review, and may
   request revisions to be made before a registration will be made.






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 38]</SPAN>
<A id=3Dpage-39 href=3D"http://tools.ietf.org/html/rfc4566#page-39" =
name=3Dpage-39><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-8.3>8.3</A>.  =
Encryption Key Access Methods</SPAN>

   The IANA previously maintained a table of SDP encryption key access
   method ("enckey") names.  This table is obsolete, since the "k=3D" =
line
   is not extensible.  New registrations MUST NOT be accepted.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-9>9</A>.  SDP =
Grammar</SPAN>

   This section provides an Augmented BNF grammar for SDP.  ABNF is
   defined in [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-4">4</A>].

   ; SDP Syntax
   session-description =3D proto-version
                         origin-field
                         session-name-field
                         information-field
                         uri-field
                         email-fields
                         phone-fields
                         connection-field
                         bandwidth-fields
                         time-fields
                         key-field
                         attribute-fields
                         media-descriptions

   proto-version =3D       %x76 "=3D" 1*DIGIT CRLF
                         ;this memo describes version 0

   origin-field =3D        %x6f "=3D" username SP sess-id SP =
sess-version SP
                         nettype SP addrtype SP unicast-address CRLF

   session-name-field =3D  %x73 "=3D" text CRLF

   information-field =3D   [%x69 "=3D" text CRLF]

   uri-field =3D           [%x75 "=3D" uri CRLF]

   email-fields =3D        *(%x65 "=3D" email-address CRLF)

   phone-fields =3D        *(%x70 "=3D" phone-number CRLF)

   connection-field =3D    [%x63 "=3D" nettype SP addrtype SP
                         connection-address CRLF]
                         ;a connection field must be present
                         ;in every media description or at the
                         ;session-level




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 39]</SPAN>
<A id=3Dpage-40 href=3D"http://tools.ietf.org/html/rfc4566#page-40" =
name=3Dpage-40><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   bandwidth-fields =3D    *(%x62 "=3D" bwtype ":" bandwidth CRLF)

   time-fields =3D         1*( %x74 "=3D" start-time SP stop-time
                         *(CRLF repeat-fields) CRLF)
                         [zone-adjustments CRLF]

   repeat-fields =3D       %x72 "=3D" repeat-interval SP typed-time
                         1*(SP typed-time)

   zone-adjustments =3D    %x7a "=3D" time SP ["-"] typed-time
                         *(SP time SP ["-"] typed-time)

   key-field =3D           [%x6b "=3D" key-type CRLF]

   attribute-fields =3D    *(%x61 "=3D" attribute CRLF)

   media-descriptions =3D  *( media-field
                         information-field
                         *connection-field
                         bandwidth-fields
                         key-field
                         attribute-fields )

   media-field =3D         %x6d "=3D" media SP port ["/" integer]
                         SP proto 1*(SP fmt) CRLF

   ; sub-rules of 'o=3D'
   username =3D            non-ws-string
                         ;pretty wide definition, but doesn't
                         ;include space

   sess-id =3D             1*DIGIT
                         ;should be unique for this username/host

   sess-version =3D        1*DIGIT

   nettype =3D             token
                         ;typically "IN"

   addrtype =3D            token
                         ;typically "IP4" or "IP6"

   ; sub-rules of 'u=3D'
   uri =3D                 URI-reference
                         ; see <A =
href=3D"http://tools.ietf.org/html/rfc3986">RFC 3986</A>






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 40]</SPAN>
<A id=3Dpage-41 href=3D"http://tools.ietf.org/html/rfc4566#page-41" =
name=3Dpage-41><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   ; sub-rules of 'e=3D', see <A =
href=3D"http://tools.ietf.org/html/rfc2822">RFC 2822</A> for definitions
   email-address        =3D address-and-comment / dispname-and-address
                          / addr-spec
   address-and-comment  =3D addr-spec 1*SP "(" 1*email-safe ")"
   dispname-and-address =3D 1*email-safe 1*SP "&lt;" addr-spec "&gt;"

   ; sub-rules of 'p=3D'
   phone-number =3D        phone *SP "(" 1*email-safe ")" /
                         1*email-safe "&lt;" phone "&gt;" /
                         phone

   phone =3D               ["+"] DIGIT 1*(SP / "-" / DIGIT)

   ; sub-rules of 'c=3D'
   connection-address =3D  multicast-address / unicast-address

   ; sub-rules of 'b=3D'
   bwtype =3D              token

   bandwidth =3D           1*DIGIT

   ; sub-rules of 't=3D'
   start-time =3D          time / "0"

   stop-time =3D           time / "0"

   time =3D                POS-DIGIT 9*DIGIT
                         ; Decimal representation of NTP time in
                         ; seconds since 1900.  The representation
                         ; of NTP time is an unbounded length field
                         ; containing at least 10 digits.  Unlike the
                         ; 64-bit representation used elsewhere, time
                         ; in SDP does not wrap in the year 2036.

   ; sub-rules of 'r=3D' and 'z=3D'
   repeat-interval =3D     POS-DIGIT *DIGIT [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-fixed-len-time-unit">fixed=
-len-time-unit</A>]

   typed-time =3D          1*DIGIT [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-fixed-len-time-unit">fixed=
-len-time-unit</A>]

   fixed-len-time-unit =3D %x64 / %x68 / %x6d / %x73

   ; sub-rules of 'k=3D'
   key-type =3D            %x70 %x72 %x6f %x6d %x70 %x74 /     ; =
"prompt"
                         %x63 %x6c %x65 %x61 %x72 ":" text / ; "clear:"
                         %x62 %x61 %x73 %x65 "64:" base64 /  ; "base64:"
                         %x75 %x72 %x69 ":" uri              ; "uri:"

   base64      =3D         *base64-unit [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-base64-pad">base64-pad</A>=
]



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 41]</SPAN>
<A id=3Dpage-42 href=3D"http://tools.ietf.org/html/rfc4566#page-42" =
name=3Dpage-42><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   base64-unit =3D         4base64-char
   base64-pad  =3D         2base64-char "=3D=3D" / 3base64-char "=3D"
   base64-char =3D         ALPHA / DIGIT / "+" / "/"

   ; sub-rules of 'a=3D'
   attribute =3D           (att-field ":" att-value) / att-field

   att-field =3D           token

   att-value =3D           byte-string

   ; sub-rules of 'm=3D'
   media =3D               token
                         ;typically "audio", "video", "text", or
                         ;"application"

   fmt =3D                 token
                         ;typically an RTP payload type for audio
                         ;and video media

   proto  =3D              token *("/" token)
                         ;typically "RTP/AVP" or "udp"

   port =3D                1*DIGIT

   ; generic sub-rules: addressing
   unicast-address =3D     IP4-address / IP6-address / FQDN / extn-addr

   multicast-address =3D   IP4-multicast / IP6-multicast / FQDN
                         / extn-addr

   IP4-multicast =3D       m1 3( "." decimal-uchar )
                         "/" ttl [ "/" integer ]
                         ; IPv4 multicast addresses may be in the
                         ; range 224.0.0.0 to 239.255.255.255

   m1 =3D                  ("22" ("4"/"5"/"6"/"7"/"8"/"9")) /
                         ("23" DIGIT )

   IP6-multicast =3D       hexpart [ "/" integer ]
                         ; IPv6 address starting with FF

   ttl =3D                 (POS-DIGIT *2DIGIT) / "0"

   FQDN =3D                4*(alpha-numeric / "-" / ".")
                         ; fully qualified domain name as specified
                         ; in <A =
href=3D"http://tools.ietf.org/html/rfc1035">RFC 1035</A> (and updates)




<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 42]</SPAN>
<A id=3Dpage-43 href=3D"http://tools.ietf.org/html/rfc4566#page-43" =
name=3Dpage-43><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   IP4-address =3D         b1 3("." decimal-uchar)

   b1 =3D                  decimal-uchar
                         ; less than "224"

   ; The following is consistent with <A =
href=3D"http://tools.ietf.org/html/rfc2373">RFC 2373</A> [<A =
href=3D"http://tools.ietf.org/html/rfc4566#ref-30">30</A>], Appendix B.
   IP6-address =3D         hexpart [ ":" IP4-address ]

   hexpart =3D             hexseq / hexseq "::" [ hexseq ] /
                         "::" [ hexseq ]

   hexseq  =3D             hex4 *( ":" hex4)

   hex4    =3D             1*4HEXDIG

   ; Generic for other address families
   extn-addr =3D           non-ws-string

   ; generic sub-rules: datatypes
   text =3D                byte-string
                         ;default is to interpret this as UTF8 text.
                         ;ISO 8859-1 requires "a=3Dcharset:ISO-8859-1"
                         ;session-level attribute to be used

   byte-string =3D         1*(%x01-09/%x0B-0C/%x0E-FF)
                         ;any byte except NUL, CR, or LF

   non-ws-string =3D       1*(VCHAR/%x80-FF)
                         ;string of visible characters

   token-char =3D          %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39
                         / %x41-5A / %x5E-7E

   token =3D               1*(token-char)

   email-safe =3D          %x01-09/%x0B-0C/%x0E-27/%x2A-3B/%x3D/%x3F-FF
                         ;any byte except NUL, CR, LF, or the quoting
                         ;characters ()&lt;&gt;

   integer =3D             POS-DIGIT *DIGIT

   ; generic sub-rules: primitives
   alpha-numeric =3D       ALPHA / DIGIT

   POS-DIGIT =3D           %x31-39 ; 1 - 9






<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 43]</SPAN>
<A id=3Dpage-44 href=3D"http://tools.ietf.org/html/rfc4566#page-44" =
name=3Dpage-44><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   decimal-uchar =3D       DIGIT
                         / POS-DIGIT DIGIT
                         / ("1" 2*(DIGIT))
                         / ("2" ("0"/"1"/"2"/"3"/"4") DIGIT)
                         / ("2" "5" ("0"/"1"/"2"/"3"/"4"/"5"))

   ; external references:
         ; ALPHA, DIGIT, CRLF, SP, VCHAR: from <A =
href=3D"http://tools.ietf.org/html/rfc4234">RFC 4234</A>
         ; URI-reference: from <A =
href=3D"http://tools.ietf.org/html/rfc3986">RFC 3986</A>
         ; addr-spec: from <A =
href=3D"http://tools.ietf.org/html/rfc2822">RFC 2822</A>

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-10>10</A>.  Summary =
of Changes from <A href=3D"http://tools.ietf.org/html/rfc2327">RFC =
2327</A></SPAN>

   The memo has been significantly restructured, incorporating a large
   number of clarifications to the specification in light of use.  With
   the exception of those items noted below, the changes to the memo are
   intended to be backward-compatible clarifications.  However, due to
   inconsistencies and unclear definitions in <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> it is likely =
that
   some implementations interpreted that memo in ways that differ from
   this version of SDP.

   The ABNF grammar in <A =
href=3D"http://tools.ietf.org/html/rfc4566#section-9">Section 9</A> has =
been extensively revised and
   updated, correcting a number of mistakes and incorporating the <A =
href=3D"http://tools.ietf.org/html/rfc3266">RFC</A>
   <A href=3D"http://tools.ietf.org/html/rfc3266">3266</A> IPv6 =
extensions.  Known inconsistencies between the grammar and
   the specification text have been resolved.

   A media type registration for SDP is included.  Requirements for the
   registration of attributes and other parameters with IANA have been
   clarified and tightened (<A =
href=3D"http://tools.ietf.org/html/rfc4566#section-8">Section 8</A>).  =
It is noted that "text" and
   "message" are valid media types for use with SDP, but that "control"
   and "data" are under-specified and deprecated.

   <A href=3D"http://tools.ietf.org/html/rfc2119">RFC 2119</A> terms are =
now used throughout to specify requirements
   levels.  Certain of those requirements, in particular in relation to
   parameter registration, are stricter than those in <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A>.

   The "RTP/SAVP" RTP profile and its "fmt" namespace are registered.

   The attributes "a=3Dinactive" and "a=3Dmaxptime" have been added.

   <A href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> mandated =
that either "e=3D" or "p=3D" was required.  Both are
   now optional, to reflect actual usage.

   The significant limitations of the "k=3D" field are noted, and its =
use
   is deprecated.

   Most uses of the "x-" prefix notation for experimental parameters are
   disallowed and the other uses are deprecated.



<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 44]</SPAN>
<A id=3Dpage-45 href=3D"http://tools.ietf.org/html/rfc4566#page-45" =
name=3Dpage-45><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-11>11</A>.  =
Acknowledgements</SPAN>

   Many people in the IETF Multiparty Multimedia Session Control
   (MMUSIC) working group have made comments and suggestions
   contributing to this document.  In particular, we would like to thank
   Eve Schooler, Steve Casner, Bill Fenner, Allison Mankin, Ross
   Finlayson, Peter Parnes, Joerg Ott, Carsten Bormann, Steve Hanna,
   Jonathan Lennox, Keith Drage, Sean Olson, Bernie Hoeneisen, Jonathan
   Rosenberg, John Elwell, Flemming Andreasen, Jon Peterson, and Spencer
   Dawkins.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-12>12</A>.  =
References</SPAN>

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-12.1>12.1</A>.  =
Normative References</SPAN>

   [<A id=3Dref-1 name=3Dref-1>1</A>]   Mockapetris, P., "Domain names - =
concepts and facilities", STD
         13, <A href=3D"http://tools.ietf.org/html/rfc1034">RFC =
1034</A>, November 1987.

   [<A id=3Dref-2 name=3Dref-2>2</A>]   Mockapetris, P., "Domain names - =
implementation and
         specification", STD 13, <A =
href=3D"http://tools.ietf.org/html/rfc1035">RFC 1035</A>, November 1987.

   [<A id=3Dref-3 name=3Dref-3>3</A>]   Bradner, S., "Key words for use =
in RFCs to Indicate Requirement
         Levels", <A href=3D"http://tools.ietf.org/html/bcp14">BCP =
14</A>, <A href=3D"http://tools.ietf.org/html/rfc2119">RFC 2119</A>, =
March 1997.

   [<A id=3Dref-4 name=3Dref-4>4</A>]   Crocker, D., Ed. and P. Overell, =
"Augmented BNF for Syntax
         Specifications: ABNF", <A =
href=3D"http://tools.ietf.org/html/rfc4234">RFC 4234</A>, October 2005.

   [<A id=3Dref-5 name=3Dref-5>5</A>]   Yergeau, F., "UTF-8, a =
transformation format of ISO 10646", STD
         63, <A href=3D"http://tools.ietf.org/html/rfc3629">RFC =
3629</A>, November 2003.

   [<A id=3Dref-6 name=3Dref-6>6</A>]   Handley, M. and V. Jacobson, =
"SDP: Session Description
         Protocol", <A href=3D"http://tools.ietf.org/html/rfc2327">RFC =
2327</A>, April 1998.

   [<A id=3Dref-7 name=3Dref-7>7</A>]   Berners-Lee, T., Fielding, R., =
and L. Masinter, "Uniform
         Resource Identifier (URI): Generic Syntax", STD 66, <A =
href=3D"http://tools.ietf.org/html/rfc3986">RFC 3986</A>,
         January 2005.

   [<A id=3Dref-8 name=3Dref-8>8</A>]   Narten, T. and H. Alvestrand, =
"Guidelines for Writing an IANA
         Considerations Section in RFCs", <A =
href=3D"http://tools.ietf.org/html/bcp26">BCP 26</A>, <A =
href=3D"http://tools.ietf.org/html/rfc2434">RFC 2434</A>, October
         1998.

   [<A id=3Dref-9 name=3Dref-9>9</A>]   Alvestrand, H., "Tags for the =
Identification of Languages", <A =
href=3D"http://tools.ietf.org/html/bcp47">BCP</A>
         <A href=3D"http://tools.ietf.org/html/bcp47">47</A>, <A =
href=3D"http://tools.ietf.org/html/rfc3066">RFC 3066</A>, January 2001.

   [<A id=3Dref-10 name=3Dref-10>10</A>]  Olson, S., Camarillo, G., and =
A. Roach, "Support for IPv6 in
         Session Description Protocol (SDP)", <A =
href=3D"http://tools.ietf.org/html/rfc3266">RFC 3266</A>, June 2002.





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 45]</SPAN>
<A id=3Dpage-46 href=3D"http://tools.ietf.org/html/rfc4566#page-46" =
name=3Dpage-46><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   [<A id=3Dref-11 name=3Dref-11>11</A>]  Faltstrom, P., Hoffman, P., =
and A. Costello,
         "Internationalizing Domain Names in Applications (IDNA)", <A =
href=3D"http://tools.ietf.org/html/rfc3490">RFC</A>
         <A href=3D"http://tools.ietf.org/html/rfc3490">3490</A>, March =
2003.

   [<A id=3Dref-12 name=3Dref-12>12</A>]  Josefsson, S., "The Base16, =
Base32, and Base64 Data Encodings",
         <A href=3D"http://tools.ietf.org/html/rfc3548">RFC 3548</A>, =
July 2003.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-12.2>12.2</A>.  =
Informative References</SPAN>

   [<A id=3Dref-13 name=3Dref-13>13</A>]  Mills, D., "Network Time =
Protocol (Version 3) Specification,
         Implementation", <A =
href=3D"http://tools.ietf.org/html/rfc1305">RFC 1305</A>, March 1992.

   [<A id=3Dref-14 name=3Dref-14>14</A>]  Handley, M., Perkins, C., and =
E. Whelan, "Session Announcement
         Protocol", <A href=3D"http://tools.ietf.org/html/rfc2974">RFC =
2974</A>, October 2000.

   [<A id=3Dref-15 name=3Dref-15>15</A>]  Rosenberg, J., Schulzrinne, =
H., Camarillo, G., Johnston, A.,
         Peterson, J., Sparks, R., Handley, M., and E. Schooler, "SIP:
         Session Initiation Protocol", <A =
href=3D"http://tools.ietf.org/html/rfc3261">RFC 3261</A>, June 2002.

   [<A id=3Dref-16 name=3Dref-16>16</A>]  Schulzrinne, H., Rao, A., and =
R. Lanphier, "Real Time Streaming
         Protocol (RTSP)", <A =
href=3D"http://tools.ietf.org/html/rfc2326">RFC 2326</A>, April 1998.

   [<A id=3Dref-17 name=3Dref-17>17</A>]  Rosenberg, J. and H. =
Schulzrinne, "An Offer/Answer Model with
         Session Description Protocol (SDP)", <A =
href=3D"http://tools.ietf.org/html/rfc3264">RFC 3264</A>, June 2002.

   [<A id=3Dref-18 name=3Dref-18>18</A>]  Camarillo, G., Eriksson, G., =
Holler, J., and H. Schulzrinne,
         "Grouping of Media Lines in the Session Description Protocol
         (SDP)", <A href=3D"http://tools.ietf.org/html/rfc3388">RFC =
3388</A>, December 2002.

   [<A id=3Dref-19 name=3Dref-19>19</A>]  Schulzrinne, H., Casner, S., =
Frederick, R., and V. Jacobson,
         "RTP: A Transport Protocol for Real-Time Applications", STD 64,
         <A href=3D"http://tools.ietf.org/html/rfc3550">RFC 3550</A>, =
July 2003.

   [<A id=3Dref-20 name=3Dref-20>20</A>]  Schulzrinne, H. and S. Casner, =
"RTP Profile for Audio and Video
         Conferences with Minimal Control", STD 65, <A =
href=3D"http://tools.ietf.org/html/rfc3551">RFC 3551</A>, July 2003.

   [<A id=3Dref-21 name=3Dref-21>21</A>]  Casner, S., "Session =
Description Protocol (SDP) Bandwidth
         Modifiers for RTP Control Protocol (RTCP) Bandwidth", <A =
href=3D"http://tools.ietf.org/html/rfc3556">RFC 3556</A>,
         July 2003.

   [<A id=3Dref-22 name=3Dref-22>22</A>]  Huitema, C., "Real Time =
Control Protocol (RTCP) attribute in
         Session Description Protocol (SDP)", <A =
href=3D"http://tools.ietf.org/html/rfc3605">RFC 3605</A>, October 2003.

   [<A id=3Dref-23 name=3Dref-23>23</A>]  Baugher, M., McGrew, D., =
Naslund, M., Carrara, E., and K.
         Norrman, "The Secure Real-time Transport Protocol (SRTP)", <A =
href=3D"http://tools.ietf.org/html/rfc3711">RFC</A>
         <A href=3D"http://tools.ietf.org/html/rfc3711">3711</A>, March =
2004.





<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 46]</SPAN>
<A id=3Dpage-47 href=3D"http://tools.ietf.org/html/rfc4566#page-47" =
name=3Dpage-47><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


   [<A id=3Dref-24 name=3Dref-24>24</A>]  Rosenberg, J., Schulzrinne, =
H., and P. Kyzivat, "Indicating
         User Agent Capabilities in the Session Initiation Protocol
         (SIP)", <A href=3D"http://tools.ietf.org/html/rfc3840">RFC =
3840</A>, August 2004.

   [<A id=3Dref-25 name=3Dref-25>25</A>]  Westerlund, M., "A Transport =
Independent Bandwidth Modifier for
         the Session Description Protocol (SDP)", <A =
href=3D"http://tools.ietf.org/html/rfc3890">RFC 3890</A>, September
         2004.

   [<A id=3Dref-26 name=3Dref-26>26</A>]  International =
Telecommunication Union, "H.323 extended for
         loosely coupled conferences", ITU Recommendation H.332,
         September 1998.

   [<A id=3Dref-27 name=3Dref-27>27</A>]  Arkko, J., Carrara, E., =
Lindholm, F., Naslund, M., and K.
         Norrman, "Key Management Extensions for Session Description
         Protocol (SDP) and Real Time Streaming Protocol (RTSP)", <A =
href=3D"http://tools.ietf.org/html/rfc4567">RFC</A>
         <A href=3D"http://tools.ietf.org/html/rfc4567">4567</A>, July =
2006.

   [<A id=3Dref-28 name=3Dref-28>28</A>]  Andreasen, F., Baugher, M., =
and D. Wing, "Session Description
         Protocol (SDP) Security Descriptions for Media Streams", <A =
href=3D"http://tools.ietf.org/html/rfc4568">RFC</A>
         <A href=3D"http://tools.ietf.org/html/rfc4568">4568</A>, July =
2006.

   [<A id=3Dref-29 name=3Dref-29>29</A>]  Resnick, P., "Internet Message =
Format", <A href=3D"http://tools.ietf.org/html/rfc2822">RFC 2822</A>, =
April 2001.

   [<A id=3Dref-30 name=3Dref-30>30</A>]  Hinden, R. and S. Deering, "IP =
Version 6 Addressing
         Architecture", <A =
href=3D"http://tools.ietf.org/html/rfc2373">RFC 2373</A>, July 1998.

   [<A id=3Dref-31 name=3Dref-31>31</A>]  Freed, N. and J. Klensin, =
"Media Type Specifications and
         Registration Procedures", <A =
href=3D"http://tools.ietf.org/html/bcp13">BCP 13</A>, <A =
href=3D"http://tools.ietf.org/html/rfc4288">RFC 4288</A>, December 2005.























<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 47]</SPAN>
<A id=3Dpage-48 href=3D"http://tools.ietf.org/html/rfc4566#page-48" =
name=3Dpage-48><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


Authors' Addresses

   Mark Handley
   University College London
   Department of Computer Science
   Gower Street
   London  WC1E 6BT
   UK

   EMail: M.Handley@cs.ucl.ac.uk


   Van Jacobson
   Packet Design
   2465 Latham Street
   Mountain View, CA  94040
   USA

   EMail: van@packetdesign.com


   Colin Perkins
   University of Glasgow
   Department of Computing Science
   17 Lilybank Gardens
   Glasgow  G12 8QQ
   UK

   EMail: csp@csperkins.org






















<SPAN class=3Dgrey>Handley, et al.             Standards Track           =
         [Page 48]</SPAN>
<A id=3Dpage-49 href=3D"http://tools.ietf.org/html/rfc4566#page-49" =
name=3Dpage-49><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc4566">RFC =
4566</A>                          SDP                          July =
2006</SPAN>


Full Copyright Statement

   Copyright (C) The Internet Society (2006).

   This document is subject to the rights, licenses and restrictions
   contained in <A href=3D"http://tools.ietf.org/html/bcp78">BCP 78</A>, =
and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in <A href=3D"http://tools.ietf.org/html/bcp78">BCP 78</A> and =
<A href=3D"http://tools.ietf.org/html/bcp79">BCP 79</A>.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   <A href=3D"http://www.ietf.org/ipr">http://www.ietf.org/ipr</A>.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.

Acknowledgement

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).







Handley, et al.             Standards Track                    [Page 49]
<SPAN class=3Dbreak></SPAN>

</PRE><BR><SMALL><SMALL>Html markup produced by rfcmarkup 1.31, =
available from=20
<A=20
href=3D"http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/too=
ls/rfcmarkup/</A>=20
</SMALL></SMALL></BODY></HTML>

------=_NextPart_000_0002_01C6F7DF.C647F4D0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://tools.ietf.org/js/MochiKit.js

/***=0A=
=0A=
    MochiKit.MochiKit 1.3.1 : PACKED VERSION=0A=
=0A=
    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please=0A=
    diff against the source tree, not this file.=0A=
=0A=
    See <http://mochikit.com/> for documentation, downloads, license, =
etc.=0A=
=0A=
    (c) 2005 Bob Ippolito.  All rights Reserved.=0A=
=0A=
***/=0A=
=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Base");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
MochiKit.Base=3D{};=0A=
}=0A=
MochiKit.Base.VERSION=3D"1.3.1";=0A=
MochiKit.Base.NAME=3D"MochiKit.Base";=0A=
MochiKit.Base.update=3Dfunction(_1,_2){=0A=
if(_1=3D=3D=3Dnull){=0A=
_1=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"undefined"&&o!=3D=3Dnull){=0A=
for(var k in o){=0A=
_1[k]=3Do[k];=0A=
}=0A=
}=0A=
}=0A=
return _1;=0A=
};=0A=
MochiKit.Base.update(MochiKit.Base,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},counter:function(n){=0A=
if(arguments.length=3D=3D=3D0){=0A=
n=3D1;=0A=
}=0A=
return function(){=0A=
return n++;=0A=
};=0A=
},clone:function(_7){=0A=
var me=3Darguments.callee;=0A=
if(arguments.length=3D=3D1){=0A=
me.prototype=3D_7;=0A=
return new me();=0A=
}=0A=
},flattenArguments:function(_9){=0A=
var res=3D[];=0A=
var m=3DMochiKit.Base;=0A=
var _12=3Dm.extend(null,arguments);=0A=
while(_12.length){=0A=
var o=3D_12.shift();=0A=
if(o&&typeof (o)=3D=3D"object"&&typeof (o.length)=3D=3D"number"){=0A=
for(var i=3Do.length-1;i>=3D0;i--){=0A=
_12.unshift(o[i]);=0A=
}=0A=
}else{=0A=
res.push(o);=0A=
}=0A=
}=0A=
return res;=0A=
},extend:function(_13,obj,_15){=0A=
if(!_15){=0A=
_15=3D0;=0A=
}=0A=
if(obj){=0A=
var l=3Dobj.length;=0A=
if(typeof (l)!=3D"number"){=0A=
if(typeof (MochiKit.Iter)!=3D"undefined"){=0A=
obj=3DMochiKit.Iter.list(obj);=0A=
l=3Dobj.length;=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(!_13){=0A=
_13=3D[];=0A=
}=0A=
for(var i=3D_15;i<l;i++){=0A=
_13.push(obj[i]);=0A=
}=0A=
}=0A=
return _13;=0A=
},updatetree:function(_17,obj){=0A=
if(_17=3D=3D=3Dnull){=0A=
_17=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"undefined"&&o!=3D=3Dnull){=0A=
for(var k in o){=0A=
var v=3Do[k];=0A=
if(typeof (_17[k])=3D=3D"object"&&typeof (v)=3D=3D"object"){=0A=
arguments.callee(_17[k],v);=0A=
}else{=0A=
_17[k]=3Dv;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _17;=0A=
},setdefault:function(_19,obj){=0A=
if(_19=3D=3D=3Dnull){=0A=
_19=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
for(var k in o){=0A=
if(!(k in _19)){=0A=
_19[k]=3Do[k];=0A=
}=0A=
}=0A=
}=0A=
return _19;=0A=
},keys:function(obj){=0A=
var _20=3D[];=0A=
for(var _21 in obj){=0A=
_20.push(_21);=0A=
}=0A=
return _20;=0A=
},items:function(obj){=0A=
var _22=3D[];=0A=
var e;=0A=
for(var _24 in obj){=0A=
var v;=0A=
try{=0A=
v=3Dobj[_24];=0A=
}=0A=
catch(e){=0A=
continue;=0A=
}=0A=
_22.push([_24,v]);=0A=
}=0A=
return _22;=0A=
},_newNamedError:function(_25,_26,_27){=0A=
_27.prototype=3Dnew MochiKit.Base.NamedError(_25.NAME+"."+_26);=0A=
_25[_26]=3D_27;=0A=
},operator:{truth:function(a){=0A=
return !!a;=0A=
},lognot:function(a){=0A=
return !a;=0A=
},identity:function(a){=0A=
return a;=0A=
},not:function(a){=0A=
return ~a;=0A=
},neg:function(a){=0A=
return -a;=0A=
},add:function(a,b){=0A=
return a+b;=0A=
},sub:function(a,b){=0A=
return a-b;=0A=
},div:function(a,b){=0A=
return a/b;=0A=
},mod:function(a,b){=0A=
return a%b;=0A=
},mul:function(a,b){=0A=
return a*b;=0A=
},and:function(a,b){=0A=
return a&b;=0A=
},or:function(a,b){=0A=
return a|b;=0A=
},xor:function(a,b){=0A=
return a^b;=0A=
},lshift:function(a,b){=0A=
return a<<b;=0A=
},rshift:function(a,b){=0A=
return a>>b;=0A=
},zrshift:function(a,b){=0A=
return a>>>b;=0A=
},eq:function(a,b){=0A=
return a=3D=3Db;=0A=
},ne:function(a,b){=0A=
return a!=3Db;=0A=
},gt:function(a,b){=0A=
return a>b;=0A=
},ge:function(a,b){=0A=
return a>=3Db;=0A=
},lt:function(a,b){=0A=
return a<b;=0A=
},le:function(a,b){=0A=
return a<=3Db;=0A=
},ceq:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D=3D0;=0A=
},cne:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D=3D0;=0A=
},cgt:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D1;=0A=
},cge:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D-1;=0A=
},clt:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D-1;=0A=
},cle:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D1;=0A=
},logand:function(a,b){=0A=
return a&&b;=0A=
},logor:function(a,b){=0A=
return a||b;=0A=
},contains:function(a,b){=0A=
return b in a;=0A=
}},forwardCall:function(_30){=0A=
return function(){=0A=
return this[_30].apply(this,arguments);=0A=
};=0A=
},itemgetter:function(_31){=0A=
return function(arg){=0A=
return arg[_31];=0A=
};=0A=
},typeMatcher:function(){=0A=
var _33=3D{};=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var typ=3Darguments[i];=0A=
_33[typ]=3Dtyp;=0A=
}=0A=
return function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(typeof (arguments[i]) in _33)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
};=0A=
},isNull:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(arguments[i]!=3D=3Dnull){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isUndefinedOrNull:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(!(typeof (o)=3D=3D"undefined"||o=3D=3D=3Dnull)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isEmpty:function(obj){=0A=
return !MochiKit.Base.isNotEmpty.apply(this,arguments);=0A=
},isNotEmpty:function(obj){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(!(o&&o.length)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isArrayLike:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
var typ=3Dtypeof (o);=0A=
if((typ!=3D"object"&&!(typ=3D=3D"function"&&typeof =
(o.item)=3D=3D"function"))||o=3D=3D=3Dnull||typeof =
(o.length)!=3D"number"){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isDateLike:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"object"||o=3D=3D=3Dnull||typeof =
(o.getTime)!=3D"function"){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},xmap:function(fn){=0A=
if(fn=3D=3D=3Dnull){=0A=
return MochiKit.Base.extend(null,arguments,1);=0A=
}=0A=
var _36=3D[];=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
_36.push(fn(arguments[i]));=0A=
}=0A=
return _36;=0A=
},map:function(fn,lst){=0A=
var m=3DMochiKit.Base;=0A=
var itr=3DMochiKit.Iter;=0A=
var _39=3Dm.isArrayLike;=0A=
if(arguments.length<=3D2){=0A=
if(!_39(lst)){=0A=
if(itr){=0A=
lst=3Ditr.list(lst);=0A=
if(fn=3D=3D=3Dnull){=0A=
return lst;=0A=
}=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(fn=3D=3D=3Dnull){=0A=
return m.extend(null,lst);=0A=
}=0A=
var _40=3D[];=0A=
for(var i=3D0;i<lst.length;i++){=0A=
_40.push(fn(lst[i]));=0A=
}=0A=
return _40;=0A=
}else{=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3DArray;=0A=
}=0A=
var _41=3Dnull;=0A=
for(i=3D1;i<arguments.length;i++){=0A=
if(!_39(arguments[i])){=0A=
if(itr){=0A=
return itr.list(itr.imap.apply(null,arguments));=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
var l=3Darguments[i].length;=0A=
if(_41=3D=3D=3Dnull||_41>l){=0A=
_41=3Dl;=0A=
}=0A=
}=0A=
_40=3D[];=0A=
for(i=3D0;i<_41;i++){=0A=
var _42=3D[];=0A=
for(var j=3D1;j<arguments.length;j++){=0A=
_42.push(arguments[j][i]);=0A=
}=0A=
_40.push(fn.apply(this,_42));=0A=
}=0A=
return _40;=0A=
}=0A=
},xfilter:function(fn){=0A=
var _44=3D[];=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3DMochiKit.Base.operator.truth;=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(fn(o)){=0A=
_44.push(o);=0A=
}=0A=
}=0A=
return _44;=0A=
},filter:function(fn,lst,_45){=0A=
var _46=3D[];=0A=
var m=3DMochiKit.Base;=0A=
if(!m.isArrayLike(lst)){=0A=
if(MochiKit.Iter){=0A=
lst=3DMochiKit.Iter.list(lst);=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3Dm.operator.truth;=0A=
}=0A=
if(typeof (Array.prototype.filter)=3D=3D"function"){=0A=
return Array.prototype.filter.call(lst,fn,_45);=0A=
}else{=0A=
if(typeof (_45)=3D=3D"undefined"||_45=3D=3D=3Dnull){=0A=
for(var i=3D0;i<lst.length;i++){=0A=
var o=3Dlst[i];=0A=
if(fn(o)){=0A=
_46.push(o);=0A=
}=0A=
}=0A=
}else{=0A=
for(i=3D0;i<lst.length;i++){=0A=
o=3Dlst[i];=0A=
if(fn.call(_45,o)){=0A=
_46.push(o);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _46;=0A=
},_wrapDumbFunction:function(_47){=0A=
return function(){=0A=
switch(arguments.length){=0A=
case 0:=0A=
return _47();=0A=
case 1:=0A=
return _47(arguments[0]);=0A=
case 2:=0A=
return _47(arguments[0],arguments[1]);=0A=
case 3:=0A=
return _47(arguments[0],arguments[1],arguments[2]);=0A=
}=0A=
var _48=3D[];=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
_48.push("arguments["+i+"]");=0A=
}=0A=
return eval("(func("+_48.join(",")+"))");=0A=
};=0A=
},method:function(_49,_50){=0A=
var m=3DMochiKit.Base;=0A=
return m.bind.apply(this,m.extend([_50,_49],arguments,2));=0A=
},bind:function(_51,_52){=0A=
if(typeof (_51)=3D=3D"string"){=0A=
_51=3D_52[_51];=0A=
}=0A=
var _53=3D_51.im_func;=0A=
var _54=3D_51.im_preargs;=0A=
var _55=3D_51.im_self;=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_51)=3D=3D"function"&&typeof (_51.apply)=3D=3D"undefined"){=0A=
_51=3Dm._wrapDumbFunction(_51);=0A=
}=0A=
if(typeof (_53)!=3D"function"){=0A=
_53=3D_51;=0A=
}=0A=
if(typeof (_52)!=3D"undefined"){=0A=
_55=3D_52;=0A=
}=0A=
if(typeof (_54)=3D=3D"undefined"){=0A=
_54=3D[];=0A=
}else{=0A=
_54=3D_54.slice();=0A=
}=0A=
m.extend(_54,arguments,2);=0A=
var _56=3Dfunction(){=0A=
var _57=3Darguments;=0A=
var me=3Darguments.callee;=0A=
if(me.im_preargs.length>0){=0A=
_57=3Dm.concat(me.im_preargs,_57);=0A=
}=0A=
var _52=3Dme.im_self;=0A=
if(!_52){=0A=
_52=3Dthis;=0A=
}=0A=
return me.im_func.apply(_52,_57);=0A=
};=0A=
_56.im_self=3D_55;=0A=
_56.im_func=3D_53;=0A=
_56.im_preargs=3D_54;=0A=
return _56;=0A=
},bindMethods:function(_58){=0A=
var _59=3DMochiKit.Base.bind;=0A=
for(var k in _58){=0A=
var _60=3D_58[k];=0A=
if(typeof (_60)=3D=3D"function"){=0A=
_58[k]=3D_59(_60,_58);=0A=
}=0A=
}=0A=
},registerComparator:function(_61,_62,_63,_64){=0A=
MochiKit.Base.comparatorRegistry.register(_61,_62,_63,_64);=0A=
},_primitives:{"boolean":true,"string":true,"number":true},compare:functi=
on(a,b){=0A=
if(a=3D=3Db){=0A=
return 0;=0A=
}=0A=
var _65=3D(typeof (a)=3D=3D"undefined"||a=3D=3D=3Dnull);=0A=
var _66=3D(typeof (b)=3D=3D"undefined"||b=3D=3D=3Dnull);=0A=
if(_65&&_66){=0A=
return 0;=0A=
}else{=0A=
if(_65){=0A=
return -1;=0A=
}else{=0A=
if(_66){=0A=
return 1;=0A=
}=0A=
}=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var _67=3Dm._primitives;=0A=
if(!(typeof (a) in _67&&typeof (b) in _67)){=0A=
try{=0A=
return m.comparatorRegistry.match(a,b);=0A=
}=0A=
catch(e){=0A=
if(e!=3Dm.NotFound){=0A=
throw e;=0A=
}=0A=
}=0A=
}=0A=
if(a<b){=0A=
return -1;=0A=
}else{=0A=
if(a>b){=0A=
return 1;=0A=
}=0A=
}=0A=
var _68=3Dm.repr;=0A=
throw new TypeError(_68(a)+" and "+_68(b)+" can not be compared");=0A=
},compareDateLike:function(a,b){=0A=
return MochiKit.Base.compare(a.getTime(),b.getTime());=0A=
},compareArrayLike:function(a,b){=0A=
var _69=3DMochiKit.Base.compare;=0A=
var _70=3Da.length;=0A=
var _71=3D0;=0A=
if(_70>b.length){=0A=
_71=3D1;=0A=
_70=3Db.length;=0A=
}else{=0A=
if(_70<b.length){=0A=
_71=3D-1;=0A=
}=0A=
}=0A=
for(var i=3D0;i<_70;i++){=0A=
var cmp=3D_69(a[i],b[i]);=0A=
if(cmp){=0A=
return cmp;=0A=
}=0A=
}=0A=
return _71;=0A=
},registerRepr:function(_73,_74,_75,_76){=0A=
MochiKit.Base.reprRegistry.register(_73,_74,_75,_76);=0A=
},repr:function(o){=0A=
if(typeof (o)=3D=3D"undefined"){=0A=
return "undefined";=0A=
}else{=0A=
if(o=3D=3D=3Dnull){=0A=
return "null";=0A=
}=0A=
}=0A=
try{=0A=
if(typeof (o.__repr__)=3D=3D"function"){=0A=
return o.__repr__();=0A=
}else{=0A=
if(typeof (o.repr)=3D=3D"function"&&o.repr!=3Darguments.callee){=0A=
return o.repr();=0A=
}=0A=
}=0A=
return MochiKit.Base.reprRegistry.match(o);=0A=
}=0A=
catch(e){=0A=
if(typeof =
(o.NAME)=3D=3D"string"&&(o.toString=3D=3DFunction.prototype.toString||o.t=
oString=3D=3DObject.prototype.toString)){=0A=
return o.NAME;=0A=
}=0A=
}=0A=
try{=0A=
var _77=3D(o+"");=0A=
}=0A=
catch(e){=0A=
return "["+typeof (o)+"]";=0A=
}=0A=
if(typeof (o)=3D=3D"function"){=0A=
o=3D_77.replace(/^\s+/,"");=0A=
var idx=3Do.indexOf("{");=0A=
if(idx!=3D-1){=0A=
o=3Do.substr(0,idx)+"{...}";=0A=
}=0A=
}=0A=
return _77;=0A=
},reprArrayLike:function(o){=0A=
var m=3DMochiKit.Base;=0A=
return "["+m.map(m.repr,o).join(", ")+"]";=0A=
},reprString:function(o){=0A=
return =
("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/=
[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]=
/g,"\\r");=0A=
},reprNumber:function(o){=0A=
return o+"";=0A=
},registerJSON:function(_79,_80,_81,_82){=0A=
MochiKit.Base.jsonRegistry.register(_79,_80,_81,_82);=0A=
},evalJSON:function(){=0A=
return eval("("+arguments[0]+")");=0A=
},serializeJSON:function(o){=0A=
var _83=3Dtypeof (o);=0A=
if(_83=3D=3D"undefined"){=0A=
return "undefined";=0A=
}else{=0A=
if(_83=3D=3D"number"||_83=3D=3D"boolean"){=0A=
return o+"";=0A=
}else{=0A=
if(o=3D=3D=3Dnull){=0A=
return "null";=0A=
}=0A=
}=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var _84=3Dm.reprString;=0A=
if(_83=3D=3D"string"){=0A=
return _84(o);=0A=
}=0A=
var me=3Darguments.callee;=0A=
var _85;=0A=
if(typeof (o.__json__)=3D=3D"function"){=0A=
_85=3Do.__json__();=0A=
if(o!=3D=3D_85){=0A=
return me(_85);=0A=
}=0A=
}=0A=
if(typeof (o.json)=3D=3D"function"){=0A=
_85=3Do.json();=0A=
if(o!=3D=3D_85){=0A=
return me(_85);=0A=
}=0A=
}=0A=
if(_83!=3D"function"&&typeof (o.length)=3D=3D"number"){=0A=
var res=3D[];=0A=
for(var i=3D0;i<o.length;i++){=0A=
var val=3Dme(o[i]);=0A=
if(typeof (val)!=3D"string"){=0A=
val=3D"undefined";=0A=
}=0A=
res.push(val);=0A=
}=0A=
return "["+res.join(", ")+"]";=0A=
}=0A=
try{=0A=
_85=3Dm.jsonRegistry.match(o);=0A=
return me(_85);=0A=
}=0A=
catch(e){=0A=
if(e!=3Dm.NotFound){=0A=
throw e;=0A=
}=0A=
}=0A=
if(_83=3D=3D"function"){=0A=
return null;=0A=
}=0A=
res=3D[];=0A=
for(var k in o){=0A=
var _87;=0A=
if(typeof (k)=3D=3D"number"){=0A=
_87=3D"\""+k+"\"";=0A=
}else{=0A=
if(typeof (k)=3D=3D"string"){=0A=
_87=3D_84(k);=0A=
}else{=0A=
continue;=0A=
}=0A=
}=0A=
val=3Dme(o[k]);=0A=
if(typeof (val)!=3D"string"){=0A=
continue;=0A=
}=0A=
res.push(_87+":"+val);=0A=
}=0A=
return "{"+res.join(", ")+"}";=0A=
},objEqual:function(a,b){=0A=
return (MochiKit.Base.compare(a,b)=3D=3D=3D0);=0A=
},arrayEqual:function(_88,arr){=0A=
if(_88.length!=3Darr.length){=0A=
return false;=0A=
}=0A=
return (MochiKit.Base.compare(_88,arr)=3D=3D=3D0);=0A=
},concat:function(){=0A=
var _90=3D[];=0A=
var _91=3DMochiKit.Base.extend;=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
_91(_90,arguments[i]);=0A=
}=0A=
return _90;=0A=
},keyComparator:function(key){=0A=
var m=3DMochiKit.Base;=0A=
var _93=3Dm.compare;=0A=
if(arguments.length=3D=3D1){=0A=
return function(a,b){=0A=
return _93(a[key],b[key]);=0A=
};=0A=
}=0A=
var _94=3Dm.extend(null,arguments);=0A=
return function(a,b){=0A=
var _95=3D0;=0A=
for(var i=3D0;(_95=3D=3D=3D0)&&(i<_94.length);i++){=0A=
var key=3D_94[i];=0A=
_95=3D_93(a[key],b[key]);=0A=
}=0A=
return _95;=0A=
};=0A=
},reverseKeyComparator:function(key){=0A=
var _96=3DMochiKit.Base.keyComparator.apply(this,arguments);=0A=
return function(a,b){=0A=
return _96(b,a);=0A=
};=0A=
},partial:function(_97){=0A=
var m=3DMochiKit.Base;=0A=
return m.bind.apply(this,m.extend([_97,undefined],arguments,1));=0A=
},listMinMax:function(_98,lst){=0A=
if(lst.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var cur=3Dlst[0];=0A=
var _100=3DMochiKit.Base.compare;=0A=
for(var i=3D1;i<lst.length;i++){=0A=
var o=3Dlst[i];=0A=
if(_100(o,cur)=3D=3D_98){=0A=
cur=3Do;=0A=
}=0A=
}=0A=
return cur;=0A=
},objMax:function(){=0A=
return MochiKit.Base.listMinMax(1,arguments);=0A=
},objMin:function(){=0A=
return MochiKit.Base.listMinMax(-1,arguments);=0A=
},findIdentical:function(lst,_101,_102,end){=0A=
if(typeof (end)=3D=3D"undefined"||end=3D=3D=3Dnull){=0A=
end=3Dlst.length;=0A=
}=0A=
for(var i=3D(_102||0);i<end;i++){=0A=
if(lst[i]=3D=3D=3D_101){=0A=
return i;=0A=
}=0A=
}=0A=
return -1;=0A=
},findValue:function(lst,_104,_105,end){=0A=
if(typeof (end)=3D=3D"undefined"||end=3D=3D=3Dnull){=0A=
end=3Dlst.length;=0A=
}=0A=
var cmp=3DMochiKit.Base.compare;=0A=
for(var i=3D(_105||0);i<end;i++){=0A=
if(cmp(lst[i],_104)=3D=3D=3D0){=0A=
return i;=0A=
}=0A=
}=0A=
return -1;=0A=
},nodeWalk:function(node,_107){=0A=
var _108=3D[node];=0A=
var _109=3DMochiKit.Base.extend;=0A=
while(_108.length){=0A=
var res=3D_107(_108.shift());=0A=
if(res){=0A=
_109(_108,res);=0A=
}=0A=
}=0A=
},nameFunctions:function(_110){=0A=
var base=3D_110.NAME;=0A=
if(typeof (base)=3D=3D"undefined"){=0A=
base=3D"";=0A=
}else{=0A=
base=3Dbase+".";=0A=
}=0A=
for(var name in _110){=0A=
var o=3D_110[name];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+name;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
},queryString:function(_113,_114){=0A=
if(typeof =
(MochiKit.DOM)!=3D"undefined"&&arguments.length=3D=3D1&&(typeof =
(_113)=3D=3D"string"||(typeof =
(_113.nodeType)!=3D"undefined"&&_113.nodeType>0))){=0A=
var kv=3DMochiKit.DOM.formContents(_113);=0A=
_113=3Dkv[0];=0A=
_114=3Dkv[1];=0A=
}else{=0A=
if(arguments.length=3D=3D1){=0A=
var o=3D_113;=0A=
_113=3D[];=0A=
_114=3D[];=0A=
for(var k in o){=0A=
var v=3Do[k];=0A=
if(typeof (v)!=3D"function"){=0A=
_113.push(k);=0A=
_114.push(v);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
var rval=3D[];=0A=
var len=3DMath.min(_113.length,_114.length);=0A=
var _118=3DMochiKit.Base.urlEncode;=0A=
for(var i=3D0;i<len;i++){=0A=
v=3D_114[i];=0A=
if(typeof (v)!=3D"undefined"&&v!=3D=3Dnull){=0A=
rval.push(_118(_113[i])+"=3D"+_118(v));=0A=
}=0A=
}=0A=
return rval.join("&");=0A=
},parseQueryString:function(_119,_120){=0A=
var _121=3D_119.replace(/\+/g,"%20").split("&");=0A=
var o=3D{};=0A=
var _122;=0A=
if(typeof (decodeURIComponent)!=3D"undefined"){=0A=
_122=3DdecodeURIComponent;=0A=
}else{=0A=
_122=3Dunescape;=0A=
}=0A=
if(_120){=0A=
for(var i=3D0;i<_121.length;i++){=0A=
var pair=3D_121[i].split("=3D");=0A=
var name=3D_122(pair[0]);=0A=
var arr=3Do[name];=0A=
if(!(arr instanceof Array)){=0A=
arr=3D[];=0A=
o[name]=3Darr;=0A=
}=0A=
arr.push(_122(pair[1]));=0A=
}=0A=
}else{=0A=
for(i=3D0;i<_121.length;i++){=0A=
pair=3D_121[i].split("=3D");=0A=
o[_122(pair[0])]=3D_122(pair[1]);=0A=
}=0A=
}=0A=
return o;=0A=
}});=0A=
MochiKit.Base.AdapterRegistry=3Dfunction(){=0A=
this.pairs=3D[];=0A=
};=0A=
MochiKit.Base.AdapterRegistry.prototype=3D{register:function(name,_124,wr=
ap,_126){=0A=
if(_126){=0A=
this.pairs.unshift([name,_124,wrap]);=0A=
}else{=0A=
this.pairs.push([name,_124,wrap]);=0A=
}=0A=
},match:function(){=0A=
for(var i=3D0;i<this.pairs.length;i++){=0A=
var pair=3Dthis.pairs[i];=0A=
if(pair[1].apply(this,arguments)){=0A=
return pair[2].apply(this,arguments);=0A=
}=0A=
}=0A=
throw MochiKit.Base.NotFound;=0A=
},unregister:function(name){=0A=
for(var i=3D0;i<this.pairs.length;i++){=0A=
var pair=3Dthis.pairs[i];=0A=
if(pair[0]=3D=3Dname){=0A=
this.pairs.splice(i,1);=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
}};=0A=
MochiKit.Base.EXPORT=3D["counter","clone","extend","update","updatetree",=
"setdefault","keys","items","NamedError","operator","forwardCall","itemge=
tter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNul=
l","isEmpty","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilte=
r","filter","bind","bindMethods","NotFound","AdapterRegistry","registerCo=
mparator","compare","registerRepr","repr","objEqual","arrayEqual","concat=
","keyComparator","reverseKeyComparator","partial","merge","listMinMax","=
listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryS=
tring","serializeJSON","registerJSON","evalJSON","parseQueryString","find=
Value","findIdentical","flattenArguments","method"];=0A=
MochiKit.Base.EXPORT_OK=3D["nameFunctions","comparatorRegistry","reprRegi=
stry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike"=
,"reprString","reprNumber"];=0A=
MochiKit.Base._exportSymbols=3Dfunction(_127,_128){=0A=
if(typeof (MochiKit.__export__)=3D=3D"undefined"){=0A=
MochiKit.__export__=3D(MochiKit.__compat__||(typeof =
(JSAN)=3D=3D"undefined"&&typeof (dojo)=3D=3D"undefined"));=0A=
}=0A=
if(!MochiKit.__export__){=0A=
return;=0A=
}=0A=
var all=3D_128.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_127[all[i]]=3D_128[all[i]];=0A=
}=0A=
};=0A=
MochiKit.Base.__new__=3Dfunction(){=0A=
var m=3Dthis;=0A=
m.forward=3Dm.forwardCall;=0A=
m.find=3Dm.findValue;=0A=
if(typeof (encodeURIComponent)!=3D"undefined"){=0A=
m.urlEncode=3Dfunction(_130){=0A=
return encodeURIComponent(_130).replace(/\'/g,"%27");=0A=
};=0A=
}else{=0A=
m.urlEncode=3Dfunction(_131){=0A=
return =
escape(_131).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g=
,"%27");=0A=
};=0A=
}=0A=
m.NamedError=3Dfunction(name){=0A=
this.message=3Dname;=0A=
this.name=3Dname;=0A=
};=0A=
m.NamedError.prototype=3Dnew Error();=0A=
m.update(m.NamedError.prototype,{repr:function(){=0A=
if(this.message&&this.message!=3Dthis.name){=0A=
return this.name+"("+m.repr(this.message)+")";=0A=
}else{=0A=
return this.name+"()";=0A=
}=0A=
},toString:m.forwardCall("repr")});=0A=
m.NotFound=3Dnew m.NamedError("MochiKit.Base.NotFound");=0A=
m.listMax=3Dm.partial(m.listMinMax,1);=0A=
m.listMin=3Dm.partial(m.listMinMax,-1);=0A=
m.isCallable=3Dm.typeMatcher("function");=0A=
m.isUndefined=3Dm.typeMatcher("undefined");=0A=
m.merge=3Dm.partial(m.update,null);=0A=
m.zip=3Dm.partial(m.map,null);=0A=
m.comparatorRegistry=3Dnew m.AdapterRegistry();=0A=
m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);=0A=
m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);=0A=
m.reprRegistry=3Dnew m.AdapterRegistry();=0A=
m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);=0A=
m.registerRepr("string",m.typeMatcher("string"),m.reprString);=0A=
m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);=0A=
m.jsonRegistry=3Dnew m.AdapterRegistry();=0A=
var all=3Dm.concat(m.EXPORT,m.EXPORT_OK);=0A=
m.EXPORT_TAGS=3D{":common":m.concat(m.EXPORT_OK),":all":all};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Base.__new__();=0A=
if(!MochiKit.__compat__){=0A=
compare=3DMochiKit.Base.compare;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Base);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Iter");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Iter depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Iter)=3D=3D"undefined"){=0A=
MochiKit.Iter=3D{};=0A=
}=0A=
MochiKit.Iter.NAME=3D"MochiKit.Iter";=0A=
MochiKit.Iter.VERSION=3D"1.3.1";=0A=
MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},registerIteratorFactory:function(name,_132,_133,_134){=0A=
MochiKit.Iter.iteratorRegistry.register(name,_132,_133,_134);=0A=
},iter:function(_135,_136){=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length=3D=3D2){=0A=
return self.takewhile(function(a){=0A=
return a!=3D_136;=0A=
},_135);=0A=
}=0A=
if(typeof (_135.next)=3D=3D"function"){=0A=
return _135;=0A=
}else{=0A=
if(typeof (_135.iter)=3D=3D"function"){=0A=
return _135.iter();=0A=
}=0A=
}=0A=
try{=0A=
return self.iteratorRegistry.match(_135);=0A=
}=0A=
catch(e){=0A=
var m=3DMochiKit.Base;=0A=
if(e=3D=3Dm.NotFound){=0A=
e=3Dnew TypeError(typeof (_135)+": "+m.repr(_135)+" is not iterable");=0A=
}=0A=
throw e;=0A=
}=0A=
},count:function(n){=0A=
if(!n){=0A=
n=3D0;=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
return {repr:function(){=0A=
return "count("+n+")";=0A=
},toString:m.forwardCall("repr"),next:m.counter(n)};=0A=
},cycle:function(p){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
var lst=3D[];=0A=
var _139=3Dself.iter(p);=0A=
return {repr:function(){=0A=
return "cycle(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
try{=0A=
var rval=3D_139.next();=0A=
lst.push(rval);=0A=
return rval;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
if(lst.length=3D=3D=3D0){=0A=
this.next=3Dfunction(){=0A=
throw self.StopIteration;=0A=
};=0A=
}else{=0A=
var i=3D-1;=0A=
this.next=3Dfunction(){=0A=
i=3D(i+1)%lst.length;=0A=
return lst[i];=0A=
};=0A=
}=0A=
return this.next();=0A=
}=0A=
}};=0A=
},repeat:function(elem,n){=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (n)=3D=3D"undefined"){=0A=
return {repr:function(){=0A=
return "repeat("+m.repr(elem)+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return elem;=0A=
}};=0A=
}=0A=
return {repr:function(){=0A=
return "repeat("+m.repr(elem)+", "+n+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
if(n<=3D0){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
n-=3D1;=0A=
return elem;=0A=
}};=0A=
},next:function(_141){=0A=
return _141.next();=0A=
},izip:function(p,q){=0A=
var m=3DMochiKit.Base;=0A=
var next=3DMochiKit.Iter.next;=0A=
var _144=3Dm.map(iter,arguments);=0A=
return {repr:function(){=0A=
return "izip(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return m.map(next,_144);=0A=
}};=0A=
},ifilter:function(pred,seq){=0A=
var m=3DMochiKit.Base;=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
if(pred=3D=3D=3Dnull){=0A=
pred=3Dm.operator.truth;=0A=
}=0A=
return {repr:function(){=0A=
return "ifilter(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(pred(rval)){=0A=
return rval;=0A=
}=0A=
}=0A=
return undefined;=0A=
}};=0A=
},ifilterfalse:function(pred,seq){=0A=
var m=3DMochiKit.Base;=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
if(pred=3D=3D=3Dnull){=0A=
pred=3Dm.operator.truth;=0A=
}=0A=
return {repr:function(){=0A=
return "ifilterfalse(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
return rval;=0A=
}=0A=
}=0A=
return undefined;=0A=
}};=0A=
},islice:function(seq){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
seq=3Dself.iter(seq);=0A=
var _147=3D0;=0A=
var stop=3D0;=0A=
var step=3D1;=0A=
var i=3D-1;=0A=
if(arguments.length=3D=3D2){=0A=
stop=3Darguments[1];=0A=
}else{=0A=
if(arguments.length=3D=3D3){=0A=
_147=3Darguments[1];=0A=
stop=3Darguments[2];=0A=
}else{=0A=
_147=3Darguments[1];=0A=
stop=3Darguments[2];=0A=
step=3Darguments[3];=0A=
}=0A=
}=0A=
return {repr:function(){=0A=
return "islice("+["...",_147,stop,step].join(", ")+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
var rval;=0A=
while(i<_147){=0A=
rval=3Dseq.next();=0A=
i++;=0A=
}=0A=
if(_147>=3Dstop){=0A=
throw self.StopIteration;=0A=
}=0A=
_147+=3Dstep;=0A=
return rval;=0A=
}};=0A=
},imap:function(fun,p,q){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
var _151=3Dm.map(self.iter,m.extend(null,arguments,1));=0A=
var map=3Dm.map;=0A=
var next=3Dself.next;=0A=
return {repr:function(){=0A=
return "imap(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return fun.apply(this,map(next,_151));=0A=
}};=0A=
},applymap:function(fun,seq,self){=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
var m=3DMochiKit.Base;=0A=
return {repr:function(){=0A=
return "applymap(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return fun.apply(self,seq.next());=0A=
}};=0A=
},chain:function(p,q){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length=3D=3D1){=0A=
return self.iter(arguments[0]);=0A=
}=0A=
var _153=3Dm.map(self.iter,arguments);=0A=
return {repr:function(){=0A=
return "chain(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(_153.length>1){=0A=
try{=0A=
return _153[0].next();=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
_153.shift();=0A=
}=0A=
}=0A=
if(_153.length=3D=3D1){=0A=
var arg=3D_153.shift();=0A=
this.next=3Dm.bind("next",arg);=0A=
return this.next();=0A=
}=0A=
throw self.StopIteration;=0A=
}};=0A=
},takewhile:function(pred,seq){=0A=
var self=3DMochiKit.Iter;=0A=
seq=3Dself.iter(seq);=0A=
return {repr:function(){=0A=
return "takewhile(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
this.next=3Dfunction(){=0A=
throw self.StopIteration;=0A=
};=0A=
this.next();=0A=
}=0A=
return rval;=0A=
}};=0A=
},dropwhile:function(pred,seq){=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
var m=3DMochiKit.Base;=0A=
var bind=3Dm.bind;=0A=
return {"repr":function(){=0A=
return "dropwhile(...)";=0A=
},"toString":m.forwardCall("repr"),"next":function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
break;=0A=
}=0A=
}=0A=
this.next=3Dbind("next",seq);=0A=
return rval;=0A=
}};=0A=
},_tee:function(_155,sync,_157){=0A=
sync.pos[_155]=3D-1;=0A=
var m=3DMochiKit.Base;=0A=
var _158=3Dm.listMin;=0A=
return {repr:function(){=0A=
return "tee("+_155+", ...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
var rval;=0A=
var i=3Dsync.pos[_155];=0A=
if(i=3D=3Dsync.max){=0A=
rval=3D_157.next();=0A=
sync.deque.push(rval);=0A=
sync.max+=3D1;=0A=
sync.pos[_155]+=3D1;=0A=
}else{=0A=
rval=3Dsync.deque[i-sync.min];=0A=
sync.pos[_155]+=3D1;=0A=
if(i=3D=3Dsync.min&&_158(sync.pos)!=3Dsync.min){=0A=
sync.min+=3D1;=0A=
sync.deque.shift();=0A=
}=0A=
}=0A=
return rval;=0A=
}};=0A=
},tee:function(_159,n){=0A=
var rval=3D[];=0A=
var sync=3D{"pos":[],"deque":[],"max":-1,"min":-1};=0A=
if(arguments.length=3D=3D1){=0A=
n=3D2;=0A=
}=0A=
var self=3DMochiKit.Iter;=0A=
_159=3Dself.iter(_159);=0A=
var _tee=3Dself._tee;=0A=
for(var i=3D0;i<n;i++){=0A=
rval.push(_tee(i,sync,_159));=0A=
}=0A=
return rval;=0A=
},list:function(_161){=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_161.slice)=3D=3D"function"){=0A=
return _161.slice();=0A=
}else{=0A=
if(m.isArrayLike(_161)){=0A=
return m.concat(_161);=0A=
}=0A=
}=0A=
var self=3DMochiKit.Iter;=0A=
_161=3Dself.iter(_161);=0A=
var rval=3D[];=0A=
try{=0A=
while(true){=0A=
rval.push(_161.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return rval;=0A=
}=0A=
return undefined;=0A=
},reduce:function(fn,_162,_163){=0A=
var i=3D0;=0A=
var x=3D_163;=0A=
var self=3DMochiKit.Iter;=0A=
_162=3Dself.iter(_162);=0A=
if(arguments.length<3){=0A=
try{=0A=
x=3D_162.next();=0A=
}=0A=
catch(e){=0A=
if(e=3D=3Dself.StopIteration){=0A=
e=3Dnew TypeError("reduce() of empty sequence with no initial value");=0A=
}=0A=
throw e;=0A=
}=0A=
i++;=0A=
}=0A=
try{=0A=
while(true){=0A=
x=3Dfn(x,_162.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
return x;=0A=
},range:function(){=0A=
var _165=3D0;=0A=
var stop=3D0;=0A=
var step=3D1;=0A=
if(arguments.length=3D=3D1){=0A=
stop=3Darguments[0];=0A=
}else{=0A=
if(arguments.length=3D=3D2){=0A=
_165=3Darguments[0];=0A=
stop=3Darguments[1];=0A=
}else{=0A=
if(arguments.length=3D=3D3){=0A=
_165=3Darguments[0];=0A=
stop=3Darguments[1];=0A=
step=3Darguments[2];=0A=
}else{=0A=
throw new TypeError("range() takes 1, 2, or 3 arguments!");=0A=
}=0A=
}=0A=
}=0A=
if(step=3D=3D=3D0){=0A=
throw new TypeError("range() step must not be 0");=0A=
}=0A=
return {next:function(){=0A=
if((step>0&&_165>=3Dstop)||(step<0&&_165<=3Dstop)){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
var rval=3D_165;=0A=
_165+=3Dstep;=0A=
return rval;=0A=
},repr:function(){=0A=
return "range("+[_165,stop,step].join(", ")+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
},sum:function(_166,_167){=0A=
var x=3D_167||0;=0A=
var self=3DMochiKit.Iter;=0A=
_166=3Dself.iter(_166);=0A=
try{=0A=
while(true){=0A=
x+=3D_166.next();=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
return x;=0A=
},exhaust:function(_168){=0A=
var self=3DMochiKit.Iter;=0A=
_168=3Dself.iter(_168);=0A=
try{=0A=
while(true){=0A=
_168.next();=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
},forEach:function(_169,func,self){=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length>2){=0A=
func=3Dm.bind(func,self);=0A=
}=0A=
if(m.isArrayLike(_169)){=0A=
try{=0A=
for(var i=3D0;i<_169.length;i++){=0A=
func(_169[i]);=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3DMochiKit.Iter.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
}else{=0A=
self=3DMochiKit.Iter;=0A=
self.exhaust(self.imap(func,_169));=0A=
}=0A=
},every:function(_171,func){=0A=
var self=3DMochiKit.Iter;=0A=
try{=0A=
self.ifilterfalse(func,_171).next();=0A=
return false;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return true;=0A=
}=0A=
},sorted:function(_172,cmp){=0A=
var rval=3DMochiKit.Iter.list(_172);=0A=
if(arguments.length=3D=3D1){=0A=
cmp=3DMochiKit.Base.compare;=0A=
}=0A=
rval.sort(cmp);=0A=
return rval;=0A=
},reversed:function(_173){=0A=
var rval=3DMochiKit.Iter.list(_173);=0A=
rval.reverse();=0A=
return rval;=0A=
},some:function(_174,func){=0A=
var self=3DMochiKit.Iter;=0A=
try{=0A=
self.ifilter(func,_174).next();=0A=
return true;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return false;=0A=
}=0A=
},iextend:function(lst,_175){=0A=
if(MochiKit.Base.isArrayLike(_175)){=0A=
for(var i=3D0;i<_175.length;i++){=0A=
lst.push(_175[i]);=0A=
}=0A=
}else{=0A=
var self=3DMochiKit.Iter;=0A=
_175=3Dself.iter(_175);=0A=
try{=0A=
while(true){=0A=
lst.push(_175.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
}=0A=
return lst;=0A=
},groupby:function(_176,_177){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length<2){=0A=
_177=3Dm.operator.identity;=0A=
}=0A=
_176=3Dself.iter(_176);=0A=
var pk=3Dundefined;=0A=
var k=3Dundefined;=0A=
var v;=0A=
function fetch(){=0A=
v=3D_176.next();=0A=
k=3D_177(v);=0A=
}=0A=
function eat(){=0A=
var ret=3Dv;=0A=
v=3Dundefined;=0A=
return ret;=0A=
}=0A=
var _180=3Dtrue;=0A=
return {repr:function(){=0A=
return "groupby(...)";=0A=
},next:function(){=0A=
while(k=3D=3Dpk){=0A=
fetch();=0A=
if(_180){=0A=
_180=3Dfalse;=0A=
break;=0A=
}=0A=
}=0A=
pk=3Dk;=0A=
return [k,{next:function(){=0A=
if(v=3D=3Dundefined){=0A=
fetch();=0A=
}=0A=
if(k!=3Dpk){=0A=
throw self.StopIteration;=0A=
}=0A=
return eat();=0A=
}}];=0A=
}};=0A=
},groupby_as_array:function(_181,_182){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length<2){=0A=
_182=3Dm.operator.identity;=0A=
}=0A=
_181=3Dself.iter(_181);=0A=
var _183=3D[];=0A=
var _184=3Dtrue;=0A=
var _185;=0A=
while(true){=0A=
try{=0A=
var _186=3D_181.next();=0A=
var key=3D_182(_186);=0A=
}=0A=
catch(e){=0A=
if(e=3D=3Dself.StopIteration){=0A=
break;=0A=
}=0A=
throw e;=0A=
}=0A=
if(_184||key!=3D_185){=0A=
var _187=3D[];=0A=
_183.push([key,_187]);=0A=
}=0A=
_187.push(_186);=0A=
_184=3Dfalse;=0A=
_185=3Dkey;=0A=
}=0A=
return _183;=0A=
},arrayLikeIter:function(_188){=0A=
var i=3D0;=0A=
return {repr:function(){=0A=
return "arrayLikeIter(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
if(i>=3D_188.length){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
return _188[i++];=0A=
}};=0A=
},hasIterateNext:function(_189){=0A=
return (_189&&typeof (_189.iterateNext)=3D=3D"function");=0A=
},iterateNextIter:function(_190){=0A=
return {repr:function(){=0A=
return "iterateNextIter(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
var rval=3D_190.iterateNext();=0A=
if(rval=3D=3D=3Dnull||rval=3D=3D=3Dundefined){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
return rval;=0A=
}};=0A=
}});=0A=
MochiKit.Iter.EXPORT_OK=3D["iteratorRegistry","arrayLikeIter","hasIterate=
Next","iterateNextIter",];=0A=
MochiKit.Iter.EXPORT=3D["StopIteration","registerIteratorFactory","iter",=
"count","cycle","repeat","next","izip","ifilter","ifilterfalse","islice",=
"imap","applymap","chain","takewhile","dropwhile","tee","list","reduce","=
range","sum","exhaust","forEach","every","sorted","reversed","some","iext=
end","groupby","groupby_as_array"];=0A=
MochiKit.Iter.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
this.StopIteration=3Dnew m.NamedError("StopIteration");=0A=
this.iteratorRegistry=3Dnew m.AdapterRegistry();=0A=
this.registerIteratorFactory("arrayLike",m.isArrayLike,this.arrayLikeIter=
);=0A=
this.registerIteratorFactory("iterateNext",this.hasIterateNext,this.itera=
teNextIter);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Iter.__new__();=0A=
if(!MochiKit.__compat__){=0A=
reduce=3DMochiKit.Iter.reduce;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Iter);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Logging");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Logging depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Logging)=3D=3D"undefined"){=0A=
MochiKit.Logging=3D{};=0A=
}=0A=
MochiKit.Logging.NAME=3D"MochiKit.Logging";=0A=
MochiKit.Logging.VERSION=3D"1.3.1";=0A=
MochiKit.Logging.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Logging.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Logging.EXPORT=3D["LogLevel","LogMessage","Logger","alertListene=
r","logger","log","logError","logDebug","logFatal","logWarning"];=0A=
MochiKit.Logging.EXPORT_OK=3D["logLevelAtLeast","isLogMessage","compareLo=
gMessage"];=0A=
MochiKit.Logging.LogMessage=3Dfunction(num,_192,info){=0A=
this.num=3Dnum;=0A=
this.level=3D_192;=0A=
this.info=3Dinfo;=0A=
this.timestamp=3Dnew Date();=0A=
};=0A=
MochiKit.Logging.LogMessage.prototype=3D{repr:function(){=0A=
var m=3DMochiKit.Base;=0A=
return =
"LogMessage("+m.map(m.repr,[this.num,this.level,this.info]).join(", =
")+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
MochiKit.Base.update(MochiKit.Logging,{logLevelAtLeast:function(_194){=0A=
var self=3DMochiKit.Logging;=0A=
if(typeof (_194)=3D=3D"string"){=0A=
_194=3Dself.LogLevel[_194];=0A=
}=0A=
return function(msg){=0A=
var _196=3Dmsg.level;=0A=
if(typeof (_196)=3D=3D"string"){=0A=
_196=3Dself.LogLevel[_196];=0A=
}=0A=
return _196>=3D_194;=0A=
};=0A=
},isLogMessage:function(){=0A=
var _197=3DMochiKit.Logging.LogMessage;=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(arguments[i] instanceof _197)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},compareLogMessage:function(a,b){=0A=
return MochiKit.Base.compare([a.level,a.info],[b.level,b.info]);=0A=
},alertListener:function(msg){=0A=
alert("num: "+msg.num+"\nlevel: "+msg.level+"\ninfo: "+msg.info.join(" =
"));=0A=
}});=0A=
MochiKit.Logging.Logger=3Dfunction(_198){=0A=
this.counter=3D0;=0A=
if(typeof (_198)=3D=3D"undefined"||_198=3D=3D=3Dnull){=0A=
_198=3D-1;=0A=
}=0A=
this.maxSize=3D_198;=0A=
this._messages=3D[];=0A=
this.listeners=3D{};=0A=
this.useNativeConsole=3Dfalse;=0A=
};=0A=
MochiKit.Logging.Logger.prototype=3D{clear:function(){=0A=
this._messages.splice(0,this._messages.length);=0A=
},logToConsole:function(msg){=0A=
if(typeof (window)!=3D"undefined"&&window.console&&window.console.log){=0A=
window.console.log(msg);=0A=
}else{=0A=
if(typeof (opera)!=3D"undefined"&&opera.postError){=0A=
opera.postError(msg);=0A=
}else{=0A=
if(typeof (printfire)=3D=3D"function"){=0A=
printfire(msg);=0A=
}=0A=
}=0A=
}=0A=
},dispatchListeners:function(msg){=0A=
for(var k in this.listeners){=0A=
var pair=3Dthis.listeners[k];=0A=
if(pair.ident!=3Dk||(pair[0]&&!pair[0](msg))){=0A=
continue;=0A=
}=0A=
pair[1](msg);=0A=
}=0A=
},addListener:function(_199,_200,_201){=0A=
if(typeof (_200)=3D=3D"string"){=0A=
_200=3DMochiKit.Logging.logLevelAtLeast(_200);=0A=
}=0A=
var _202=3D[_200,_201];=0A=
_202.ident=3D_199;=0A=
this.listeners[_199]=3D_202;=0A=
},removeListener:function(_203){=0A=
delete this.listeners[_203];=0A=
},baseLog:function(_204,_205){=0A=
var msg=3Dnew =
MochiKit.Logging.LogMessage(this.counter,_204,MochiKit.Base.extend(null,a=
rguments,1));=0A=
this._messages.push(msg);=0A=
this.dispatchListeners(msg);=0A=
if(this.useNativeConsole){=0A=
this.logToConsole(msg.level+": "+msg.info.join(" "));=0A=
}=0A=
this.counter+=3D1;=0A=
while(this.maxSize>=3D0&&this._messages.length>this.maxSize){=0A=
this._messages.shift();=0A=
}=0A=
},getMessages:function(_206){=0A=
var _207=3D0;=0A=
if(!(typeof (_206)=3D=3D"undefined"||_206=3D=3D=3Dnull)){=0A=
_207=3DMath.max(0,this._messages.length-_206);=0A=
}=0A=
return this._messages.slice(_207);=0A=
},getMessageText:function(_208){=0A=
if(typeof (_208)=3D=3D"undefined"||_208=3D=3D=3Dnull){=0A=
_208=3D30;=0A=
}=0A=
var _209=3Dthis.getMessages(_208);=0A=
if(_209.length){=0A=
var lst=3Dmap(function(m){=0A=
return "\n  ["+m.num+"] "+m.level+": "+m.info.join(" ");=0A=
},_209);=0A=
lst.unshift("LAST "+_209.length+" MESSAGES:");=0A=
return lst.join("");=0A=
}=0A=
return "";=0A=
},debuggingBookmarklet:function(_210){=0A=
if(typeof (MochiKit.LoggingPane)=3D=3D"undefined"){=0A=
alert(this.getMessageText());=0A=
}else{=0A=
MochiKit.LoggingPane.createLoggingPane(_210||false);=0A=
}=0A=
}};=0A=
MochiKit.Logging.__new__=3Dfunction(){=0A=
this.LogLevel=3D{ERROR:40,FATAL:50,WARNING:30,INFO:20,DEBUG:10};=0A=
var m=3DMochiKit.Base;=0A=
m.registerComparator("LogMessage",this.isLogMessage,this.compareLogMessag=
e);=0A=
var _211=3Dm.partial;=0A=
var _212=3Dthis.Logger;=0A=
var _213=3D_212.prototype.baseLog;=0A=
m.update(this.Logger.prototype,{debug:_211(_213,"DEBUG"),log:_211(_213,"I=
NFO"),error:_211(_213,"ERROR"),fatal:_211(_213,"FATAL"),warning:_211(_213=
,"WARNING")});=0A=
var self=3Dthis;=0A=
var _214=3Dfunction(name){=0A=
return function(){=0A=
self.logger[name].apply(self.logger,arguments);=0A=
};=0A=
};=0A=
this.log=3D_214("log");=0A=
this.logError=3D_214("error");=0A=
this.logDebug=3D_214("debug");=0A=
this.logFatal=3D_214("fatal");=0A=
this.logWarning=3D_214("warning");=0A=
this.logger=3Dnew _212();=0A=
this.logger.useNativeConsole=3Dtrue;=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
if(typeof (printfire)=3D=3D"undefined"&&typeof =
(document)!=3D"undefined"&&document.createEvent&&typeof =
(dispatchEvent)!=3D"undefined"){=0A=
printfire=3Dfunction(){=0A=
printfire.args=3Darguments;=0A=
var ev=3Ddocument.createEvent("Events");=0A=
ev.initEvent("printfire",false,true);=0A=
dispatchEvent(ev);=0A=
};=0A=
}=0A=
MochiKit.Logging.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Logging);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.DateTime");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.DateTime)=3D=3D"undefined"){=0A=
MochiKit.DateTime=3D{};=0A=
}=0A=
MochiKit.DateTime.NAME=3D"MochiKit.DateTime";=0A=
MochiKit.DateTime.VERSION=3D"1.3.1";=0A=
MochiKit.DateTime.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.DateTime.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.DateTime.isoDate=3Dfunction(str){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"||str.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var iso=3Dstr.split("-");=0A=
if(iso.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
return new Date(iso[0],iso[1]-1,iso[2]);=0A=
};=0A=
MochiKit.DateTime._isoRegexp=3D/(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T =
](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::=
(\d{1,2}))?)?)?)?)?/;=0A=
MochiKit.DateTime.isoTimestamp=3Dfunction(str){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"||str.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var res=3Dstr.match(MochiKit.DateTime._isoRegexp);=0A=
if(typeof (res)=3D=3D"undefined"||res=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var year,month,day,hour,min,sec,msec;=0A=
year=3DparseInt(res[1],10);=0A=
if(typeof (res[2])=3D=3D"undefined"||res[2]=3D=3D=3D""){=0A=
return new Date(year);=0A=
}=0A=
month=3DparseInt(res[2],10)-1;=0A=
day=3DparseInt(res[3],10);=0A=
if(typeof (res[4])=3D=3D"undefined"||res[4]=3D=3D=3D""){=0A=
return new Date(year,month,day);=0A=
}=0A=
hour=3DparseInt(res[4],10);=0A=
min=3DparseInt(res[5],10);=0A=
sec=3D(typeof =
(res[6])!=3D"undefined"&&res[6]!=3D=3D"")?parseInt(res[6],10):0;=0A=
if(typeof (res[7])!=3D"undefined"&&res[7]!=3D=3D""){=0A=
msec=3DMath.round(1000*parseFloat("0."+res[7]));=0A=
}else{=0A=
msec=3D0;=0A=
}=0A=
if((typeof (res[8])=3D=3D"undefined"||res[8]=3D=3D=3D"")&&(typeof =
(res[9])=3D=3D"undefined"||res[9]=3D=3D=3D"")){=0A=
return new Date(year,month,day,hour,min,sec,msec);=0A=
}=0A=
var ofs;=0A=
if(typeof (res[9])!=3D"undefined"&&res[9]!=3D=3D""){=0A=
ofs=3DparseInt(res[10],10)*3600000;=0A=
if(typeof (res[11])!=3D"undefined"&&res[11]!=3D=3D""){=0A=
ofs+=3DparseInt(res[11],10)*60000;=0A=
}=0A=
if(res[9]=3D=3D"-"){=0A=
ofs=3D-ofs;=0A=
}=0A=
}else{=0A=
ofs=3D0;=0A=
}=0A=
return new Date(Date.UTC(year,month,day,hour,min,sec,msec)-ofs);=0A=
};=0A=
MochiKit.DateTime.toISOTime=3Dfunction(date,_221){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var hh=3Ddate.getHours();=0A=
var mm=3Ddate.getMinutes();=0A=
var ss=3Ddate.getSeconds();=0A=
var =
lst=3D[((_221&&(hh<10))?"0"+hh:hh),((mm<10)?"0"+mm:mm),((ss<10)?"0"+ss:ss=
)];=0A=
return lst.join(":");=0A=
};=0A=
MochiKit.DateTime.toISOTimestamp=3Dfunction(date,_225){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var sep=3D_225?"T":" ";=0A=
var foot=3D_225?"Z":"";=0A=
if(_225){=0A=
date=3Dnew Date(date.getTime()+(date.getTimezoneOffset()*60000));=0A=
}=0A=
return =
MochiKit.DateTime.toISODate(date)+sep+MochiKit.DateTime.toISOTime(date,_2=
25)+foot;=0A=
};=0A=
MochiKit.DateTime.toISODate=3Dfunction(date){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var _228=3DMochiKit.DateTime._padTwo;=0A=
return =
[date.getFullYear(),_228(date.getMonth()+1),_228(date.getDate())].join("-=
");=0A=
};=0A=
MochiKit.DateTime.americanDate=3Dfunction(d){=0A=
d=3Dd+"";=0A=
if(typeof (d)!=3D"string"||d.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var a=3Dd.split("/");=0A=
return new Date(a[2],a[0]-1,a[1]);=0A=
};=0A=
MochiKit.DateTime._padTwo=3Dfunction(n){=0A=
return (n>9)?n:"0"+n;=0A=
};=0A=
MochiKit.DateTime.toPaddedAmericanDate=3Dfunction(d){=0A=
if(typeof (d)=3D=3D"undefined"||d=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var _230=3DMochiKit.DateTime._padTwo;=0A=
return =
[_230(d.getMonth()+1),_230(d.getDate()),d.getFullYear()].join("/");=0A=
};=0A=
MochiKit.DateTime.toAmericanDate=3Dfunction(d){=0A=
if(typeof (d)=3D=3D"undefined"||d=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
return [d.getMonth()+1,d.getDate(),d.getFullYear()].join("/");=0A=
};=0A=
MochiKit.DateTime.EXPORT=3D["isoDate","isoTimestamp","toISOTime","toISOTi=
mestamp","toISODate","americanDate","toPaddedAmericanDate","toAmericanDat=
e"];=0A=
MochiKit.DateTime.EXPORT_OK=3D[];=0A=
MochiKit.DateTime.EXPORT_TAGS=3D{":common":MochiKit.DateTime.EXPORT,":all=
":MochiKit.DateTime.EXPORT};=0A=
MochiKit.DateTime.__new__=3Dfunction(){=0A=
var base=3Dthis.NAME+".";=0A=
for(var k in this){=0A=
var o=3Dthis[k];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+k;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
};=0A=
MochiKit.DateTime.__new__();=0A=
if(typeof (MochiKit.Base)!=3D"undefined"){=0A=
MochiKit.Base._exportSymbols(this,MochiKit.DateTime);=0A=
}else{=0A=
(function(_231,_232){=0A=
if((typeof (JSAN)=3D=3D"undefined"&&typeof =
(dojo)=3D=3D"undefined")||(typeof =
(MochiKit.__compat__)=3D=3D"boolean"&&MochiKit.__compat__)){=0A=
var all=3D_232.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_231[all[i]]=3D_232[all[i]];=0A=
}=0A=
}=0A=
})(this,MochiKit.DateTime);=0A=
}=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Format");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.Format)=3D=3D"undefined"){=0A=
MochiKit.Format=3D{};=0A=
}=0A=
MochiKit.Format.NAME=3D"MochiKit.Format";=0A=
MochiKit.Format.VERSION=3D"1.3.1";=0A=
MochiKit.Format.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Format.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Format._numberFormatter=3Dfunction(_233,_234,_235,_236,_237,_238=
,_239,_240,_241){=0A=
return function(num){=0A=
num=3DparseFloat(num);=0A=
if(typeof (num)=3D=3D"undefined"||num=3D=3D=3Dnull||isNaN(num)){=0A=
return _233;=0A=
}=0A=
var _242=3D_234;=0A=
var _243=3D_235;=0A=
if(num<0){=0A=
num=3D-num;=0A=
}else{=0A=
_242=3D_242.replace(/-/,"");=0A=
}=0A=
var me=3Darguments.callee;=0A=
var fmt=3DMochiKit.Format.formatLocale(_236);=0A=
if(_237){=0A=
num=3Dnum*100;=0A=
_243=3Dfmt.percent+_243;=0A=
}=0A=
num=3DMochiKit.Format.roundToFixed(num,_238);=0A=
var _245=3Dnum.split(/\./);=0A=
var _246=3D_245[0];=0A=
var frac=3D(_245.length=3D=3D1)?"":_245[1];=0A=
var res=3D"";=0A=
while(_246.length<_239){=0A=
_246=3D"0"+_246;=0A=
}=0A=
if(_240){=0A=
while(_246.length>_240){=0A=
var i=3D_246.length-_240;=0A=
res=3Dfmt.separator+_246.substring(i,_246.length)+res;=0A=
_246=3D_246.substring(0,i);=0A=
}=0A=
}=0A=
res=3D_246+res;=0A=
if(_238>0){=0A=
while(frac.length<_241){=0A=
frac=3Dfrac+"0";=0A=
}=0A=
res=3Dres+fmt.decimal+frac;=0A=
}=0A=
return _242+res+_243;=0A=
};=0A=
};=0A=
MochiKit.Format.numberFormatter=3Dfunction(_248,_249,_250){=0A=
if(typeof (_249)=3D=3D"undefined"){=0A=
_249=3D"";=0A=
}=0A=
var _251=3D_248.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);=0A=
if(!_251){=0A=
throw TypeError("Invalid pattern");=0A=
}=0A=
var _252=3D_248.substr(0,_251.index);=0A=
var _253=3D_248.substr(_251.index+_251[0].length);=0A=
if(_252.search(/-/)=3D=3D-1){=0A=
_252=3D_252+"-";=0A=
}=0A=
var _254=3D_251[1];=0A=
var frac=3D(typeof (_251[2])=3D=3D"string"&&_251[2]!=3D"")?_251[2]:"";=0A=
var _255=3D(typeof (_251[3])=3D=3D"string"&&_251[3]!=3D"");=0A=
var tmp=3D_254.split(/,/);=0A=
var _257;=0A=
if(typeof (_250)=3D=3D"undefined"){=0A=
_250=3D"default";=0A=
}=0A=
if(tmp.length=3D=3D1){=0A=
_257=3Dnull;=0A=
}else{=0A=
_257=3Dtmp[1].length;=0A=
}=0A=
var _258=3D_254.length-_254.replace(/0/g,"").length;=0A=
var _259=3Dfrac.length-frac.replace(/0/g,"").length;=0A=
var _260=3Dfrac.length;=0A=
var =
rval=3DMochiKit.Format._numberFormatter(_249,_252,_253,_250,_255,_260,_25=
8,_257,_259);=0A=
var m=3DMochiKit.Base;=0A=
if(m){=0A=
var fn=3Darguments.callee;=0A=
var args=3Dm.concat(arguments);=0A=
rval.repr=3Dfunction(){=0A=
return [self.NAME,"(",map(m.repr,args).join(", "),")"].join("");=0A=
};=0A=
}=0A=
return rval;=0A=
};=0A=
MochiKit.Format.formatLocale=3Dfunction(_262){=0A=
if(typeof (_262)=3D=3D"undefined"||_262=3D=3D=3Dnull){=0A=
_262=3D"default";=0A=
}=0A=
if(typeof (_262)=3D=3D"string"){=0A=
var rval=3DMochiKit.Format.LOCALE[_262];=0A=
if(typeof (rval)=3D=3D"string"){=0A=
rval=3Darguments.callee(rval);=0A=
MochiKit.Format.LOCALE[_262]=3Drval;=0A=
}=0A=
return rval;=0A=
}else{=0A=
return _262;=0A=
}=0A=
};=0A=
MochiKit.Format.twoDigitAverage=3Dfunction(_263,_264){=0A=
if(_264){=0A=
var res=3D_263/_264;=0A=
if(!isNaN(res)){=0A=
return MochiKit.Format.twoDigitFloat(_263/_264);=0A=
}=0A=
}=0A=
return "0";=0A=
};=0A=
MochiKit.Format.twoDigitFloat=3Dfunction(_265){=0A=
var sign=3D(_265<0?"-":"");=0A=
var s=3DMath.floor(Math.abs(_265)*100).toString();=0A=
if(s=3D=3D"0"){=0A=
return s;=0A=
}=0A=
if(s.length<3){=0A=
while(s.charAt(s.length-1)=3D=3D"0"){=0A=
s=3Ds.substring(0,s.length-1);=0A=
}=0A=
return sign+"0."+s;=0A=
}=0A=
var head=3Dsign+s.substring(0,s.length-2);=0A=
var tail=3Ds.substring(s.length-2,s.length);=0A=
if(tail=3D=3D"00"){=0A=
return head;=0A=
}else{=0A=
if(tail.charAt(1)=3D=3D"0"){=0A=
return head+"."+tail.charAt(0);=0A=
}else{=0A=
return head+"."+tail;=0A=
}=0A=
}=0A=
};=0A=
MochiKit.Format.lstrip=3Dfunction(str,_270){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"){=0A=
return null;=0A=
}=0A=
if(!_270){=0A=
return str.replace(/^\s+/,"");=0A=
}else{=0A=
return str.replace(new RegExp("^["+_270+"]+"),"");=0A=
}=0A=
};=0A=
MochiKit.Format.rstrip=3Dfunction(str,_271){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"){=0A=
return null;=0A=
}=0A=
if(!_271){=0A=
return str.replace(/\s+$/,"");=0A=
}else{=0A=
return str.replace(new RegExp("["+_271+"]+$"),"");=0A=
}=0A=
};=0A=
MochiKit.Format.strip=3Dfunction(str,_272){=0A=
var self=3DMochiKit.Format;=0A=
return self.rstrip(self.lstrip(str,_272),_272);=0A=
};=0A=
MochiKit.Format.truncToFixed=3Dfunction(_273,_274){=0A=
_273=3DMath.floor(_273*Math.pow(10,_274));=0A=
var res=3D(_273*Math.pow(10,-_274)).toFixed(_274);=0A=
if(res.charAt(0)=3D=3D"."){=0A=
res=3D"0"+res;=0A=
}=0A=
return res;=0A=
};=0A=
MochiKit.Format.roundToFixed=3Dfunction(_275,_276){=0A=
return MochiKit.Format.truncToFixed(_275+0.5*Math.pow(10,-_276),_276);=0A=
};=0A=
MochiKit.Format.percentFormat=3Dfunction(_277){=0A=
return MochiKit.Format.twoDigitFloat(100*_277)+"%";=0A=
};=0A=
MochiKit.Format.EXPORT=3D["truncToFixed","roundToFixed","numberFormatter"=
,"formatLocale","twoDigitAverage","twoDigitFloat","percentFormat","lstrip=
","rstrip","strip"];=0A=
MochiKit.Format.LOCALE=3D{en_US:{separator:",",decimal:".",percent:"%"},d=
e_DE:{separator:".",decimal:",",percent:"%"},fr_FR:{separator:" =
",decimal:",",percent:"%"},"default":"en_US"};=0A=
MochiKit.Format.EXPORT_OK=3D[];=0A=
MochiKit.Format.EXPORT_TAGS=3D{":all":MochiKit.Format.EXPORT,":common":Mo=
chiKit.Format.EXPORT};=0A=
MochiKit.Format.__new__=3Dfunction(){=0A=
var base=3Dthis.NAME+".";=0A=
var k,v,o;=0A=
for(k in this.LOCALE){=0A=
o=3Dthis.LOCALE[k];=0A=
if(typeof (o)=3D=3D"object"){=0A=
o.repr=3Dfunction(){=0A=
return this.NAME;=0A=
};=0A=
o.NAME=3Dbase+"LOCALE."+k;=0A=
}=0A=
}=0A=
for(k in this){=0A=
o=3Dthis[k];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+k;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
};=0A=
MochiKit.Format.__new__();=0A=
if(typeof (MochiKit.Base)!=3D"undefined"){=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Format);=0A=
}else{=0A=
(function(_278,_279){=0A=
if((typeof (JSAN)=3D=3D"undefined"&&typeof =
(dojo)=3D=3D"undefined")||(typeof =
(MochiKit.__compat__)=3D=3D"boolean"&&MochiKit.__compat__)){=0A=
var all=3D_279.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_278[all[i]]=3D_279[all[i]];=0A=
}=0A=
}=0A=
})(this,MochiKit.Format);=0A=
}=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Async");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Async depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Async)=3D=3D"undefined"){=0A=
MochiKit.Async=3D{};=0A=
}=0A=
MochiKit.Async.NAME=3D"MochiKit.Async";=0A=
MochiKit.Async.VERSION=3D"1.3.1";=0A=
MochiKit.Async.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Async.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Async.Deferred=3Dfunction(_280){=0A=
this.chain=3D[];=0A=
this.id=3Dthis._nextId();=0A=
this.fired=3D-1;=0A=
this.paused=3D0;=0A=
this.results=3D[null,null];=0A=
this.canceller=3D_280;=0A=
this.silentlyCancelled=3Dfalse;=0A=
this.chained=3Dfalse;=0A=
};=0A=
MochiKit.Async.Deferred.prototype=3D{repr:function(){=0A=
var _281;=0A=
if(this.fired=3D=3D-1){=0A=
_281=3D"unfired";=0A=
}else{=0A=
if(this.fired=3D=3D=3D0){=0A=
_281=3D"success";=0A=
}else{=0A=
_281=3D"error";=0A=
}=0A=
}=0A=
return "Deferred("+this.id+", "+_281+")";=0A=
},toString:MochiKit.Base.forwardCall("repr"),_nextId:MochiKit.Base.counte=
r(),cancel:function(){=0A=
var self=3DMochiKit.Async;=0A=
if(this.fired=3D=3D-1){=0A=
if(this.canceller){=0A=
this.canceller(this);=0A=
}else{=0A=
this.silentlyCancelled=3Dtrue;=0A=
}=0A=
if(this.fired=3D=3D-1){=0A=
this.errback(new self.CancelledError(this));=0A=
}=0A=
}else{=0A=
if((this.fired=3D=3D=3D0)&&(this.results[0] instanceof self.Deferred)){=0A=
this.results[0].cancel();=0A=
}=0A=
}=0A=
},_pause:function(){=0A=
this.paused++;=0A=
},_unpause:function(){=0A=
this.paused--;=0A=
if((this.paused=3D=3D=3D0)&&(this.fired>=3D0)){=0A=
this._fire();=0A=
}=0A=
},_continue:function(res){=0A=
this._resback(res);=0A=
this._unpause();=0A=
},_resback:function(res){=0A=
this.fired=3D((res instanceof Error)?1:0);=0A=
this.results[this.fired]=3Dres;=0A=
this._fire();=0A=
},_check:function(){=0A=
if(this.fired!=3D-1){=0A=
if(!this.silentlyCancelled){=0A=
throw new MochiKit.Async.AlreadyCalledError(this);=0A=
}=0A=
this.silentlyCancelled=3Dfalse;=0A=
return;=0A=
}=0A=
},callback:function(res){=0A=
this._check();=0A=
if(res instanceof MochiKit.Async.Deferred){=0A=
throw new Error("Deferred instances can only be chained if they are the =
result of a callback");=0A=
}=0A=
this._resback(res);=0A=
},errback:function(res){=0A=
this._check();=0A=
var self=3DMochiKit.Async;=0A=
if(res instanceof self.Deferred){=0A=
throw new Error("Deferred instances can only be chained if they are the =
result of a callback");=0A=
}=0A=
if(!(res instanceof Error)){=0A=
res=3Dnew self.GenericError(res);=0A=
}=0A=
this._resback(res);=0A=
},addBoth:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(fn,fn);=0A=
},addCallback:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(fn,null);=0A=
},addErrback:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(null,fn);=0A=
},addCallbacks:function(cb,eb){=0A=
if(this.chained){=0A=
throw new Error("Chained Deferreds can not be re-used");=0A=
}=0A=
this.chain.push([cb,eb]);=0A=
if(this.fired>=3D0){=0A=
this._fire();=0A=
}=0A=
return this;=0A=
},_fire:function(){=0A=
var _284=3Dthis.chain;=0A=
var _285=3Dthis.fired;=0A=
var res=3Dthis.results[_285];=0A=
var self=3Dthis;=0A=
var cb=3Dnull;=0A=
while(_284.length>0&&this.paused=3D=3D=3D0){=0A=
var pair=3D_284.shift();=0A=
var f=3Dpair[_285];=0A=
if(f=3D=3D=3Dnull){=0A=
continue;=0A=
}=0A=
try{=0A=
res=3Df(res);=0A=
_285=3D((res instanceof Error)?1:0);=0A=
if(res instanceof MochiKit.Async.Deferred){=0A=
cb=3Dfunction(res){=0A=
self._continue(res);=0A=
};=0A=
this._pause();=0A=
}=0A=
}=0A=
catch(err){=0A=
_285=3D1;=0A=
if(!(err instanceof Error)){=0A=
err=3Dnew MochiKit.Async.GenericError(err);=0A=
}=0A=
res=3Derr;=0A=
}=0A=
}=0A=
this.fired=3D_285;=0A=
this.results[_285]=3Dres;=0A=
if(cb&&this.paused){=0A=
res.addBoth(cb);=0A=
res.chained=3Dtrue;=0A=
}=0A=
}};=0A=
MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(){=0A=
return eval("("+arguments[0].responseText+")");=0A=
},succeed:function(_287){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
d.callback.apply(d,arguments);=0A=
return d;=0A=
},fail:function(_288){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
d.errback.apply(d,arguments);=0A=
return d;=0A=
},getXMLHttpRequest:function(){=0A=
var self=3Darguments.callee;=0A=
if(!self.XMLHttpRequest){=0A=
var _289=3D[function(){=0A=
return new XMLHttpRequest();=0A=
},function(){=0A=
return new ActiveXObject("Msxml2.XMLHTTP");=0A=
},function(){=0A=
return new ActiveXObject("Microsoft.XMLHTTP");=0A=
},function(){=0A=
return new ActiveXObject("Msxml2.XMLHTTP.4.0");=0A=
},function(){=0A=
throw new MochiKit.Async.BrowserComplianceError("Browser does not =
support XMLHttpRequest");=0A=
}];=0A=
for(var i=3D0;i<_289.length;i++){=0A=
var func=3D_289[i];=0A=
try{=0A=
self.XMLHttpRequest=3Dfunc;=0A=
return func();=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
return self.XMLHttpRequest();=0A=
},_nothing:function(){=0A=
},_xhr_onreadystatechange:function(d){=0A=
if(this.readyState=3D=3D4){=0A=
try{=0A=
this.onreadystatechange=3Dnull;=0A=
}=0A=
catch(e){=0A=
try{=0A=
this.onreadystatechange=3DMochiKit.Async._nothing;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
var _290=3Dnull;=0A=
try{=0A=
_290=3Dthis.status;=0A=
if(!_290&&MochiKit.Base.isNotEmpty(this.responseText)){=0A=
_290=3D304;=0A=
}=0A=
}=0A=
catch(e){=0A=
}=0A=
if(_290=3D=3D200||_290=3D=3D304){=0A=
d.callback(this);=0A=
}else{=0A=
var err=3Dnew MochiKit.Async.XMLHttpRequestError(this,"Request failed");=0A=
if(err.number){=0A=
d.errback(err);=0A=
}else{=0A=
d.errback(err);=0A=
}=0A=
}=0A=
}=0A=
},_xhr_canceller:function(req){=0A=
try{=0A=
req.onreadystatechange=3Dnull;=0A=
}=0A=
catch(e){=0A=
try{=0A=
req.onreadystatechange=3DMochiKit.Async._nothing;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
req.abort();=0A=
},sendXMLHttpRequest:function(req,_293){=0A=
if(typeof (_293)=3D=3D"undefined"||_293=3D=3D=3Dnull){=0A=
_293=3D"";=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Async;=0A=
var d=3Dnew self.Deferred(m.partial(self._xhr_canceller,req));=0A=
try{=0A=
req.onreadystatechange=3Dm.bind(self._xhr_onreadystatechange,req,d);=0A=
req.send(_293);=0A=
}=0A=
catch(e){=0A=
try{=0A=
req.onreadystatechange=3Dnull;=0A=
}=0A=
catch(ignore){=0A=
}=0A=
d.errback(e);=0A=
}=0A=
return d;=0A=
},doSimpleXMLHttpRequest:function(url){=0A=
var self=3DMochiKit.Async;=0A=
var req=3Dself.getXMLHttpRequest();=0A=
if(arguments.length>1){=0A=
var m=3DMochiKit.Base;=0A=
var qs=3Dm.queryString.apply(null,m.extend(null,arguments,1));=0A=
if(qs){=0A=
url+=3D"?"+qs;=0A=
}=0A=
}=0A=
req.open("GET",url,true);=0A=
return self.sendXMLHttpRequest(req);=0A=
},loadJSONDoc:function(url){=0A=
var self=3DMochiKit.Async;=0A=
var d=3Dself.doSimpleXMLHttpRequest.apply(self,arguments);=0A=
d=3Dd.addCallback(self.evalJSONRequest);=0A=
return d;=0A=
},wait:function(_296,_297){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_297)!=3D"undefined"){=0A=
d.addCallback(function(){=0A=
return _297;=0A=
});=0A=
}=0A=
var _298=3DsetTimeout(m.bind("callback",d),Math.floor(_296*1000));=0A=
d.canceller=3Dfunction(){=0A=
try{=0A=
clearTimeout(_298);=0A=
}=0A=
catch(e){=0A=
}=0A=
};=0A=
return d;=0A=
},callLater:function(_299,func){=0A=
var m=3DMochiKit.Base;=0A=
var _300=3Dm.partial.apply(m,m.extend(null,arguments,1));=0A=
return MochiKit.Async.wait(_299).addCallback(function(res){=0A=
return _300();=0A=
});=0A=
}});=0A=
MochiKit.Async.DeferredLock=3Dfunction(){=0A=
this.waiting=3D[];=0A=
this.locked=3Dfalse;=0A=
this.id=3Dthis._nextId();=0A=
};=0A=
MochiKit.Async.DeferredLock.prototype=3D{__class__:MochiKit.Async.Deferre=
dLock,acquire:function(){=0A=
d=3Dnew MochiKit.Async.Deferred();=0A=
if(this.locked){=0A=
this.waiting.push(d);=0A=
}else{=0A=
this.locked=3Dtrue;=0A=
d.callback(this);=0A=
}=0A=
return d;=0A=
},release:function(){=0A=
if(!this.locked){=0A=
throw TypeError("Tried to release an unlocked DeferredLock");=0A=
}=0A=
this.locked=3Dfalse;=0A=
if(this.waiting.length>0){=0A=
this.locked=3Dtrue;=0A=
this.waiting.shift().callback(this);=0A=
}=0A=
},_nextId:MochiKit.Base.counter(),repr:function(){=0A=
var _301;=0A=
if(this.locked){=0A=
_301=3D"locked, "+this.waiting.length+" waiting";=0A=
}else{=0A=
_301=3D"unlocked";=0A=
}=0A=
return "DeferredLock("+this.id+", "+_301+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
MochiKit.Async.DeferredList=3Dfunction(list,_303,_304,_305,_306){=0A=
this.list=3Dlist;=0A=
this.resultList=3Dnew Array(this.list.length);=0A=
this.chain=3D[];=0A=
this.id=3Dthis._nextId();=0A=
this.fired=3D-1;=0A=
this.paused=3D0;=0A=
this.results=3D[null,null];=0A=
this.canceller=3D_306;=0A=
this.silentlyCancelled=3Dfalse;=0A=
if(this.list.length=3D=3D=3D0&&!_303){=0A=
this.callback(this.resultList);=0A=
}=0A=
this.finishedCount=3D0;=0A=
this.fireOnOneCallback=3D_303;=0A=
this.fireOnOneErrback=3D_304;=0A=
this.consumeErrors=3D_305;=0A=
var _307=3D0;=0A=
MochiKit.Base.map(MochiKit.Base.bind(function(d){=0A=
d.addCallback(MochiKit.Base.bind(this._cbDeferred,this),_307,true);=0A=
d.addErrback(MochiKit.Base.bind(this._cbDeferred,this),_307,false);=0A=
_307+=3D1;=0A=
},this),this.list);=0A=
};=0A=
MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,MochiKit.Async=
.Deferred.prototype);=0A=
MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,{_cbDeferred:f=
unction(_308,_309,_310){=0A=
this.resultList[_308]=3D[_309,_310];=0A=
this.finishedCount+=3D1;=0A=
if(this.fired!=3D=3D0){=0A=
if(_309&&this.fireOnOneCallback){=0A=
this.callback([_308,_310]);=0A=
}else{=0A=
if(!_309&&this.fireOnOneErrback){=0A=
this.errback(_310);=0A=
}else{=0A=
if(this.finishedCount=3D=3Dthis.list.length){=0A=
this.callback(this.resultList);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
if(!_309&&this.consumeErrors){=0A=
_310=3Dnull;=0A=
}=0A=
return _310;=0A=
}});=0A=
MochiKit.Async.gatherResults=3Dfunction(_311){=0A=
var d=3Dnew MochiKit.Async.DeferredList(_311,false,true,false);=0A=
d.addCallback(function(_312){=0A=
var ret=3D[];=0A=
for(var i=3D0;i<_312.length;i++){=0A=
ret.push(_312[i][1]);=0A=
}=0A=
return ret;=0A=
});=0A=
return d;=0A=
};=0A=
MochiKit.Async.maybeDeferred=3Dfunction(func){=0A=
var self=3DMochiKit.Async;=0A=
var _313;=0A=
try{=0A=
var r=3Dfunc.apply(null,MochiKit.Base.extend([],arguments,1));=0A=
if(r instanceof self.Deferred){=0A=
_313=3Dr;=0A=
}else{=0A=
if(r instanceof Error){=0A=
_313=3Dself.fail(r);=0A=
}else{=0A=
_313=3Dself.succeed(r);=0A=
}=0A=
}=0A=
}=0A=
catch(e){=0A=
_313=3Dself.fail(e);=0A=
}=0A=
return _313;=0A=
};=0A=
MochiKit.Async.EXPORT=3D["AlreadyCalledError","CancelledError","BrowserCo=
mplianceError","GenericError","XMLHttpRequestError","Deferred","succeed",=
"fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait",=
"callLater","sendXMLHttpRequest","DeferredLock","DeferredList","gatherRes=
ults","maybeDeferred"];=0A=
MochiKit.Async.EXPORT_OK=3D["evalJSONRequest"];=0A=
MochiKit.Async.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
var ne=3Dm.partial(m._newNamedError,this);=0A=
ne("AlreadyCalledError",function(_316){=0A=
this.deferred=3D_316;=0A=
});=0A=
ne("CancelledError",function(_317){=0A=
this.deferred=3D_317;=0A=
});=0A=
ne("BrowserComplianceError",function(msg){=0A=
this.message=3Dmsg;=0A=
});=0A=
ne("GenericError",function(msg){=0A=
this.message=3Dmsg;=0A=
});=0A=
ne("XMLHttpRequestError",function(req,msg){=0A=
this.req=3Dreq;=0A=
this.message=3Dmsg;=0A=
try{=0A=
this.number=3Dreq.status;=0A=
}=0A=
catch(e){=0A=
}=0A=
});=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Async.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Async);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.DOM");=0A=
dojo.require("MochiKit.Iter");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Iter",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Iter)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.DOM depends on MochiKit.Iter!";=0A=
}=0A=
if(typeof (MochiKit.DOM)=3D=3D"undefined"){=0A=
MochiKit.DOM=3D{};=0A=
}=0A=
MochiKit.DOM.NAME=3D"MochiKit.DOM";=0A=
MochiKit.DOM.VERSION=3D"1.3.1";=0A=
MochiKit.DOM.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.DOM.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.DOM.EXPORT=3D["formContents","currentWindow","currentDocument","=
withWindow","withDocument","registerDOMConverter","coerceToDOM","createDO=
M","createDOMFunc","getNodeAttribute","setNodeAttribute","updateNodeAttri=
butes","appendChildNodes","replaceChildNodes","removeElement","swapDOM","=
BUTTON","TT","PRE","H1","H2","H3","BR","CANVAS","HR","LABEL","TEXTAREA","=
FORM","STRONG","SELECT","OPTION","OPTGROUP","LEGEND","FIELDSET","P","UL",=
"OL","LI","TD","TR","THEAD","TBODY","TFOOT","TABLE","TH","INPUT","SPAN","=
A","DIV","IMG","getElement","$","computedStyle","getElementsByTagAndClass=
Name","addToCallStack","addLoadEvent","focusOnLoad","setElementClass","to=
ggleElementClass","addElementClass","removeElementClass","swapElementClas=
s","hasElementClass","escapeHTML","toHTML","emitHTML","setDisplayForEleme=
nt","hideElement","showElement","scrapeText","elementDimensions","element=
Position","setElementDimensions","setElementPosition","getViewportDimensi=
ons","setOpacity"];=0A=
MochiKit.DOM.EXPORT_OK=3D["domConverters"];=0A=
MochiKit.DOM.Dimensions=3Dfunction(w,h){=0A=
this.w=3Dw;=0A=
this.h=3Dh;=0A=
};=0A=
MochiKit.DOM.Dimensions.prototype.repr=3Dfunction(){=0A=
var repr=3DMochiKit.Base.repr;=0A=
return "{w: "+repr(this.w)+", h: "+repr(this.h)+"}";=0A=
};=0A=
MochiKit.DOM.Coordinates=3Dfunction(x,y){=0A=
this.x=3Dx;=0A=
this.y=3Dy;=0A=
};=0A=
MochiKit.DOM.Coordinates.prototype.repr=3Dfunction(){=0A=
var repr=3DMochiKit.Base.repr;=0A=
return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";=0A=
};=0A=
MochiKit.DOM.Coordinates.prototype.toString=3Dfunction(){=0A=
return this.repr();=0A=
};=0A=
MochiKit.Base.update(MochiKit.DOM,{setOpacity:function(elem,o){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"opacity":o,"-moz-opacit=
y":o,"-khtml-opacity":o,"filter":" alpha(opacity=3D"+(o*100)+")"}});=0A=
},getViewportDimensions:function(){=0A=
var d=3Dnew MochiKit.DOM.Dimensions();=0A=
var w=3DMochiKit.DOM._window;=0A=
var b=3DMochiKit.DOM._document.body;=0A=
if(w.innerWidth){=0A=
d.w=3Dw.innerWidth;=0A=
d.h=3Dw.innerHeight;=0A=
}else{=0A=
if(b.parentElement.clientWidth){=0A=
d.w=3Db.parentElement.clientWidth;=0A=
d.h=3Db.parentElement.clientHeight;=0A=
}else{=0A=
if(b&&b.clientWidth){=0A=
d.w=3Db.clientWidth;=0A=
d.h=3Db.clientHeight;=0A=
}=0A=
}=0A=
}=0A=
return d;=0A=
},elementDimensions:function(elem){=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (elem.w)=3D=3D"number"||typeof (elem.h)=3D=3D"number"){=0A=
return new self.Dimensions(elem.w||0,elem.h||0);=0A=
}=0A=
elem=3Dself.getElement(elem);=0A=
if(!elem){=0A=
return undefined;=0A=
}=0A=
if(self.computedStyle(elem,"display")!=3D"none"){=0A=
return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);=0A=
}=0A=
var s=3Delem.style;=0A=
var _322=3Ds.visibility;=0A=
var _323=3Ds.position;=0A=
s.visibility=3D"hidden";=0A=
s.position=3D"absolute";=0A=
s.display=3D"";=0A=
var _324=3Delem.offsetWidth;=0A=
var _325=3Delem.offsetHeight;=0A=
s.display=3D"none";=0A=
s.position=3D_323;=0A=
s.visibility=3D_322;=0A=
return new self.Dimensions(_324,_325);=0A=
},elementPosition:function(elem,_326){=0A=
var self=3DMochiKit.DOM;=0A=
elem=3Dself.getElement(elem);=0A=
if(!elem){=0A=
return undefined;=0A=
}=0A=
var c=3Dnew self.Coordinates(0,0);=0A=
if(elem.x&&elem.y){=0A=
c.x+=3Delem.x||0;=0A=
c.y+=3Delem.y||0;=0A=
return c;=0A=
}else{=0A=
if(elem.parentNode=3D=3D=3Dnull||self.computedStyle(elem,"display")=3D=3D=
"none"){=0A=
return undefined;=0A=
}=0A=
}=0A=
var box=3Dnull;=0A=
var _329=3Dnull;=0A=
var d=3DMochiKit.DOM._document;=0A=
var de=3Dd.documentElement;=0A=
var b=3Dd.body;=0A=
if(elem.getBoundingClientRect){=0A=
box=3Delem.getBoundingClientRect();=0A=
c.x+=3Dbox.left+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clientLef=
t);=0A=
c.y+=3Dbox.top+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientTop);=0A=
}else{=0A=
if(d.getBoxObjectFor){=0A=
box=3Dd.getBoxObjectFor(elem);=0A=
c.x+=3Dbox.x;=0A=
c.y+=3Dbox.y;=0A=
}else{=0A=
if(elem.offsetParent){=0A=
c.x+=3Delem.offsetLeft;=0A=
c.y+=3Delem.offsetTop;=0A=
_329=3Delem.offsetParent;=0A=
if(_329!=3Delem){=0A=
while(_329){=0A=
c.x+=3D_329.offsetLeft;=0A=
c.y+=3D_329.offsetTop;=0A=
_329=3D_329.offsetParent;=0A=
}=0A=
}=0A=
var ua=3Dnavigator.userAgent.toLowerCase();=0A=
if((typeof =
(opera)!=3D"undefined"&&parseFloat(opera.version())<9)||(ua.indexOf("safa=
ri")!=3D-1&&self.computedStyle(elem,"position")=3D=3D"absolute")){=0A=
c.x-=3Db.offsetLeft;=0A=
c.y-=3Db.offsetTop;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
if(typeof (_326)!=3D"undefined"){=0A=
_326=3Darguments.callee(_326);=0A=
if(_326){=0A=
c.x-=3D(_326.x||0);=0A=
c.y-=3D(_326.y||0);=0A=
}=0A=
}=0A=
if(elem.parentNode){=0A=
_329=3Delem.parentNode;=0A=
}else{=0A=
_329=3Dnull;=0A=
}=0A=
while(_329&&_329.tagName!=3D"BODY"&&_329.tagName!=3D"HTML"){=0A=
c.x-=3D_329.scrollLeft;=0A=
c.y-=3D_329.scrollTop;=0A=
if(_329.parentNode){=0A=
_329=3D_329.parentNode;=0A=
}else{=0A=
_329=3Dnull;=0A=
}=0A=
}=0A=
return c;=0A=
},setElementDimensions:function(elem,_332,_333){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
if(typeof (_333)=3D=3D"undefined"){=0A=
_333=3D"px";=0A=
}=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"width":_332.w+_333,"hei=
ght":_332.h+_333}});=0A=
},setElementPosition:function(elem,_334,_335){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
if(typeof (_335)=3D=3D"undefined"){=0A=
_335=3D"px";=0A=
}=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"left":_334.x+_335,"top"=
:_334.y+_335}});=0A=
},currentWindow:function(){=0A=
return MochiKit.DOM._window;=0A=
},currentDocument:function(){=0A=
return MochiKit.DOM._document;=0A=
},withWindow:function(win,func){=0A=
var self=3DMochiKit.DOM;=0A=
var _337=3Dself._document;=0A=
var _338=3Dself._win;=0A=
var rval;=0A=
try{=0A=
self._window=3Dwin;=0A=
self._document=3Dwin.document;=0A=
rval=3Dfunc();=0A=
}=0A=
catch(e){=0A=
self._window=3D_338;=0A=
self._document=3D_337;=0A=
throw e;=0A=
}=0A=
self._window=3D_338;=0A=
self._document=3D_337;=0A=
return rval;=0A=
},formContents:function(elem){=0A=
var _339=3D[];=0A=
var _340=3D[];=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (elem)=3D=3D"undefined"||elem=3D=3D=3Dnull){=0A=
elem=3Dself._document;=0A=
}else{=0A=
elem=3Dself.getElement(elem);=0A=
}=0A=
m.nodeWalk(elem,function(elem){=0A=
var name=3Delem.name;=0A=
if(m.isNotEmpty(name)){=0A=
var _341=3Delem.nodeName;=0A=
if(_341=3D=3D"INPUT"&&(elem.type=3D=3D"radio"||elem.type=3D=3D"checkbox")=
&&!elem.checked){=0A=
return null;=0A=
}=0A=
if(_341=3D=3D"SELECT"){=0A=
if(elem.selectedIndex>=3D0){=0A=
var opt=3Delem.options[elem.selectedIndex];=0A=
_339.push(name);=0A=
_340.push((opt.value)?opt.value:opt.text);=0A=
return null;=0A=
}=0A=
_339.push(name);=0A=
_340.push("");=0A=
return null;=0A=
}=0A=
if(_341=3D=3D"FORM"||_341=3D=3D"P"||_341=3D=3D"SPAN"||_341=3D=3D"DIV"){=0A=
return elem.childNodes;=0A=
}=0A=
_339.push(name);=0A=
_340.push(elem.value||"");=0A=
return null;=0A=
}=0A=
return elem.childNodes;=0A=
});=0A=
return [_339,_340];=0A=
},withDocument:function(doc,func){=0A=
var self=3DMochiKit.DOM;=0A=
var _344=3Dself._document;=0A=
var rval;=0A=
try{=0A=
self._document=3Ddoc;=0A=
rval=3Dfunc();=0A=
}=0A=
catch(e){=0A=
self._document=3D_344;=0A=
throw e;=0A=
}=0A=
self._document=3D_344;=0A=
return rval;=0A=
},registerDOMConverter:function(name,_345,wrap,_346){=0A=
MochiKit.DOM.domConverters.register(name,_345,wrap,_346);=0A=
},coerceToDOM:function(node,ctx){=0A=
var im=3DMochiKit.Iter;=0A=
var self=3DMochiKit.DOM;=0A=
var iter=3Dim.iter;=0A=
var _350=3Dim.repeat;=0A=
var imap=3Dim.imap;=0A=
var _352=3Dself.domConverters;=0A=
var _353=3Dself.coerceToDOM;=0A=
var _354=3DMochiKit.Base.NotFound;=0A=
while(true){=0A=
if(typeof (node)=3D=3D"undefined"||node=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
if(typeof (node.nodeType)!=3D"undefined"&&node.nodeType>0){=0A=
return node;=0A=
}=0A=
if(typeof (node)=3D=3D"number"||typeof (node)=3D=3D"boolean"){=0A=
node=3Dnode.toString();=0A=
}=0A=
if(typeof (node)=3D=3D"string"){=0A=
return self._document.createTextNode(node);=0A=
}=0A=
if(typeof (node.toDOM)=3D=3D"function"){=0A=
node=3Dnode.toDOM(ctx);=0A=
continue;=0A=
}=0A=
if(typeof (node)=3D=3D"function"){=0A=
node=3Dnode(ctx);=0A=
continue;=0A=
}=0A=
var _355=3Dnull;=0A=
try{=0A=
_355=3Diter(node);=0A=
}=0A=
catch(e){=0A=
}=0A=
if(_355){=0A=
return imap(_353,_355,_350(ctx));=0A=
}=0A=
try{=0A=
node=3D_352.match(node,ctx);=0A=
continue;=0A=
}=0A=
catch(e){=0A=
if(e!=3D_354){=0A=
throw e;=0A=
}=0A=
}=0A=
return self._document.createTextNode(node.toString());=0A=
}=0A=
return undefined;=0A=
},setNodeAttribute:function(node,attr,_357){=0A=
var o=3D{};=0A=
o[attr]=3D_357;=0A=
try{=0A=
return MochiKit.DOM.updateNodeAttributes(node,o);=0A=
}=0A=
catch(e){=0A=
}=0A=
return null;=0A=
},getNodeAttribute:function(node,attr){=0A=
var self=3DMochiKit.DOM;=0A=
var _358=3Dself.attributeArray.renames[attr];=0A=
node=3Dself.getElement(node);=0A=
try{=0A=
if(_358){=0A=
return node[_358];=0A=
}=0A=
return node.getAttribute(attr);=0A=
}=0A=
catch(e){=0A=
}=0A=
return null;=0A=
},updateNodeAttributes:function(node,_359){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
}=0A=
if(_359){=0A=
var _360=3DMochiKit.Base.updatetree;=0A=
if(self.attributeArray.compliant){=0A=
for(var k in _359){=0A=
var v=3D_359[k];=0A=
if(typeof (v)=3D=3D"object"&&typeof (elem[k])=3D=3D"object"){=0A=
_360(elem[k],v);=0A=
}else{=0A=
if(k.substring(0,2)=3D=3D"on"){=0A=
if(typeof (v)=3D=3D"string"){=0A=
v=3Dnew Function(v);=0A=
}=0A=
elem[k]=3Dv;=0A=
}else{=0A=
elem.setAttribute(k,v);=0A=
}=0A=
}=0A=
}=0A=
}else{=0A=
var _361=3Dself.attributeArray.renames;=0A=
for(k in _359){=0A=
v=3D_359[k];=0A=
var _362=3D_361[k];=0A=
if(k=3D=3D"style"&&typeof (v)=3D=3D"string"){=0A=
elem.style.cssText=3Dv;=0A=
}else{=0A=
if(typeof (_362)=3D=3D"string"){=0A=
elem[_362]=3Dv;=0A=
}else{=0A=
if(typeof (elem[k])=3D=3D"object"&&typeof (v)=3D=3D"object"){=0A=
_360(elem[k],v);=0A=
}else{=0A=
if(k.substring(0,2)=3D=3D"on"){=0A=
if(typeof (v)=3D=3D"string"){=0A=
v=3Dnew Function(v);=0A=
}=0A=
elem[k]=3Dv;=0A=
}else{=0A=
elem.setAttribute(k,v);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return elem;=0A=
},appendChildNodes:function(node){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
}=0A=
var =
_363=3D[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];=0A=
var _364=3DMochiKit.Base.concat;=0A=
while(_363.length){=0A=
var n=3D_363.shift();=0A=
if(typeof (n)=3D=3D"undefined"||n=3D=3D=3Dnull){=0A=
}else{=0A=
if(typeof (n.nodeType)=3D=3D"number"){=0A=
elem.appendChild(n);=0A=
}else{=0A=
_363=3D_364(n,_363);=0A=
}=0A=
}=0A=
}=0A=
return elem;=0A=
},replaceChildNodes:function(node){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
arguments[0]=3Delem;=0A=
}=0A=
var _365;=0A=
while((_365=3Delem.firstChild)){=0A=
elem.removeChild(_365);=0A=
}=0A=
if(arguments.length<2){=0A=
return elem;=0A=
}else{=0A=
return self.appendChildNodes.apply(this,arguments);=0A=
}=0A=
},createDOM:function(name,_366){=0A=
var elem;=0A=
var self=3DMochiKit.DOM;=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_366)=3D=3D"string"||typeof (_366)=3D=3D"number"){=0A=
var args=3Dm.extend([name,null],arguments,1);=0A=
return arguments.callee.apply(this,args);=0A=
}=0A=
if(typeof (name)=3D=3D"string"){=0A=
if(_366&&"name" in _366&&!self.attributeArray.compliant){=0A=
name=3D("<"+name+" name=3D\""+self.escapeHTML(_366.name)+"\">");=0A=
}=0A=
elem=3Dself._document.createElement(name);=0A=
}else{=0A=
elem=3Dname;=0A=
}=0A=
if(_366){=0A=
self.updateNodeAttributes(elem,_366);=0A=
}=0A=
if(arguments.length<=3D2){=0A=
return elem;=0A=
}else{=0A=
var args=3Dm.extend([elem],arguments,2);=0A=
return self.appendChildNodes.apply(this,args);=0A=
}=0A=
},createDOMFunc:function(){=0A=
var m=3DMochiKit.Base;=0A=
return =
m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));=0A=
},swapDOM:function(dest,src){=0A=
var self=3DMochiKit.DOM;=0A=
dest=3Dself.getElement(dest);=0A=
var _369=3Ddest.parentNode;=0A=
if(src){=0A=
src=3Dself.getElement(src);=0A=
_369.replaceChild(src,dest);=0A=
}else{=0A=
_369.removeChild(dest);=0A=
}=0A=
return src;=0A=
},getElement:function(id){=0A=
var self=3DMochiKit.DOM;=0A=
if(arguments.length=3D=3D1){=0A=
return ((typeof =
(id)=3D=3D"string")?self._document.getElementById(id):id);=0A=
}else{=0A=
return MochiKit.Base.map(self.getElement,arguments);=0A=
}=0A=
},computedStyle:function(_371,_372,_373){=0A=
if(arguments.length=3D=3D2){=0A=
_373=3D_372;=0A=
}=0A=
var self=3DMochiKit.DOM;=0A=
var el=3Dself.getElement(_371);=0A=
var _375=3Dself._document;=0A=
if(!el||el=3D=3D_375){=0A=
return undefined;=0A=
}=0A=
if(el.currentStyle){=0A=
return el.currentStyle[_372];=0A=
}=0A=
if(typeof (_375.defaultView)=3D=3D"undefined"){=0A=
return undefined;=0A=
}=0A=
if(_375.defaultView=3D=3D=3Dnull){=0A=
return undefined;=0A=
}=0A=
var _376=3D_375.defaultView.getComputedStyle(el,null);=0A=
if(typeof (_376)=3D=3D"undefined"||_376=3D=3D=3Dnull){=0A=
return undefined;=0A=
}=0A=
return _376.getPropertyValue(_373);=0A=
},getElementsByTagAndClassName:function(_377,_378,_379){=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (_377)=3D=3D"undefined"||_377=3D=3D=3Dnull){=0A=
_377=3D"*";=0A=
}=0A=
if(typeof (_379)=3D=3D"undefined"||_379=3D=3D=3Dnull){=0A=
_379=3Dself._document;=0A=
}=0A=
_379=3Dself.getElement(_379);=0A=
var _380=3D(_379.getElementsByTagName(_377)||self._document.all);=0A=
if(typeof (_378)=3D=3D"undefined"||_378=3D=3D=3Dnull){=0A=
return MochiKit.Base.extend(null,_380);=0A=
}=0A=
var _381=3D[];=0A=
for(var i=3D0;i<_380.length;i++){=0A=
var _382=3D_380[i];=0A=
var _383=3D_382.className.split(" ");=0A=
for(var j=3D0;j<_383.length;j++){=0A=
if(_383[j]=3D=3D_378){=0A=
_381.push(_382);=0A=
break;=0A=
}=0A=
}=0A=
}=0A=
return _381;=0A=
},_newCallStack:function(path,once){=0A=
var rval=3Dfunction(){=0A=
var _386=3Darguments.callee.callStack;=0A=
for(var i=3D0;i<_386.length;i++){=0A=
if(_386[i].apply(this,arguments)=3D=3D=3Dfalse){=0A=
break;=0A=
}=0A=
}=0A=
if(once){=0A=
try{=0A=
this[path]=3Dnull;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
};=0A=
rval.callStack=3D[];=0A=
return rval;=0A=
},addToCallStack:function(_387,path,func,once){=0A=
var self=3DMochiKit.DOM;=0A=
var _388=3D_387[path];=0A=
var _389=3D_388;=0A=
if(!(typeof (_388)=3D=3D"function"&&typeof =
(_388.callStack)=3D=3D"object"&&_388.callStack!=3D=3Dnull)){=0A=
_389=3Dself._newCallStack(path,once);=0A=
if(typeof (_388)=3D=3D"function"){=0A=
_389.callStack.push(_388);=0A=
}=0A=
_387[path]=3D_389;=0A=
}=0A=
_389.callStack.push(func);=0A=
},addLoadEvent:function(func){=0A=
var self=3DMochiKit.DOM;=0A=
self.addToCallStack(self._window,"onload",func,true);=0A=
},focusOnLoad:function(_390){=0A=
var self=3DMochiKit.DOM;=0A=
self.addLoadEvent(function(){=0A=
_390=3Dself.getElement(_390);=0A=
if(_390){=0A=
_390.focus();=0A=
}=0A=
});=0A=
},setElementClass:function(_391,_392){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_391);=0A=
if(self.attributeArray.compliant){=0A=
obj.setAttribute("class",_392);=0A=
}else{=0A=
obj.setAttribute("className",_392);=0A=
}=0A=
},toggleElementClass:function(_393){=0A=
var self=3DMochiKit.DOM;=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var obj=3Dself.getElement(arguments[i]);=0A=
if(!self.addElementClass(obj,_393)){=0A=
self.removeElementClass(obj,_393);=0A=
}=0A=
}=0A=
},addElementClass:function(_394,_395){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_394);=0A=
var cls=3Dobj.className;=0A=
if(cls.length=3D=3D=3D0){=0A=
self.setElementClass(obj,_395);=0A=
return true;=0A=
}=0A=
if(cls=3D=3D_395){=0A=
return false;=0A=
}=0A=
var _397=3Dobj.className.split(" ");=0A=
for(var i=3D0;i<_397.length;i++){=0A=
if(_397[i]=3D=3D_395){=0A=
return false;=0A=
}=0A=
}=0A=
self.setElementClass(obj,cls+" "+_395);=0A=
return true;=0A=
},removeElementClass:function(_398,_399){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_398);=0A=
var cls=3Dobj.className;=0A=
if(cls.length=3D=3D=3D0){=0A=
return false;=0A=
}=0A=
if(cls=3D=3D_399){=0A=
self.setElementClass(obj,"");=0A=
return true;=0A=
}=0A=
var _400=3Dobj.className.split(" ");=0A=
for(var i=3D0;i<_400.length;i++){=0A=
if(_400[i]=3D=3D_399){=0A=
_400.splice(i,1);=0A=
self.setElementClass(obj,_400.join(" "));=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},swapElementClass:function(_401,_402,_403){=0A=
var obj=3DMochiKit.DOM.getElement(_401);=0A=
var res=3DMochiKit.DOM.removeElementClass(obj,_402);=0A=
if(res){=0A=
MochiKit.DOM.addElementClass(obj,_403);=0A=
}=0A=
return res;=0A=
},hasElementClass:function(_404,_405){=0A=
var obj=3DMochiKit.DOM.getElement(_404);=0A=
var _406=3Dobj.className.split(" ");=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var good=3Dfalse;=0A=
for(var j=3D0;j<_406.length;j++){=0A=
if(_406[j]=3D=3Darguments[i]){=0A=
good=3Dtrue;=0A=
break;=0A=
}=0A=
}=0A=
if(!good){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},escapeHTML:function(s){=0A=
return =
s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").repla=
ce(/>/g,"&gt;");=0A=
},toHTML:function(dom){=0A=
return MochiKit.DOM.emitHTML(dom).join("");=0A=
},emitHTML:function(dom,lst){=0A=
if(typeof (lst)=3D=3D"undefined"||lst=3D=3D=3Dnull){=0A=
lst=3D[];=0A=
}=0A=
var _409=3D[dom];=0A=
var self=3DMochiKit.DOM;=0A=
var _410=3Dself.escapeHTML;=0A=
var _411=3Dself.attributeArray;=0A=
while(_409.length){=0A=
dom=3D_409.pop();=0A=
if(typeof (dom)=3D=3D"string"){=0A=
lst.push(dom);=0A=
}else{=0A=
if(dom.nodeType=3D=3D1){=0A=
lst.push("<"+dom.nodeName.toLowerCase());=0A=
var _412=3D[];=0A=
var _413=3D_411(dom);=0A=
for(var i=3D0;i<_413.length;i++){=0A=
var a=3D_413[i];=0A=
_412.push([" ",a.name,"=3D\"",_410(a.value),"\""]);=0A=
}=0A=
_412.sort();=0A=
for(i=3D0;i<_412.length;i++){=0A=
var _414=3D_412[i];=0A=
for(var j=3D0;j<_414.length;j++){=0A=
lst.push(_414[j]);=0A=
}=0A=
}=0A=
if(dom.hasChildNodes()){=0A=
lst.push(">");=0A=
_409.push("</"+dom.nodeName.toLowerCase()+">");=0A=
var _415=3Ddom.childNodes;=0A=
for(i=3D_415.length-1;i>=3D0;i--){=0A=
_409.push(_415[i]);=0A=
}=0A=
}else{=0A=
lst.push("/>");=0A=
}=0A=
}else{=0A=
if(dom.nodeType=3D=3D3){=0A=
lst.push(_410(dom.nodeValue));=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return lst;=0A=
},setDisplayForElement:function(_416,_417){=0A=
var m=3DMochiKit.Base;=0A=
var _418=3Dm.extend(null,arguments,1);=0A=
MochiKit.Iter.forEach(m.filter(null,m.map(MochiKit.DOM.getElement,_418)),=
function(_417){=0A=
_417.style.display=3D_416;=0A=
});=0A=
},scrapeText:function(node,_419){=0A=
var rval=3D[];=0A=
(function(node){=0A=
var cn=3Dnode.childNodes;=0A=
if(cn){=0A=
for(var i=3D0;i<cn.length;i++){=0A=
arguments.callee.call(this,cn[i]);=0A=
}=0A=
}=0A=
var _421=3Dnode.nodeValue;=0A=
if(typeof (_421)=3D=3D"string"){=0A=
rval.push(_421);=0A=
}=0A=
})(MochiKit.DOM.getElement(node));=0A=
if(_419){=0A=
return rval;=0A=
}else{=0A=
return rval.join("");=0A=
}=0A=
},__new__:function(win){=0A=
var m=3DMochiKit.Base;=0A=
this._document=3Ddocument;=0A=
this._window=3Dwin;=0A=
this.domConverters=3Dnew m.AdapterRegistry();=0A=
var _422=3Dthis._document.createElement("span");=0A=
var _423;=0A=
if(_422&&_422.attributes&&_422.attributes.length>0){=0A=
var _424=3Dm.filter;=0A=
_423=3Dfunction(node){=0A=
return _424(_423.ignoreAttrFilter,node.attributes);=0A=
};=0A=
_423.ignoreAttr=3D{};=0A=
MochiKit.Iter.forEach(_422.attributes,function(a){=0A=
_423.ignoreAttr[a.name]=3Da.value;=0A=
});=0A=
_423.ignoreAttrFilter=3Dfunction(a){=0A=
return (_423.ignoreAttr[a.name]!=3Da.value);=0A=
};=0A=
_423.compliant=3Dfalse;=0A=
_423.renames=3D{"class":"className","checked":"defaultChecked","usemap":"=
useMap","for":"htmlFor"};=0A=
}else{=0A=
_423=3Dfunction(node){=0A=
return node.attributes;=0A=
};=0A=
_423.compliant=3Dtrue;=0A=
_423.renames=3D{};=0A=
}=0A=
this.attributeArray=3D_423;=0A=
var _425=3Dthis.createDOMFunc;=0A=
this.UL=3D_425("ul");=0A=
this.OL=3D_425("ol");=0A=
this.LI=3D_425("li");=0A=
this.TD=3D_425("td");=0A=
this.TR=3D_425("tr");=0A=
this.TBODY=3D_425("tbody");=0A=
this.THEAD=3D_425("thead");=0A=
this.TFOOT=3D_425("tfoot");=0A=
this.TABLE=3D_425("table");=0A=
this.TH=3D_425("th");=0A=
this.INPUT=3D_425("input");=0A=
this.SPAN=3D_425("span");=0A=
this.A=3D_425("a");=0A=
this.DIV=3D_425("div");=0A=
this.IMG=3D_425("img");=0A=
this.BUTTON=3D_425("button");=0A=
this.TT=3D_425("tt");=0A=
this.PRE=3D_425("pre");=0A=
this.H1=3D_425("h1");=0A=
this.H2=3D_425("h2");=0A=
this.H3=3D_425("h3");=0A=
this.BR=3D_425("br");=0A=
this.HR=3D_425("hr");=0A=
this.LABEL=3D_425("label");=0A=
this.TEXTAREA=3D_425("textarea");=0A=
this.FORM=3D_425("form");=0A=
this.P=3D_425("p");=0A=
this.SELECT=3D_425("select");=0A=
this.OPTION=3D_425("option");=0A=
this.OPTGROUP=3D_425("optgroup");=0A=
this.LEGEND=3D_425("legend");=0A=
this.FIELDSET=3D_425("fieldset");=0A=
this.STRONG=3D_425("strong");=0A=
this.CANVAS=3D_425("canvas");=0A=
this.hideElement=3Dm.partial(this.setDisplayForElement,"none");=0A=
this.showElement=3Dm.partial(this.setDisplayForElement,"block");=0A=
this.removeElement=3Dthis.swapDOM;=0A=
this.$=3Dthis.getElement;=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
}});=0A=
MochiKit.DOM.__new__(((typeof (window)=3D=3D"undefined")?this:window));=0A=
if(!MochiKit.__compat__){=0A=
withWindow=3DMochiKit.DOM.withWindow;=0A=
withDocument=3DMochiKit.DOM.withDocument;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.DOM);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.LoggingPane");=0A=
dojo.require("MochiKit.Logging");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Logging",[]);=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"||typeof =
(MochiKit.Logging)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.LoggingPane depends on MochiKit.Base and =
MochiKit.Logging!";=0A=
}=0A=
if(typeof (MochiKit.LoggingPane)=3D=3D"undefined"){=0A=
MochiKit.LoggingPane=3D{};=0A=
}=0A=
MochiKit.LoggingPane.NAME=3D"MochiKit.LoggingPane";=0A=
MochiKit.LoggingPane.VERSION=3D"1.3.1";=0A=
MochiKit.LoggingPane.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.LoggingPane.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.LoggingPane.createLoggingPane=3Dfunction(_426){=0A=
var m=3DMochiKit.LoggingPane;=0A=
_426=3D!(!_426);=0A=
if(m._loggingPane&&m._loggingPane.inline!=3D_426){=0A=
m._loggingPane.closePane();=0A=
m._loggingPane=3Dnull;=0A=
}=0A=
if(!m._loggingPane||m._loggingPane.closed){=0A=
m._loggingPane=3Dnew m.LoggingPane(_426,MochiKit.Logging.logger);=0A=
}=0A=
return m._loggingPane;=0A=
};=0A=
MochiKit.LoggingPane.LoggingPane=3Dfunction(_427,_428){=0A=
if(typeof (_428)=3D=3D"undefined"||_428=3D=3D=3Dnull){=0A=
_428=3DMochiKit.Logging.logger;=0A=
}=0A=
this.logger=3D_428;=0A=
var _429=3DMochiKit.Base.update;=0A=
var _430=3DMochiKit.Base.updatetree;=0A=
var bind=3DMochiKit.Base.bind;=0A=
var _431=3DMochiKit.Base.clone;=0A=
var win=3Dwindow;=0A=
var uid=3D"_MochiKit_LoggingPane";=0A=
if(typeof (MochiKit.DOM)!=3D"undefined"){=0A=
win=3DMochiKit.DOM.currentWindow();=0A=
}=0A=
if(!_427){=0A=
var url=3Dwin.location.href.split("?")[0].replace(/[:\/.><&]/g,"_");=0A=
var name=3Duid+"_"+url;=0A=
var nwin=3Dwin.open("",name,"dependent,resizable,height=3D200");=0A=
if(!nwin){=0A=
alert("Not able to open debugging window due to pop-up blocking.");=0A=
return undefined;=0A=
}=0A=
nwin.document.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 =
Transitional//EN\" =
"+"\"http://www.w3.org/TR/html4/loose.dtd\">"+"<html><head><title>[MochiK=
it.LoggingPane]</title></head>"+"<body></body></html>");=0A=
nwin.document.close();=0A=
nwin.document.title+=3D" "+win.document.title;=0A=
win=3Dnwin;=0A=
}=0A=
var doc=3Dwin.document;=0A=
this.doc=3Ddoc;=0A=
var _434=3Ddoc.getElementById(uid);=0A=
var _435=3D!!_434;=0A=
if(_434&&typeof (_434.loggingPane)!=3D"undefined"){=0A=
_434.loggingPane.logger=3Dthis.logger;=0A=
_434.loggingPane.buildAndApplyFilter();=0A=
return _434.loggingPane;=0A=
}=0A=
if(_435){=0A=
var _436;=0A=
while((_436=3D_434.firstChild)){=0A=
_434.removeChild(_436);=0A=
}=0A=
}else{=0A=
_434=3Ddoc.createElement("div");=0A=
_434.id=3Duid;=0A=
}=0A=
_434.loggingPane=3Dthis;=0A=
var _437=3Ddoc.createElement("input");=0A=
var _438=3Ddoc.createElement("input");=0A=
var _439=3Ddoc.createElement("button");=0A=
var _440=3Ddoc.createElement("button");=0A=
var _441=3Ddoc.createElement("button");=0A=
var _442=3Ddoc.createElement("button");=0A=
var _443=3Ddoc.createElement("div");=0A=
var _444=3Ddoc.createElement("div");=0A=
var _445=3Duid+"_Listener";=0A=
this.colorTable=3D_431(this.colorTable);=0A=
var _446=3D[];=0A=
var _447=3Dnull;=0A=
var _448=3Dfunction(msg){=0A=
var _449=3Dmsg.level;=0A=
if(typeof (_449)=3D=3D"number"){=0A=
_449=3DMochiKit.Logging.LogLevel[_449];=0A=
}=0A=
return _449;=0A=
};=0A=
var _450=3Dfunction(msg){=0A=
return msg.info.join(" ");=0A=
};=0A=
var _451=3Dbind(function(msg){=0A=
var _452=3D_448(msg);=0A=
var text=3D_450(msg);=0A=
var c=3Dthis.colorTable[_452];=0A=
var p=3Ddoc.createElement("span");=0A=
p.className=3D"MochiKit-LogMessage MochiKit-LogLevel-"+_452;=0A=
p.style.cssText=3D"margin: 0px; white-space: -moz-pre-wrap; white-space: =
-o-pre-wrap; white-space: pre-wrap; white-space: pre-line; word-wrap: =
break-word; wrap-option: emergency; color: "+c;=0A=
p.appendChild(doc.createTextNode(_452+": "+text));=0A=
_444.appendChild(p);=0A=
_444.appendChild(doc.createElement("br"));=0A=
if(_443.offsetHeight>_443.scrollHeight){=0A=
_443.scrollTop=3D0;=0A=
}else{=0A=
_443.scrollTop=3D_443.scrollHeight;=0A=
}=0A=
},this);=0A=
var _454=3Dfunction(msg){=0A=
_446[_446.length]=3Dmsg;=0A=
_451(msg);=0A=
};=0A=
var _455=3Dfunction(){=0A=
var _456,infore;=0A=
try{=0A=
_456=3Dnew RegExp(_437.value);=0A=
infore=3Dnew RegExp(_438.value);=0A=
}=0A=
catch(e){=0A=
logDebug("Error in filter regex: "+e.message);=0A=
return null;=0A=
}=0A=
return function(msg){=0A=
return (_456.test(_448(msg))&&infore.test(_450(msg)));=0A=
};=0A=
};=0A=
var _457=3Dfunction(){=0A=
while(_444.firstChild){=0A=
_444.removeChild(_444.firstChild);=0A=
}=0A=
};=0A=
var _458=3Dfunction(){=0A=
_446=3D[];=0A=
_457();=0A=
};=0A=
var _459=3Dbind(function(){=0A=
if(this.closed){=0A=
return;=0A=
}=0A=
this.closed=3Dtrue;=0A=
if(MochiKit.LoggingPane._loggingPane=3D=3Dthis){=0A=
MochiKit.LoggingPane._loggingPane=3Dnull;=0A=
}=0A=
this.logger.removeListener(_445);=0A=
_434.loggingPane=3Dnull;=0A=
if(_427){=0A=
_434.parentNode.removeChild(_434);=0A=
}else{=0A=
this.win.close();=0A=
}=0A=
},this);=0A=
var _460=3Dfunction(){=0A=
_457();=0A=
for(var i=3D0;i<_446.length;i++){=0A=
var msg=3D_446[i];=0A=
if(_447=3D=3D=3Dnull||_447(msg)){=0A=
_451(msg);=0A=
}=0A=
}=0A=
};=0A=
this.buildAndApplyFilter=3Dfunction(){=0A=
_447=3D_455();=0A=
_460();=0A=
this.logger.removeListener(_445);=0A=
this.logger.addListener(_445,_447,_454);=0A=
};=0A=
var _461=3Dbind(function(){=0A=
_446=3Dthis.logger.getMessages();=0A=
_460();=0A=
},this);=0A=
var _462=3Dbind(function(_463){=0A=
_463=3D_463||window.event;=0A=
key=3D_463.which||_463.keyCode;=0A=
if(key=3D=3D13){=0A=
this.buildAndApplyFilter();=0A=
}=0A=
},this);=0A=
var _464=3D"display: block; z-index: 1000; left: 0px; bottom: 0px; =
position: fixed; width: 100%; background-color: white; font: =
"+this.logFont;=0A=
if(_427){=0A=
_464+=3D"; height: 10em; border-top: 2px solid black";=0A=
}else{=0A=
_464+=3D"; height: 100%;";=0A=
}=0A=
_434.style.cssText=3D_464;=0A=
if(!_435){=0A=
doc.body.appendChild(_434);=0A=
}=0A=
_464=3D{"cssText":"width: 33%; display: inline; font: "+this.logFont};=0A=
_430(_437,{"value":"FATAL|ERROR|WARNING|INFO|DEBUG","onkeypress":_462,"st=
yle":_464});=0A=
_434.appendChild(_437);=0A=
_430(_438,{"value":".*","onkeypress":_462,"style":_464});=0A=
_434.appendChild(_438);=0A=
_464=3D"width: 8%; display:inline; font: "+this.logFont;=0A=
_439.appendChild(doc.createTextNode("Filter"));=0A=
_439.onclick=3Dbind("buildAndApplyFilter",this);=0A=
_439.style.cssText=3D_464;=0A=
_434.appendChild(_439);=0A=
_440.appendChild(doc.createTextNode("Load"));=0A=
_440.onclick=3D_461;=0A=
_440.style.cssText=3D_464;=0A=
_434.appendChild(_440);=0A=
_441.appendChild(doc.createTextNode("Clear"));=0A=
_441.onclick=3D_458;=0A=
_441.style.cssText=3D_464;=0A=
_434.appendChild(_441);=0A=
_442.appendChild(doc.createTextNode("Close"));=0A=
_442.onclick=3D_459;=0A=
_442.style.cssText=3D_464;=0A=
_434.appendChild(_442);=0A=
_443.style.cssText=3D"overflow: auto; width: 100%";=0A=
_444.style.cssText=3D"width: 100%; height: "+(_427?"8em":"100%");=0A=
_443.appendChild(_444);=0A=
_434.appendChild(_443);=0A=
this.buildAndApplyFilter();=0A=
_461();=0A=
if(_427){=0A=
this.win=3Dundefined;=0A=
}else{=0A=
this.win=3Dwin;=0A=
}=0A=
this.inline=3D_427;=0A=
this.closePane=3D_459;=0A=
this.closed=3Dfalse;=0A=
return this;=0A=
};=0A=
MochiKit.LoggingPane.LoggingPane.prototype=3D{"logFont":"8pt =
Verdana,sans-serif","colorTable":{"ERROR":"red","FATAL":"darkred","WARNIN=
G":"blue","INFO":"black","DEBUG":"green"}};=0A=
MochiKit.LoggingPane.EXPORT_OK=3D["LoggingPane"];=0A=
MochiKit.LoggingPane.EXPORT=3D["createLoggingPane"];=0A=
MochiKit.LoggingPane.__new__=3Dfunction(){=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":MochiKit.Base.concat(thi=
s.EXPORT,this.EXPORT_OK)};=0A=
MochiKit.Base.nameFunctions(this);=0A=
MochiKit.LoggingPane._loggingPane=3Dnull;=0A=
};=0A=
MochiKit.LoggingPane.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.LoggingPane);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Color");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Color depends on MochiKit.Base";=0A=
}=0A=
if(typeof (MochiKit.Color)=3D=3D"undefined"){=0A=
MochiKit.Color=3D{};=0A=
}=0A=
MochiKit.Color.NAME=3D"MochiKit.Color";=0A=
MochiKit.Color.VERSION=3D"1.3.1";=0A=
MochiKit.Color.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Color.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Color.Color=3Dfunction(red,_466,blue,_468){=0A=
if(typeof (_468)=3D=3D"undefined"||_468=3D=3D=3Dnull){=0A=
_468=3D1;=0A=
}=0A=
this.rgb=3D{r:red,g:_466,b:blue,a:_468};=0A=
};=0A=
MochiKit.Color.Color.prototype=3D{__class__:MochiKit.Color.Color,colorWit=
hAlpha:function(_469){=0A=
var rgb=3Dthis.rgb;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_469);=0A=
},colorWithHue:function(hue){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.h=3Dhue;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},colorWithSaturation:function(_473){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.s=3D_473;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},colorWithLightness:function(_474){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3D_474;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},darkerColorWithLevel:function(_475){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3DMath.max(hsl.l-_475,0);=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},lighterColorWithLevel:function(_476){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3DMath.min(hsl.l+_476,1);=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},blendedColor:function(_477,_478){=0A=
if(typeof (_478)=3D=3D"undefined"||_478=3D=3D=3Dnull){=0A=
_478=3D0.5;=0A=
}=0A=
var sf=3D1-_478;=0A=
var s=3Dthis.rgb;=0A=
var d=3D_477.rgb;=0A=
var df=3D_478;=0A=
return =
MochiKit.Color.Color.fromRGB((s.r*sf)+(d.r*df),(s.g*sf)+(d.g*df),(s.b*sf)=
+(d.b*df),(s.a*sf)+(d.a*df));=0A=
},compareRGB:function(_481){=0A=
var a=3Dthis.asRGB();=0A=
var b=3D_481.asRGB();=0A=
return MochiKit.Base.compare([a.r,a.g,a.b,a.a],[b.r,b.g,b.b,b.a]);=0A=
},isLight:function(){=0A=
return this.asHSL().b>0.5;=0A=
},isDark:function(){=0A=
return (!this.isLight());=0A=
},toHSLString:function(){=0A=
var c=3Dthis.asHSL();=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._hslString;=0A=
if(!rval){=0A=
var =
mid=3D(ccc(c.h,360).toFixed(0)+","+ccc(c.s,100).toPrecision(4)+"%"+","+cc=
c(c.l,100).toPrecision(4)+"%");=0A=
var a=3Dc.a;=0A=
if(a>=3D1){=0A=
a=3D1;=0A=
rval=3D"hsl("+mid+")";=0A=
}else{=0A=
if(a<=3D0){=0A=
a=3D0;=0A=
}=0A=
rval=3D"hsla("+mid+","+a+")";=0A=
}=0A=
this._hslString=3Drval;=0A=
}=0A=
return rval;=0A=
},toRGBString:function(){=0A=
var c=3Dthis.rgb;=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._rgbString;=0A=
if(!rval){=0A=
var =
mid=3D(ccc(c.r,255).toFixed(0)+","+ccc(c.g,255).toFixed(0)+","+ccc(c.b,25=
5).toFixed(0));=0A=
if(c.a!=3D1){=0A=
rval=3D"rgba("+mid+","+c.a+")";=0A=
}else{=0A=
rval=3D"rgb("+mid+")";=0A=
}=0A=
this._rgbString=3Drval;=0A=
}=0A=
return rval;=0A=
},asRGB:function(){=0A=
return MochiKit.Base.clone(this.rgb);=0A=
},toHexString:function(){=0A=
var m=3DMochiKit.Color;=0A=
var c=3Dthis.rgb;=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._hexString;=0A=
if(!rval){=0A=
rval=3D("#"+m.toColorPart(ccc(c.r,255))+m.toColorPart(ccc(c.g,255))+m.toC=
olorPart(ccc(c.b,255)));=0A=
this._hexString=3Drval;=0A=
}=0A=
return rval;=0A=
},asHSV:function(){=0A=
var hsv=3Dthis.hsv;=0A=
var c=3Dthis.rgb;=0A=
if(typeof (hsv)=3D=3D"undefined"||hsv=3D=3D=3Dnull){=0A=
hsv=3DMochiKit.Color.rgbToHSV(this.rgb);=0A=
this.hsv=3Dhsv;=0A=
}=0A=
return MochiKit.Base.clone(hsv);=0A=
},asHSL:function(){=0A=
var hsl=3Dthis.hsl;=0A=
var c=3Dthis.rgb;=0A=
if(typeof (hsl)=3D=3D"undefined"||hsl=3D=3D=3Dnull){=0A=
hsl=3DMochiKit.Color.rgbToHSL(this.rgb);=0A=
this.hsl=3Dhsl;=0A=
}=0A=
return MochiKit.Base.clone(hsl);=0A=
},toString:function(){=0A=
return this.toRGBString();=0A=
},repr:function(){=0A=
var c=3Dthis.rgb;=0A=
var col=3D[c.r,c.g,c.b,c.a];=0A=
return this.__class__.NAME+"("+col.join(", ")+")";=0A=
}};=0A=
MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_486,blue=
,_487){=0A=
var _488=3DMochiKit.Color.Color;=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_486=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
if(typeof (rgb.a)=3D=3D"undefined"){=0A=
_487=3Dundefined;=0A=
}else{=0A=
_487=3Drgb.a;=0A=
}=0A=
}=0A=
return new _488(red,_486,blue,_487);=0A=
},fromHSL:function(hue,_489,_490,_491){=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(m.hslToRGB.apply(m,arguments));=0A=
},fromHSV:function(hue,_492,_493,_494){=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(m.hsvToRGB.apply(m,arguments));=0A=
},fromName:function(name){=0A=
var _495=3DMochiKit.Color.Color;=0A=
if(name.charAt(0)=3D=3D"\""){=0A=
name=3Dname.substr(1,name.length-2);=0A=
}=0A=
var _496=3D_495._namedColors[name.toLowerCase()];=0A=
if(typeof (_496)=3D=3D"string"){=0A=
return _495.fromHexString(_496);=0A=
}else{=0A=
if(name=3D=3D"transparent"){=0A=
return _495.transparentColor();=0A=
}=0A=
}=0A=
return null;=0A=
},fromString:function(_497){=0A=
var self=3DMochiKit.Color.Color;=0A=
var _498=3D_497.substr(0,3);=0A=
if(_498=3D=3D"rgb"){=0A=
return self.fromRGBString(_497);=0A=
}else{=0A=
if(_498=3D=3D"hsl"){=0A=
return self.fromHSLString(_497);=0A=
}else{=0A=
if(_497.charAt(0)=3D=3D"#"){=0A=
return self.fromHexString(_497);=0A=
}=0A=
}=0A=
}=0A=
return self.fromName(_497);=0A=
},fromHexString:function(_499){=0A=
if(_499.charAt(0)=3D=3D"#"){=0A=
_499=3D_499.substring(1);=0A=
}=0A=
var _500=3D[];=0A=
var i,hex;=0A=
if(_499.length=3D=3D3){=0A=
for(i=3D0;i<3;i++){=0A=
hex=3D_499.substr(i,1);=0A=
_500.push(parseInt(hex+hex,16)/255);=0A=
}=0A=
}else{=0A=
for(i=3D0;i<6;i+=3D2){=0A=
hex=3D_499.substr(i,2);=0A=
_500.push(parseInt(hex,16)/255);=0A=
}=0A=
}=0A=
var _501=3DMochiKit.Color.Color;=0A=
return _501.fromRGB.apply(_501,_500);=0A=
},_fromColorString:function(pre,_503,_504,_505){=0A=
if(_505.indexOf(pre)=3D=3D=3D0){=0A=
_505=3D_505.substring(_505.indexOf("(",3)+1,_505.length-1);=0A=
}=0A=
var _506=3D_505.split(/\s*,\s*/);=0A=
var _507=3D[];=0A=
for(var i=3D0;i<_506.length;i++){=0A=
var c=3D_506[i];=0A=
var val;=0A=
var _508=3Dc.substring(c.length-3);=0A=
if(c.charAt(c.length-1)=3D=3D"%"){=0A=
val=3D0.01*parseFloat(c.substring(0,c.length-1));=0A=
}else{=0A=
if(_508=3D=3D"deg"){=0A=
val=3DparseFloat(c)/360;=0A=
}else{=0A=
if(_508=3D=3D"rad"){=0A=
val=3DparseFloat(c)/(Math.PI*2);=0A=
}else{=0A=
val=3D_504[i]*parseFloat(c);=0A=
}=0A=
}=0A=
}=0A=
_507.push(val);=0A=
}=0A=
return this[_503].apply(this,_507);=0A=
},fromComputedStyle:function(elem,_509,_510){=0A=
var d=3DMochiKit.DOM;=0A=
var cls=3DMochiKit.Color.Color;=0A=
for(elem=3Dd.getElement(elem);elem;elem=3Delem.parentNode){=0A=
var _511=3Dd.computedStyle.apply(d,arguments);=0A=
if(!_511){=0A=
continue;=0A=
}=0A=
var _512=3Dcls.fromString(_511);=0A=
if(!_512){=0A=
break;=0A=
}=0A=
if(_512.asRGB().a>0){=0A=
return _512;=0A=
}=0A=
}=0A=
return null;=0A=
},fromBackground:function(elem){=0A=
var cls=3DMochiKit.Color.Color;=0A=
return =
cls.fromComputedStyle(elem,"backgroundColor","background-color")||cls.whi=
teColor();=0A=
},fromText:function(elem){=0A=
var cls=3DMochiKit.Color.Color;=0A=
return cls.fromComputedStyle(elem,"color","color")||cls.blackColor();=0A=
},namedColors:function(){=0A=
return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);=0A=
}});=0A=
MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_513)=
{=0A=
v*=3D_513;=0A=
if(v<0){=0A=
return 0;=0A=
}else{=0A=
if(v>_513){=0A=
return _513;=0A=
}else{=0A=
return v;=0A=
}=0A=
}=0A=
},_hslValue:function(n1,n2,hue){=0A=
if(hue>6){=0A=
hue-=3D6;=0A=
}else{=0A=
if(hue<0){=0A=
hue+=3D6;=0A=
}=0A=
}=0A=
var val;=0A=
if(hue<1){=0A=
val=3Dn1+(n2-n1)*hue;=0A=
}else{=0A=
if(hue<3){=0A=
val=3Dn2;=0A=
}else{=0A=
if(hue<4){=0A=
val=3Dn1+(n2-n1)*(4-hue);=0A=
}else{=0A=
val=3Dn1;=0A=
}=0A=
}=0A=
}=0A=
return val;=0A=
},hsvToRGB:function(hue,_516,_517,_518){=0A=
if(arguments.length=3D=3D1){=0A=
var hsv=3Dhue;=0A=
hue=3Dhsv.h;=0A=
_516=3Dhsv.s;=0A=
_517=3Dhsv.v;=0A=
_518=3Dhsv.a;=0A=
}=0A=
var red;=0A=
var _519;=0A=
var blue;=0A=
if(_516=3D=3D=3D0){=0A=
red=3D0;=0A=
_519=3D0;=0A=
blue=3D0;=0A=
}else{=0A=
var i=3DMath.floor(hue*6);=0A=
var f=3D(hue*6)-i;=0A=
var p=3D_517*(1-_516);=0A=
var q=3D_517*(1-(_516*f));=0A=
var t=3D_517*(1-(_516*(1-f)));=0A=
switch(i){=0A=
case 1:=0A=
red=3Dq;=0A=
_519=3D_517;=0A=
blue=3Dp;=0A=
break;=0A=
case 2:=0A=
red=3Dp;=0A=
_519=3D_517;=0A=
blue=3Dt;=0A=
break;=0A=
case 3:=0A=
red=3Dp;=0A=
_519=3Dq;=0A=
blue=3D_517;=0A=
break;=0A=
case 4:=0A=
red=3Dt;=0A=
_519=3Dp;=0A=
blue=3D_517;=0A=
break;=0A=
case 5:=0A=
red=3D_517;=0A=
_519=3Dp;=0A=
blue=3Dq;=0A=
break;=0A=
case 6:=0A=
case 0:=0A=
red=3D_517;=0A=
_519=3Dt;=0A=
blue=3Dp;=0A=
break;=0A=
}=0A=
}=0A=
return {r:red,g:_519,b:blue,a:_518};=0A=
},hslToRGB:function(hue,_521,_522,_523){=0A=
if(arguments.length=3D=3D1){=0A=
var hsl=3Dhue;=0A=
hue=3Dhsl.h;=0A=
_521=3Dhsl.s;=0A=
_522=3Dhsl.l;=0A=
_523=3Dhsl.a;=0A=
}=0A=
var red;=0A=
var _524;=0A=
var blue;=0A=
if(_521=3D=3D=3D0){=0A=
red=3D_522;=0A=
_524=3D_522;=0A=
blue=3D_522;=0A=
}else{=0A=
var m2;=0A=
if(_522<=3D0.5){=0A=
m2=3D_522*(1+_521);=0A=
}else{=0A=
m2=3D_522+_521-(_522*_521);=0A=
}=0A=
var m1=3D(2*_522)-m2;=0A=
var f=3DMochiKit.Color._hslValue;=0A=
var h6=3Dhue*6;=0A=
red=3Df(m1,m2,h6+2);=0A=
_524=3Df(m1,m2,h6);=0A=
blue=3Df(m1,m2,h6-2);=0A=
}=0A=
return {r:red,g:_524,b:blue,a:_523};=0A=
},rgbToHSV:function(red,_528,blue,_529){=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_528=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
_529=3Drgb.a;=0A=
}=0A=
var max=3DMath.max(Math.max(red,_528),blue);=0A=
var min=3DMath.min(Math.min(red,_528),blue);=0A=
var hue;=0A=
var _532;=0A=
var _533=3Dmax;=0A=
if(min=3D=3Dmax){=0A=
hue=3D0;=0A=
_532=3D0;=0A=
}else{=0A=
var _534=3D(max-min);=0A=
_532=3D_534/max;=0A=
if(red=3D=3Dmax){=0A=
hue=3D(_528-blue)/_534;=0A=
}else{=0A=
if(_528=3D=3Dmax){=0A=
hue=3D2+((blue-red)/_534);=0A=
}else{=0A=
hue=3D4+((red-_528)/_534);=0A=
}=0A=
}=0A=
hue/=3D6;=0A=
if(hue<0){=0A=
hue+=3D1;=0A=
}=0A=
if(hue>1){=0A=
hue-=3D1;=0A=
}=0A=
}=0A=
return {h:hue,s:_532,v:_533,a:_529};=0A=
},rgbToHSL:function(red,_535,blue,_536){=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_535=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
_536=3Drgb.a;=0A=
}=0A=
var max=3DMath.max(red,Math.max(_535,blue));=0A=
var min=3DMath.min(red,Math.min(_535,blue));=0A=
var hue;=0A=
var _537;=0A=
var _538=3D(max+min)/2;=0A=
var _539=3Dmax-min;=0A=
if(_539=3D=3D=3D0){=0A=
hue=3D0;=0A=
_537=3D0;=0A=
}else{=0A=
if(_538<=3D0.5){=0A=
_537=3D_539/(max+min);=0A=
}else{=0A=
_537=3D_539/(2-max-min);=0A=
}=0A=
if(red=3D=3Dmax){=0A=
hue=3D(_535-blue)/_539;=0A=
}else{=0A=
if(_535=3D=3Dmax){=0A=
hue=3D2+((blue-red)/_539);=0A=
}else{=0A=
hue=3D4+((red-_535)/_539);=0A=
}=0A=
}=0A=
hue/=3D6;=0A=
if(hue<0){=0A=
hue+=3D1;=0A=
}=0A=
if(hue>1){=0A=
hue-=3D1;=0A=
}=0A=
}=0A=
return {h:hue,s:_537,l:_538,a:_536};=0A=
},toColorPart:function(num){=0A=
num=3DMath.round(num);=0A=
var _540=3Dnum.toString(16);=0A=
if(num<16){=0A=
return "0"+_540;=0A=
}=0A=
return _540;=0A=
},__new__:function(){=0A=
var m=3DMochiKit.Base;=0A=
this.Color.fromRGBString=3Dm.bind(this.Color._fromColorString,this.Color,=
"rgb","fromRGB",[1/255,1/255,1/255,1]);=0A=
this.Color.fromHSLString=3Dm.bind(this.Color._fromColorString,this.Color,=
"hsl","fromHSL",[1/360,0.01,0.01,1]);=0A=
var _541=3D1/3;=0A=
var =
_542=3D{black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkG=
ray:[_541,_541,_541],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_541,2=
*_541,2*_541],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,=
0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};=0A=
var _543=3Dfunction(name,r,g,b,a){=0A=
var rval=3Dthis.fromRGB(r,g,b,a);=0A=
this[name]=3Dfunction(){=0A=
return rval;=0A=
};=0A=
return rval;=0A=
};=0A=
for(var k in _542){=0A=
var name=3Dk+"Color";=0A=
var _545=3Dm.concat([_543,this.Color,name],_542[k]);=0A=
this.Color[name]=3Dm.bind.apply(null,_545);=0A=
}=0A=
var _546=3Dfunction(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(arguments[i] instanceof Color)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
};=0A=
var _547=3Dfunction(a,b){=0A=
return a.compareRGB(b);=0A=
};=0A=
m.nameFunctions(this);=0A=
m.registerComparator(this.Color.NAME,_546,_547);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
}});=0A=
MochiKit.Color.EXPORT=3D["Color"];=0A=
MochiKit.Color.EXPORT_OK=3D["clampColorComponent","rgbToHSL","hslToRGB","=
rgbToHSV","hsvToRGB","toColorPart"];=0A=
MochiKit.Color.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Color);=0A=
MochiKit.Color.Color._namedColors=3D{aliceblue:"#f0f8ff",antiquewhite:"#f=
aebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc=
",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff=
",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f=
9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower=
blue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkbl=
ue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9=
",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:=
"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932=
cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darksla=
teblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturq=
uoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00b=
fff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"=
#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",ga=
insboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520"=
,gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",hone=
ydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivo=
ry:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",l=
awngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:=
"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#=
d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",ligh=
tsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightsla=
tegray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lighty=
ellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magent=
a:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000=
cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371=
",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"=
#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5f=
ffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#=
000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ff=
a500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegr=
een:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:=
"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd=
",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f"=
,royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#=
f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c=
0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategre=
y:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:=
"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#4=
0e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5=
f5",yellow:"#ffff00",yellowgreen:"#9acd32"};=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Signal");=0A=
dojo.require("MochiKit.Base");=0A=
dojo.require("MochiKit.DOM");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Signal depends on MochiKit.Base!";=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.DOM)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Signal depends on MochiKit.DOM!";=0A=
}=0A=
if(typeof (MochiKit.Signal)=3D=3D"undefined"){=0A=
MochiKit.Signal=3D{};=0A=
}=0A=
MochiKit.Signal.NAME=3D"MochiKit.Signal";=0A=
MochiKit.Signal.VERSION=3D"1.3.1";=0A=
MochiKit.Signal._observers=3D[];=0A=
MochiKit.Signal.Event=3Dfunction(src,e){=0A=
this._event=3De||window.event;=0A=
this._src=3Dsrc;=0A=
};=0A=
MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function()=
{=0A=
var repr=3DMochiKit.Base.repr;=0A=
var str=3D"{event(): "+repr(this.event())+", src(): =
"+repr(this.src())+", type(): "+repr(this.type())+", target(): =
"+repr(this.target())+", modifier(): "+"{alt: =
"+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", =
meta: "+repr(this.modifier().meta)+", shift: =
"+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";=0A=
if(this.type()&&this.type().indexOf("key")=3D=3D=3D0){=0A=
str+=3D", key(): {code: "+repr(this.key().code)+", string: =
"+repr(this.key().string)+"}";=0A=
}=0A=
if(this.type()&&(this.type().indexOf("mouse")=3D=3D=3D0||this.type().inde=
xOf("click")!=3D-1||this.type()=3D=3D"contextmenu")){=0A=
str+=3D", mouse(): {page: "+repr(this.mouse().page)+", client: =
"+repr(this.mouse().client);=0A=
if(this.type()!=3D"mousemove"){=0A=
str+=3D", button: {left: "+repr(this.mouse().button.left)+", middle: =
"+repr(this.mouse().button.middle)+", right: =
"+repr(this.mouse().button.right)+"}}";=0A=
}else{=0A=
str+=3D"}";=0A=
}=0A=
}=0A=
if(this.type()=3D=3D"mouseover"||this.type()=3D=3D"mouseout"){=0A=
str+=3D", relatedTarget(): "+repr(this.relatedTarget());=0A=
}=0A=
str+=3D"}";=0A=
return str;=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},src:function(){=0A=
return this._src;=0A=
},event:function(){=0A=
return this._event;=0A=
},type:function(){=0A=
return this._event.type||undefined;=0A=
},target:function(){=0A=
return this._event.target||this._event.srcElement;=0A=
},relatedTarget:function(){=0A=
if(this.type()=3D=3D"mouseover"){=0A=
return (this._event.relatedTarget||this._event.fromElement);=0A=
}else{=0A=
if(this.type()=3D=3D"mouseout"){=0A=
return (this._event.relatedTarget||this._event.toElement);=0A=
}=0A=
}=0A=
return undefined;=0A=
},modifier:function(){=0A=
var m=3D{};=0A=
m.alt=3Dthis._event.altKey;=0A=
m.ctrl=3Dthis._event.ctrlKey;=0A=
m.meta=3Dthis._event.metaKey||false;=0A=
m.shift=3Dthis._event.shiftKey;=0A=
m.any=3Dm.alt||m.ctrl||m.shift||m.meta;=0A=
return m;=0A=
},key:function(){=0A=
var k=3D{};=0A=
if(this.type()&&this.type().indexOf("key")=3D=3D=3D0){=0A=
if(this.type()=3D=3D"keydown"||this.type()=3D=3D"keyup"){=0A=
k.code=3Dthis._event.keyCode;=0A=
k.string=3D(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");=0A=
return k;=0A=
}else{=0A=
if(this.type()=3D=3D"keypress"){=0A=
k.code=3D0;=0A=
k.string=3D"";=0A=
if(typeof =
(this._event.charCode)!=3D"undefined"&&this._event.charCode!=3D=3D0&&!Moc=
hiKit.Signal._specialMacKeys[this._event.charCode]){=0A=
k.code=3Dthis._event.charCode;=0A=
k.string=3DString.fromCharCode(k.code);=0A=
}else{=0A=
if(this._event.keyCode&&typeof (this._event.charCode)=3D=3D"undefined"){=0A=
k.code=3Dthis._event.keyCode;=0A=
k.string=3DString.fromCharCode(k.code);=0A=
}=0A=
}=0A=
return k;=0A=
}=0A=
}=0A=
}=0A=
return undefined;=0A=
},mouse:function(){=0A=
var m=3D{};=0A=
var e=3Dthis._event;=0A=
if(this.type()&&(this.type().indexOf("mouse")=3D=3D=3D0||this.type().inde=
xOf("click")!=3D-1||this.type()=3D=3D"contextmenu")){=0A=
m.client=3Dnew MochiKit.DOM.Coordinates(0,0);=0A=
if(e.clientX||e.clientY){=0A=
m.client.x=3D(!e.clientX||e.clientX<0)?0:e.clientX;=0A=
m.client.y=3D(!e.clientY||e.clientY<0)?0:e.clientY;=0A=
}=0A=
m.page=3Dnew MochiKit.DOM.Coordinates(0,0);=0A=
if(e.pageX||e.pageY){=0A=
m.page.x=3D(!e.pageX||e.pageX<0)?0:e.pageX;=0A=
m.page.y=3D(!e.pageY||e.pageY<0)?0:e.pageY;=0A=
}else{=0A=
var de=3DMochiKit.DOM._document.documentElement;=0A=
var b=3DMochiKit.DOM._document.body;=0A=
m.page.x=3De.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clie=
ntLeft);=0A=
m.page.y=3De.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientT=
op);=0A=
}=0A=
if(this.type()!=3D"mousemove"){=0A=
m.button=3D{};=0A=
m.button.left=3Dfalse;=0A=
m.button.right=3Dfalse;=0A=
m.button.middle=3Dfalse;=0A=
if(e.which){=0A=
m.button.left=3D(e.which=3D=3D1);=0A=
m.button.middle=3D(e.which=3D=3D2);=0A=
m.button.right=3D(e.which=3D=3D3);=0A=
}else{=0A=
m.button.left=3D!!(e.button&1);=0A=
m.button.right=3D!!(e.button&2);=0A=
m.button.middle=3D!!(e.button&4);=0A=
}=0A=
}=0A=
return m;=0A=
}=0A=
return undefined;=0A=
},stop:function(){=0A=
this.stopPropagation();=0A=
this.preventDefault();=0A=
},stopPropagation:function(){=0A=
if(this._event.stopPropagation){=0A=
this._event.stopPropagation();=0A=
}else{=0A=
this._event.cancelBubble=3Dtrue;=0A=
}=0A=
},preventDefault:function(){=0A=
if(this._event.preventDefault){=0A=
this._event.preventDefault();=0A=
}else{=0A=
this._event.returnValue=3Dfalse;=0A=
}=0A=
}});=0A=
MochiKit.Signal._specialMacKeys=3D{3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR=
",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HO=
ME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",6=
3233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};=0A=
for(i=3D63236;i<=3D63242;i++){=0A=
MochiKit.Signal._specialMacKeys[i]=3D"KEY_F"+(i-63236+1);=0A=
}=0A=
MochiKit.Signal._specialKeys=3D{8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM=
_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"=
KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_P=
AGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT"=
,38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT=
_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDO=
WS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK=
",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM=
_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCR=
OLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"=
KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_AC=
CENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RI=
GHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};=0A=
for(var i=3D48;i<=3D57;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_"+(i-48);=0A=
}=0A=
for(i=3D65;i<=3D90;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_"+String.fromCharCode(i);=0A=
}=0A=
for(i=3D96;i<=3D105;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_NUM_PAD_"+(i-96);=0A=
}=0A=
for(i=3D112;i<=3D123;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_F"+(i-112+1);=0A=
}=0A=
MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},_unloadCache:function(){=0A=
var self=3DMochiKit.Signal;=0A=
var _548=3Dself._observers;=0A=
for(var i=3D0;i<_548.length;i++){=0A=
self._disconnect(_548[i]);=0A=
}=0A=
delete self._observers;=0A=
try{=0A=
window.onload=3Dundefined;=0A=
}=0A=
catch(e){=0A=
}=0A=
try{=0A=
window.onunload=3Dundefined;=0A=
}=0A=
catch(e){=0A=
}=0A=
},_listener:function(src,func,obj,_549){=0A=
var E=3DMochiKit.Signal.Event;=0A=
if(!_549){=0A=
return MochiKit.Base.bind(func,obj);=0A=
}=0A=
obj=3Dobj||src;=0A=
if(typeof (func)=3D=3D"string"){=0A=
return function(_551){=0A=
obj[func].apply(obj,[new E(src,_551)]);=0A=
};=0A=
}else{=0A=
return function(_552){=0A=
func.apply(obj,[new E(src,_552)]);=0A=
};=0A=
}=0A=
},connect:function(src,sig,_554,_555){=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var self=3DMochiKit.Signal;=0A=
if(typeof (sig)!=3D"string"){=0A=
throw new Error("'sig' must be a string");=0A=
}=0A=
var obj=3Dnull;=0A=
var func=3Dnull;=0A=
if(typeof (_555)!=3D"undefined"){=0A=
obj=3D_554;=0A=
func=3D_555;=0A=
if(typeof (_555)=3D=3D"string"){=0A=
if(typeof (_554[_555])!=3D"function"){=0A=
throw new Error("'funcOrStr' must be a function on 'objOrFunc'");=0A=
}=0A=
}else{=0A=
if(typeof (_555)!=3D"function"){=0A=
throw new Error("'funcOrStr' must be a function or string");=0A=
}=0A=
}=0A=
}else{=0A=
if(typeof (_554)!=3D"function"){=0A=
throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not =
given");=0A=
}else{=0A=
func=3D_554;=0A=
}=0A=
}=0A=
if(typeof (obj)=3D=3D"undefined"||obj=3D=3D=3Dnull){=0A=
obj=3Dsrc;=0A=
}=0A=
var _556=3D!!(src.addEventListener||src.attachEvent);=0A=
var _557=3Dself._listener(src,func,obj,_556);=0A=
if(src.addEventListener){=0A=
src.addEventListener(sig.substr(2),_557,false);=0A=
}else{=0A=
if(src.attachEvent){=0A=
src.attachEvent(sig,_557);=0A=
}=0A=
}=0A=
var _558=3D[src,sig,_557,_556,_554,_555];=0A=
self._observers.push(_558);=0A=
return _558;=0A=
},_disconnect:function(_559){=0A=
if(!_559[3]){=0A=
return;=0A=
}=0A=
var src=3D_559[0];=0A=
var sig=3D_559[1];=0A=
var _560=3D_559[2];=0A=
if(src.removeEventListener){=0A=
src.removeEventListener(sig.substr(2),_560,false);=0A=
}else{=0A=
if(src.detachEvent){=0A=
src.detachEvent(sig,_560);=0A=
}else{=0A=
throw new Error("'src' must be a DOM element");=0A=
}=0A=
}=0A=
},disconnect:function(_561){=0A=
var self=3DMochiKit.Signal;=0A=
var _562=3Dself._observers;=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length>1){=0A=
var src=3DMochiKit.DOM.getElement(arguments[0]);=0A=
var sig=3Darguments[1];=0A=
var obj=3Darguments[2];=0A=
var func=3Darguments[3];=0A=
for(var i=3D_562.length-1;i>=3D0;i--){=0A=
var o=3D_562[i];=0A=
if(o[0]=3D=3D=3Dsrc&&o[1]=3D=3D=3Dsig&&o[4]=3D=3D=3Dobj&&o[5]=3D=3D=3Dfun=
c){=0A=
self._disconnect(o);=0A=
_562.splice(i,1);=0A=
return true;=0A=
}=0A=
}=0A=
}else{=0A=
var idx=3Dm.findIdentical(_562,_561);=0A=
if(idx>=3D0){=0A=
self._disconnect(_561);=0A=
_562.splice(idx,1);=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},disconnectAll:function(src,sig){=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var m=3DMochiKit.Base;=0A=
var _563=3Dm.flattenArguments(m.extend(null,arguments,1));=0A=
var self=3DMochiKit.Signal;=0A=
var _564=3Dself._disconnect;=0A=
var _565=3Dself._observers;=0A=
if(_563.length=3D=3D=3D0){=0A=
for(var i=3D_565.length-1;i>=3D0;i--){=0A=
var _566=3D_565[i];=0A=
if(_566[0]=3D=3D=3Dsrc){=0A=
_564(_566);=0A=
_565.splice(i,1);=0A=
}=0A=
}=0A=
}else{=0A=
var sigs=3D{};=0A=
for(var i=3D0;i<_563.length;i++){=0A=
sigs[_563[i]]=3Dtrue;=0A=
}=0A=
for(var i=3D_565.length-1;i>=3D0;i--){=0A=
var _566=3D_565[i];=0A=
if(_566[0]=3D=3D=3Dsrc&&_566[1] in sigs){=0A=
_564(_566);=0A=
_565.splice(i,1);=0A=
}=0A=
}=0A=
}=0A=
},signal:function(src,sig){=0A=
var _568=3DMochiKit.Signal._observers;=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var args=3DMochiKit.Base.extend(null,arguments,2);=0A=
var _569=3D[];=0A=
for(var i=3D0;i<_568.length;i++){=0A=
var _570=3D_568[i];=0A=
if(_570[0]=3D=3D=3Dsrc&&_570[1]=3D=3D=3Dsig){=0A=
try{=0A=
_570[2].apply(src,args);=0A=
}=0A=
catch(e){=0A=
_569.push(e);=0A=
}=0A=
}=0A=
}=0A=
if(_569.length=3D=3D1){=0A=
throw _569[0];=0A=
}else{=0A=
if(_569.length>1){=0A=
var e=3Dnew Error("Multiple errors thrown in handling 'sig', see errors =
property");=0A=
e.errors=3D_569;=0A=
throw e;=0A=
}=0A=
}=0A=
}});=0A=
MochiKit.Signal.EXPORT_OK=3D[];=0A=
MochiKit.Signal.EXPORT=3D["connect","disconnect","signal","disconnectAll"=
];=0A=
MochiKit.Signal.__new__=3Dfunction(win){=0A=
var m=3DMochiKit.Base;=0A=
this._document=3Ddocument;=0A=
this._window=3Dwin;=0A=
try{=0A=
this.connect(window,"onunload",this._unloadCache);=0A=
}=0A=
catch(e){=0A=
}=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Signal.__new__(this);=0A=
if(!MochiKit.__compat__){=0A=
connect=3DMochiKit.Signal.connect;=0A=
disconnect=3DMochiKit.Signal.disconnect;=0A=
disconnectAll=3DMochiKit.Signal.disconnectAll;=0A=
signal=3DMochiKit.Signal.signal;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Signal);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Visual");=0A=
dojo.require("MochiKit.Base");=0A=
dojo.require("MochiKit.DOM");=0A=
dojo.require("MochiKit.Color");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
JSAN.use("MochiKit.Color",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"||typeof =
(MochiKit.DOM)=3D=3D"undefined"||typeof =
(MochiKit.Color)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Visual depends on MochiKit.Base, MochiKit.DOM and =
MochiKit.Color!";=0A=
}=0A=
if(typeof (MochiKit.Visual)=3D=3D"undefined"){=0A=
MochiKit.Visual=3D{};=0A=
}=0A=
MochiKit.Visual.NAME=3D"MochiKit.Visual";=0A=
MochiKit.Visual.VERSION=3D"1.3.1";=0A=
MochiKit.Visual.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Visual.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Visual._RoundCorners=3Dfunction(e,_571){=0A=
e=3DMochiKit.DOM.getElement(e);=0A=
this._setOptions(_571);=0A=
if(this.options.__unstable__wrapElement){=0A=
e=3Dthis._doWrap(e);=0A=
}=0A=
var _572=3Dthis.options.color;=0A=
var C=3DMochiKit.Color.Color;=0A=
if(this.options.color=3D=3D"fromElement"){=0A=
_572=3DC.fromBackground(e);=0A=
}else{=0A=
if(!(_572 instanceof C)){=0A=
_572=3DC.fromString(_572);=0A=
}=0A=
}=0A=
this.isTransparent=3D(_572.asRGB().a<=3D0);=0A=
var _574=3Dthis.options.bgColor;=0A=
if(this.options.bgColor=3D=3D"fromParent"){=0A=
_574=3DC.fromBackground(e.offsetParent);=0A=
}else{=0A=
if(!(_574 instanceof C)){=0A=
_574=3DC.fromString(_574);=0A=
}=0A=
}=0A=
this._roundCornersImpl(e,_572,_574);=0A=
};=0A=
MochiKit.Visual._RoundCorners.prototype=3D{_doWrap:function(e){=0A=
var _575=3De.parentNode;=0A=
var doc=3DMochiKit.DOM.currentDocument();=0A=
if(typeof =
(doc.defaultView)=3D=3D"undefined"||doc.defaultView=3D=3D=3Dnull){=0A=
return e;=0A=
}=0A=
var _576=3Ddoc.defaultView.getComputedStyle(e,null);=0A=
if(typeof (_576)=3D=3D"undefined"||_576=3D=3D=3Dnull){=0A=
return e;=0A=
}=0A=
var =
_577=3DMochiKit.DOM.DIV({"style":{display:"block",marginTop:_576.getPrope=
rtyValue("padding-top"),marginRight:_576.getPropertyValue("padding-right"=
),marginBottom:_576.getPropertyValue("padding-bottom"),marginLeft:_576.ge=
tPropertyValue("padding-left"),padding:"0px"}});=0A=
_577.innerHTML=3De.innerHTML;=0A=
e.innerHTML=3D"";=0A=
e.appendChild(_577);=0A=
return e;=0A=
},_roundCornersImpl:function(e,_578,_579){=0A=
if(this.options.border){=0A=
this._renderBorder(e,_579);=0A=
}=0A=
if(this._isTopRounded()){=0A=
this._roundTopCorners(e,_578,_579);=0A=
}=0A=
if(this._isBottomRounded()){=0A=
this._roundBottomCorners(e,_578,_579);=0A=
}=0A=
},_renderBorder:function(el,_580){=0A=
var _581=3D"1px solid "+this._borderColor(_580);=0A=
var _582=3D"border-left: "+_581;=0A=
var _583=3D"border-right: "+_581;=0A=
var _584=3D"style=3D'"+_582+";"+_583+"'";=0A=
el.innerHTML=3D"<div "+_584+">"+el.innerHTML+"</div>";=0A=
},_roundTopCorners:function(el,_585,_586){=0A=
var _587=3Dthis._createCorner(_586);=0A=
for(var i=3D0;i<this.options.numSlices;i++){=0A=
_587.appendChild(this._createCornerSlice(_585,_586,i,"top"));=0A=
}=0A=
el.style.paddingTop=3D0;=0A=
el.insertBefore(_587,el.firstChild);=0A=
},_roundBottomCorners:function(el,_588,_589){=0A=
var _590=3Dthis._createCorner(_589);=0A=
for(var i=3D(this.options.numSlices-1);i>=3D0;i--){=0A=
_590.appendChild(this._createCornerSlice(_588,_589,i,"bottom"));=0A=
}=0A=
el.style.paddingBottom=3D0;=0A=
el.appendChild(_590);=0A=
},_createCorner:function(_591){=0A=
var dom=3DMochiKit.DOM;=0A=
return dom.DIV({style:{backgroundColor:_591.toString()}});=0A=
},_createCornerSlice:function(_592,_593,n,_594){=0A=
var _595=3DMochiKit.DOM.SPAN();=0A=
var _596=3D_595.style;=0A=
_596.backgroundColor=3D_592.toString();=0A=
_596.display=3D"block";=0A=
_596.height=3D"1px";=0A=
_596.overflow=3D"hidden";=0A=
_596.fontSize=3D"1px";=0A=
var _597=3Dthis._borderColor(_592,_593);=0A=
if(this.options.border&&n=3D=3D=3D0){=0A=
_596.borderTopStyle=3D"solid";=0A=
_596.borderTopWidth=3D"1px";=0A=
_596.borderLeftWidth=3D"0px";=0A=
_596.borderRightWidth=3D"0px";=0A=
_596.borderBottomWidth=3D"0px";=0A=
_596.height=3D"0px";=0A=
_596.borderColor=3D_597.toString();=0A=
}else{=0A=
if(_597){=0A=
_596.borderColor=3D_597.toString();=0A=
_596.borderStyle=3D"solid";=0A=
_596.borderWidth=3D"0px 1px";=0A=
}=0A=
}=0A=
if(!this.options.compact&&(n=3D=3D(this.options.numSlices-1))){=0A=
_596.height=3D"2px";=0A=
}=0A=
this._setMargin(_595,n,_594);=0A=
this._setBorder(_595,n,_594);=0A=
return _595;=0A=
},_setOptions:function(_598){=0A=
this.options=3D{corners:"all",color:"fromElement",bgColor:"fromParent",bl=
end:true,border:false,compact:false,__unstable__wrapElement:false};=0A=
MochiKit.Base.update(this.options,_598);=0A=
this.options.numSlices=3D(this.options.compact?2:4);=0A=
},_whichSideTop:function(){=0A=
var _599=3Dthis.options.corners;=0A=
if(this._hasString(_599,"all","top")){=0A=
return "";=0A=
}=0A=
var _600=3D(_599.indexOf("tl")!=3D-1);=0A=
var _601=3D(_599.indexOf("tr")!=3D-1);=0A=
if(_600&&_601){=0A=
return "";=0A=
}=0A=
if(_600){=0A=
return "left";=0A=
}=0A=
if(_601){=0A=
return "right";=0A=
}=0A=
return "";=0A=
},_whichSideBottom:function(){=0A=
var _602=3Dthis.options.corners;=0A=
if(this._hasString(_602,"all","bottom")){=0A=
return "";=0A=
}=0A=
var _603=3D(_602.indexOf("bl")!=3D-1);=0A=
var _604=3D(_602.indexOf("br")!=3D-1);=0A=
if(_603&&_604){=0A=
return "";=0A=
}=0A=
if(_603){=0A=
return "left";=0A=
}=0A=
if(_604){=0A=
return "right";=0A=
}=0A=
return "";=0A=
},_borderColor:function(_605,_606){=0A=
if(_605=3D=3D"transparent"){=0A=
return _606;=0A=
}else{=0A=
if(this.options.border){=0A=
return this.options.border;=0A=
}else{=0A=
if(this.options.blend){=0A=
return _606.blendedColor(_605);=0A=
}=0A=
}=0A=
}=0A=
return "";=0A=
},_setMargin:function(el,n,_607){=0A=
var _608=3Dthis._marginSize(n)+"px";=0A=
var =
_609=3D(_607=3D=3D"top"?this._whichSideTop():this._whichSideBottom());=0A=
var _610=3Del.style;=0A=
if(_609=3D=3D"left"){=0A=
_610.marginLeft=3D_608;=0A=
_610.marginRight=3D"0px";=0A=
}else{=0A=
if(_609=3D=3D"right"){=0A=
_610.marginRight=3D_608;=0A=
_610.marginLeft=3D"0px";=0A=
}else{=0A=
_610.marginLeft=3D_608;=0A=
_610.marginRight=3D_608;=0A=
}=0A=
}=0A=
},_setBorder:function(el,n,_611){=0A=
var _612=3Dthis._borderSize(n)+"px";=0A=
var =
_613=3D(_611=3D=3D"top"?this._whichSideTop():this._whichSideBottom());=0A=
var _614=3Del.style;=0A=
if(_613=3D=3D"left"){=0A=
_614.borderLeftWidth=3D_612;=0A=
_614.borderRightWidth=3D"0px";=0A=
}else{=0A=
if(_613=3D=3D"right"){=0A=
_614.borderRightWidth=3D_612;=0A=
_614.borderLeftWidth=3D"0px";=0A=
}else{=0A=
_614.borderLeftWidth=3D_612;=0A=
_614.borderRightWidth=3D_612;=0A=
}=0A=
}=0A=
},_marginSize:function(n){=0A=
if(this.isTransparent){=0A=
return 0;=0A=
}=0A=
var o=3Dthis.options;=0A=
if(o.compact&&o.blend){=0A=
var _615=3D[1,0];=0A=
return _615[n];=0A=
}else{=0A=
if(o.compact){=0A=
var _616=3D[2,1];=0A=
return _616[n];=0A=
}else{=0A=
if(o.blend){=0A=
var _617=3D[3,2,1,0];=0A=
return _617[n];=0A=
}else{=0A=
var _618=3D[5,3,2,1];=0A=
return _618[n];=0A=
}=0A=
}=0A=
}=0A=
},_borderSize:function(n){=0A=
var o=3Dthis.options;=0A=
var _619;=0A=
if(o.compact&&(o.blend||this.isTransparent)){=0A=
return 1;=0A=
}else{=0A=
if(o.compact){=0A=
_619=3D[1,0];=0A=
}else{=0A=
if(o.blend){=0A=
_619=3D[2,1,1,1];=0A=
}else{=0A=
if(o.border){=0A=
_619=3D[0,2,0,0];=0A=
}else{=0A=
if(this.isTransparent){=0A=
_619=3D[5,3,2,1];=0A=
}else{=0A=
return 0;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _619[n];=0A=
},_hasString:function(str){=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
if(str.indexOf(arguments[i])!=3D-1){=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},_isTopRounded:function(){=0A=
return this._hasString(this.options.corners,"all","top","tl","tr");=0A=
},_isBottomRounded:function(){=0A=
return this._hasString(this.options.corners,"all","bottom","bl","br");=0A=
},_hasSingleTextChild:function(el){=0A=
return (el.childNodes.length=3D=3D1&&el.childNodes[0].nodeType=3D=3D3);=0A=
}};=0A=
MochiKit.Visual.roundElement=3Dfunction(e,_620){=0A=
new MochiKit.Visual._RoundCorners(e,_620);=0A=
};=0A=
MochiKit.Visual.roundClass=3Dfunction(_621,_622,_623){=0A=
var _624=3DMochiKit.DOM.getElementsByTagAndClassName(_621,_622);=0A=
for(var i=3D0;i<_624.length;i++){=0A=
MochiKit.Visual.roundElement(_624[i],_623);=0A=
}=0A=
};=0A=
MochiKit.Visual.Color=3DMochiKit.Color.Color;=0A=
MochiKit.Visual.getElementsComputedStyle=3DMochiKit.DOM.computedStyle;=0A=
MochiKit.Visual.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
m.nameFunctions(this);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
};=0A=
MochiKit.Visual.EXPORT=3D["roundElement","roundClass"];=0A=
MochiKit.Visual.EXPORT_OK=3D[];=0A=
MochiKit.Visual.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Visual);=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.MochiKit)=3D=3D"undefined"){=0A=
MochiKit.MochiKit=3D{};=0A=
}=0A=
MochiKit.MochiKit.NAME=3D"MochiKit.MochiKit";=0A=
MochiKit.MochiKit.VERSION=3D"1.3.1";=0A=
MochiKit.MochiKit.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.MochiKit.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.MochiKit.SUBMODULES=3D["Base","Iter","Logging","DateTime","Forma=
t","Async","DOM","LoggingPane","Color","Signal","Visual"];=0A=
if(typeof (JSAN)!=3D"undefined"||typeof (dojo)!=3D"undefined"){=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.MochiKit");=0A=
dojo.require("MochiKit.*");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.Iter",[]);=0A=
JSAN.use("MochiKit.Logging",[]);=0A=
JSAN.use("MochiKit.DateTime",[]);=0A=
JSAN.use("MochiKit.Format",[]);=0A=
JSAN.use("MochiKit.Async",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
JSAN.use("MochiKit.LoggingPane",[]);=0A=
JSAN.use("MochiKit.Color",[]);=0A=
JSAN.use("MochiKit.Signal",[]);=0A=
JSAN.use("MochiKit.Visual",[]);=0A=
}=0A=
(function(){=0A=
var _625=3DMochiKit.Base.extend;=0A=
var self=3DMochiKit.MochiKit;=0A=
var _626=3Dself.SUBMODULES;=0A=
var _627=3D[];=0A=
var _628=3D[];=0A=
var _629=3D{};=0A=
var i,k,m,all;=0A=
for(i=3D0;i<_626.length;i++){=0A=
m=3DMochiKit[_626[i]];=0A=
_625(_627,m.EXPORT);=0A=
_625(_628,m.EXPORT_OK);=0A=
for(k in m.EXPORT_TAGS){=0A=
_629[k]=3D_625(_629[k],m.EXPORT_TAGS[k]);=0A=
}=0A=
all=3Dm.EXPORT_TAGS[":all"];=0A=
if(!all){=0A=
all=3D_625(null,m.EXPORT,m.EXPORT_OK);=0A=
}=0A=
var j;=0A=
for(j=3D0;j<all.length;j++){=0A=
k=3Dall[j];=0A=
self[k]=3Dm[k];=0A=
}=0A=
}=0A=
self.EXPORT=3D_627;=0A=
self.EXPORT_OK=3D_628;=0A=
self.EXPORT_TAGS=3D_629;=0A=
}());=0A=
}else{=0A=
if(typeof (MochiKit.__compat__)=3D=3D"undefined"){=0A=
MochiKit.__compat__=3Dtrue;=0A=
}=0A=
(function(){=0A=
var _630=3Ddocument.getElementsByTagName("script");=0A=
var =
_631=3D"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";=0A=
var base=3Dnull;=0A=
var _632=3Dnull;=0A=
var _633=3D{};=0A=
var i;=0A=
for(i=3D0;i<_630.length;i++){=0A=
var src=3D_630[i].getAttribute("src");=0A=
if(!src){=0A=
continue;=0A=
}=0A=
_633[src]=3Dtrue;=0A=
if(src.match(/MochiKit.js$/)){=0A=
base=3Dsrc.substring(0,src.lastIndexOf("MochiKit.js"));=0A=
_632=3D_630[i];=0A=
}=0A=
}=0A=
if(base=3D=3D=3Dnull){=0A=
return;=0A=
}=0A=
var _634=3DMochiKit.MochiKit.SUBMODULES;=0A=
for(var i=3D0;i<_634.length;i++){=0A=
if(MochiKit[_634[i]]){=0A=
continue;=0A=
}=0A=
var uri=3Dbase+_634[i]+".js";=0A=
if(uri in _633){=0A=
continue;=0A=
}=0A=
if(document.documentElement&&document.documentElement.namespaceURI=3D=3D_=
631){=0A=
var s=3Ddocument.createElementNS(_631,"script");=0A=
s.setAttribute("id","MochiKit_"+base+_634[i]);=0A=
s.setAttribute("src",uri);=0A=
s.setAttribute("type","application/x-javascript");=0A=
_632.parentNode.appendChild(s);=0A=
}else{=0A=
document.write("<script src=3D\""+uri+"\" =
type=3D\"text/javascript\"></script>");=0A=
}=0A=
}=0A=
})();=0A=
}=0A=
=0A=
=0A=

------=_NextPart_000_0002_01C6F7DF.C647F4D0--
