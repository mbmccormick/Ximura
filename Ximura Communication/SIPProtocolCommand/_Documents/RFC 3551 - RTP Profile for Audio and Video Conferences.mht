From: "Saved by Windows Internet Explorer 7"
Subject: rfc 3551
Date: Wed, 25 Oct 2006 02:44:20 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0007_01C6F7DF.78FC5BD0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.5600.16384

This is a multi-part message in MIME format.

------=_NextPart_000_0007_01C6F7DF.78FC5BD0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://tools.ietf.org/html/rfc3551

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en"><HEAD><TITLE>rfc 3551</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3Dindex,follow name=3Drobots>
<META content=3D"rfcmarkup version 1.31" name=3Dcreator>
<SCRIPT src=3D"http://tools.ietf.org/js/MochiKit.js"=20
type=3Dtext/javascript></SCRIPT>
<LINK href=3D"/rfc.png" type=3Dimage/png rel=3Dicon><LINK =
href=3D"/rfc.png"=20
type=3Dimage/png rel=3D"shortcut icon">
<STYLE type=3Dtext/css>BODY {
	FONT-SIZE: 1em; MARGIN: 8px
}
H1 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H2 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H3 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H4 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H5 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
H6 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h7 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h8 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
h9 {
	DISPLAY: inline; FONT-SIZE: 1em; LINE-HEIGHT: 0pt; FONT-FAMILY: =
monospace; WHITE-SPACE: pre
}
.pre {
	FONT-FAMILY: monospace; WHITE-SPACE: pre
}
.header {
	FONT-WEIGHT: bold
}
.header2 {
	FONT-WEIGHT: bold
}

@media Print   =20
{
BODY {
	FONT-SIZE: 10.5pt
}
H1 {
	FONT-SIZE: 10.5pt
}
H2 {
	FONT-SIZE: 10.5pt
}
H3 {
	FONT-SIZE: 10.5pt
}
H4 {
	FONT-SIZE: 10.5pt
}
H5 {
	FONT-SIZE: 10.5pt
}
H6 {
	FONT-SIZE: 10.5pt
}
h7 {
	FONT-SIZE: 10.5pt
}
h8 {
	FONT-SIZE: 10.5pt
}
h9 {
	FONT-SIZE: 10.5pt
}
A:link {
	TEXT-DECORATION: none
}
A:visited {
	TEXT-DECORATION: none
}
.break {
	PAGE-BREAK-BEFORE: always
}
.noprint {
	DISPLAY: none
}

}

@media Screen   =20
{
.grey {
	COLOR: #777
}
.grey A:link {
	COLOR: #777
}
.grey A:visited {
	COLOR: #777
}

}
</STYLE>

<SCRIPT><!--=0A=
    function addHeaderTags() {=0A=
	headertags =3D getElementsByTagAndClassName("span", "header");=0A=
	for ( i=3D0; i < headertags.length; i++) {=0A=
	    elem =3D headertags[i];=0A=
	    if (elem) {=0A=
		level =3D elem.getAttribute("level");=0A=
		elem.innerHTML =3D "<H"+level+">"+elem.innerHTML+"</H"+level+">";		=0A=
	    }=0A=
	}=0A=
    }=0A=
    // -->=0A=
    </SCRIPT>

<META content=3D"MSHTML 6.00.5600.16384" name=3DGENERATOR></HEAD>
<BODY onload=3DaddHeaderTags()><SPAN class=3D"pre noprint">[<A=20
href=3D"http://tools.ietf.org/rfc/">RFCs</A>] [<A=20
href=3D"http://tools.ietf.org/id/">I-Ds</A>] [<A=20
href=3D"http://tools.ietf.org/rfc/rfc3551.txt">Plain =
Text</A>]</SPAN><PRE>                                                    =
                   =20


Network Working Group                                     H. Schulzrinne
Request for Comments: 3551                           Columbia University
Obsoletes: <A href=3D"http://tools.ietf.org/html/rfc1890">1890</A>       =
                                         S. Casner
Category: Standards Track                                  Packet Design
                                                               July 2003


              <SPAN class=3Dheader level=3D"1">RTP Profile for Audio and =
Video Conferences</SPAN>
                          <SPAN class=3Dheader2>with Minimal =
Control</SPAN>

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

Abstract

   This document describes a profile called "RTP/AVP" for the use of the
   real-time transport protocol (RTP), version 2, and the associated
   control protocol, RTCP, within audio and video multiparticipant
   conferences with minimal control.  It provides interpretations of
   generic fields within the RTP specification suitable for audio and
   video conferences.  In particular, this document defines a set of
   default mappings from payload type numbers to encodings.

   This document also describes how audio and video data may be carried
   within RTP.  It defines a set of standard encodings and their names
   when used within RTP.  The descriptions provide pointers to reference
   implementations and the detailed standards.  This document is meant
   as an aid for implementors of audio, video and other real-time
   multimedia applications.

   This memorandum obsoletes <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A>.  It is mostly =
backwards-
   compatible except for functions removed because two interoperable
   implementations were not found.  The additions to <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> codify
   existing practice in the use of payload formats under this profile
   and include new payload formats defined since <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> was published.







<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 1]</SPAN>
<A id=3Dpage-2 href=3D"http://tools.ietf.org/html/rfc3551#page-2" =
name=3Dpage-2><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


Table of Contents

   1.  Introduction .................................................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-3">3</A>
       1.1  Terminology .............................................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-3">3</A>
   2.  RTP and RTCP Packet Forms and Protocol Behavior ..............  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-4">4</A>
   3.  Registering Additional Encodings .............................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-6">6</A>
   4.  Audio ........................................................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-8">8</A>
       4.1  Encoding-Independent Rules ..............................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-8">8</A>
       4.2  Operating Recommendations ...............................  =
<A href=3D"http://tools.ietf.org/html/rfc3551#page-9">9</A>
       4.3  Guidelines for Sample-Based Audio Encodings ............. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-10">10</A>
       4.4  Guidelines for Frame-Based Audio Encodings .............. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-11">11</A>
       4.5  Audio Encodings ......................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-12">12</A>
            4.5.1   DVI4 ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-13">13</A>
            4.5.2   G722 ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-14">14</A>
            4.5.3   G723 ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-14">14</A>
            4.5.4   G726-40, G726-32, G726-24, and G726-16 .......... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-18">18</A>
            4.5.5   G728 ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-19">19</A>
            4.5.6   G729 ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-20">20</A>
            4.5.7   G729D and G729E ................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-22">22</A>
            4.5.8   GSM ............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-24">24</A>
            4.5.9   GSM-EFR ......................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-27">27</A>
            4.5.10  L8 .............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-27">27</A>
            4.5.11  L16 ............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-27">27</A>
            4.5.12  LPC ............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-27">27</A>
            4.5.13  MPA ............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-28">28</A>
            4.5.14  PCMA and PCMU ................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-28">28</A>
            4.5.15  QCELP ........................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-28">28</A>
            4.5.16  RED ............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-29">29</A>
            4.5.17  VDVI ............................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-29">29</A>
   5.  Video ........................................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-30">30</A>
       5.1  CelB .................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-30">30</A>
       5.2  JPEG .................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-30">30</A>
       5.3  H261 .................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-30">30</A>
       5.4  H263 .................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-31">31</A>
       5.5  H263-1998 ............................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-31">31</A>
       5.6  MPV ..................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-31">31</A>
       5.7  MP2T .................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-31">31</A>
       5.8  nv ...................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-32">32</A>
   6.  Payload Type Definitions ..................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-32">32</A>
   7.  RTP over TCP and Similar Byte Stream Protocols ............... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-34">34</A>
   8.  Port Assignment .............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-34">34</A>
   9.  Changes from <A href=3D"http://tools.ietf.org/html/rfc1890">RFC =
1890</A> ........................................ <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-35">35</A>
   10. Security Considerations ...................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-38">38</A>
   11. IANA Considerations .......................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-39">39</A>
   12. References ................................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-39">39</A>
       12.1 Normative References .................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-39">39</A>
       12.2 Informative References .................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-39">39</A>
   13. Current Locations of Related Resources ....................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-41">41</A>



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 2]</SPAN>
<A id=3Dpage-3 href=3D"http://tools.ietf.org/html/rfc3551#page-3" =
name=3Dpage-3><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   14. Acknowledgments .............................................. <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-42">42</A>
   15. Intellectual Property Rights Statement ....................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-43">43</A>
   16. Authors' Addresses ........................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-43">43</A>
   17. Full Copyright Statement ..................................... <A =
href=3D"http://tools.ietf.org/html/rfc3551#page-44">44</A>

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-1>1</A>. =
Introduction</SPAN>

   This profile defines aspects of RTP left unspecified in the RTP
   Version 2 protocol definition (<A =
href=3D"http://tools.ietf.org/html/rfc3550">RFC 3550</A>) [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-1">1</A>].  This profile =
is
   intended for the use within audio and video conferences with minimal
   session control.  In particular, no support for the negotiation of
   parameters or membership control is provided.  The profile is
   expected to be useful in sessions where no negotiation or membership
   control are used (e.g., using the static payload types and the
   membership indications provided by RTCP), but this profile may also
   be useful in conjunction with a higher-level control protocol.

   Use of this profile may be implicit in the use of the appropriate
   applications; there may be no explicit indication by port number,
   protocol identifier or the like.  Applications such as session
   directories may use the name for this profile specified in Section
   11.

   Other profiles may make different choices for the items specified
   here.

   This document also defines a set of encodings and payload formats for
   audio and video.  These payload format descriptions are included here
   only as a matter of convenience since they are too small to warrant
   separate documents.  Use of these payload formats is NOT REQUIRED to
   use this profile.  Only the binding of some of the payload formats to
   static payload type numbers in Tables 4 and 5 is normative.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-1.1>1.1</A> =
Terminology</SPAN>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <A =
href=3D"http://tools.ietf.org/html/rfc2119">RFC 2119</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-2">2</A>] and
   indicate requirement levels for implementations compliant with this
   RTP profile.

   This document defines the term media type as dividing encodings of
   audio and video content into three classes: audio, video and
   audio/video (interleaved).







<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 3]</SPAN>
<A id=3Dpage-4 href=3D"http://tools.ietf.org/html/rfc3551#page-4" =
name=3Dpage-4><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-2>2</A>. RTP and RTCP =
Packet Forms and Protocol Behavior</SPAN>

   The section "RTP Profiles and Payload Format Specifications" of <A =
href=3D"http://tools.ietf.org/html/rfc3550">RFC</A>
   <A href=3D"http://tools.ietf.org/html/rfc3550">3550</A> enumerates a =
number of items that can be specified or modified
   in a profile.  This section addresses these items.  Generally, this
   profile follows the default and/or recommended aspects of the RTP
   specification.

   RTP data header: The standard format of the fixed RTP data
      header is used (one marker bit).

   Payload types: Static payload types are defined in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-6">Section 6</A>.

   RTP data header additions: No additional fixed fields are
      appended to the RTP data header.

   RTP data header extensions: No RTP header extensions are
      defined, but applications operating under this profile MAY use
      such extensions.  Thus, applications SHOULD NOT assume that the
      RTP header X bit is always zero and SHOULD be prepared to ignore
      the header extension.  If a header extension is defined in the
      future, that definition MUST specify the contents of the first 16
      bits in such a way that multiple different extensions can be
      identified.

   RTCP packet types: No additional RTCP packet types are defined
      by this profile specification.

   RTCP report interval: The suggested constants are to be used for
      the RTCP report interval calculation.  Sessions operating under
      this profile MAY specify a separate parameter for the RTCP traffic
      bandwidth rather than using the default fraction of the session
      bandwidth.  The RTCP traffic bandwidth MAY be divided into two
      separate session parameters for those participants which are
      active data senders and those which are not.  Following the
      recommendation in the RTP specification [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-1">1</A>] that 1/4 of the =
RTCP
      bandwidth be dedicated to data senders, the RECOMMENDED default
      values for these two parameters would be 1.25% and 3.75%,
      respectively.  For a particular session, the RTCP bandwidth for
      non-data-senders MAY be set to zero when operating on
      unidirectional links or for sessions that don't require feedback
      on the quality of reception.  The RTCP bandwidth for data senders
      SHOULD be kept non-zero so that sender reports can still be sent
      for inter-media synchronization and to identify the source by
      CNAME.  The means by which the one or two session parameters for
      RTCP bandwidth are specified is beyond the scope of this memo.





<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 4]</SPAN>
<A id=3Dpage-5 href=3D"http://tools.ietf.org/html/rfc3551#page-5" =
name=3Dpage-5><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   SR/RR extension: No extension section is defined for the RTCP SR
      or RR packet.

   SDES use: Applications MAY use any of the SDES items described
      in the RTP specification.  While CNAME information MUST be sent
      every reporting interval, other items SHOULD only be sent every
      third reporting interval, with NAME sent seven out of eight times
      within that slot and the remaining SDES items cyclically taking up
      the eighth slot, as defined in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-6.2.2">Section =
6.2.2</A> of the RTP
      specification.  In other words, NAME is sent in RTCP packets 1, 4,
      7, 10, 13, 16, 19, while, say, EMAIL is used in RTCP packet 22.

   Security: The RTP default security services are also the default
      under this profile.

   String-to-key mapping: No mapping is specified by this profile.

   Congestion: RTP and this profile may be used in the context of
      enhanced network service, for example, through Integrated Services
      (<A href=3D"http://tools.ietf.org/html/rfc1633">RFC 1633</A>) [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-4">4</A>] or =
Differentiated Services (<A =
href=3D"http://tools.ietf.org/html/rfc2475">RFC 2475</A>) [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-5">5</A>], or they
      may be used with best effort service.

      If enhanced service is being used, RTP receivers SHOULD monitor
      packet loss to ensure that the service that was requested is
      actually being delivered.  If it is not, then they SHOULD assume
      that they are receiving best-effort service and behave
      accordingly.

      If best-effort service is being used, RTP receivers SHOULD monitor
      packet loss to ensure that the packet loss rate is within
      acceptable parameters.  Packet loss is considered acceptable if a
      TCP flow across the same network path and experiencing the same
      network conditions would achieve an average throughput, measured
      on a reasonable timescale, that is not less than the RTP flow is
      achieving.  This condition can be satisfied by implementing
      congestion control mechanisms to adapt the transmission rate (or
      the number of layers subscribed for a layered multicast session),
      or by arranging for a receiver to leave the session if the loss
      rate is unacceptably high.

      The comparison to TCP cannot be specified exactly, but is intended
      as an "order-of-magnitude" comparison in timescale and throughput.
      The timescale on which TCP throughput is measured is the round-
      trip time of the connection.  In essence, this requirement states
      that it is not acceptable to deploy an application (using RTP or
      any other transport protocol) on the best-effort Internet which
      consumes bandwidth arbitrarily and does not compete fairly with
      TCP within an order of magnitude.



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 5]</SPAN>
<A id=3Dpage-6 href=3D"http://tools.ietf.org/html/rfc3551#page-6" =
name=3Dpage-6><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   Underlying protocol: The profile specifies the use of RTP over
      unicast and multicast UDP as well as TCP.  (This does not preclude
      the use of these definitions when RTP is carried by other lower-
      layer protocols.)

   Transport mapping: The standard mapping of RTP and RTCP to
      transport-level addresses is used.

   Encapsulation: This profile leaves to applications the
      specification of RTP encapsulation in protocols other than UDP.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-3>3</A>.  Registering =
Additional Encodings</SPAN>

   This profile lists a set of encodings, each of which is comprised of
   a particular media data compression or representation plus a payload
   format for encapsulation within RTP.  Some of those payload formats
   are specified here, while others are specified in separate RFCs.  It
   is expected that additional encodings beyond the set listed here will
   be created in the future and specified in additional payload format
   RFCs.

   This profile also assigns to each encoding a short name which MAY be
   used by higher-level control protocols, such as the Session
   Description Protocol (SDP), <A =
href=3D"http://tools.ietf.org/html/rfc2327">RFC 2327</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-6">6</A>], to identify =
encodings
   selected for a particular RTP session.

   In some contexts it may be useful to refer to these encodings in the
   form of a MIME content-type.  To facilitate this, <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>]
   provides registrations for all of the encodings names listed here as
   MIME subtype names under the "audio" and "video" MIME types through
   the MIME registration procedure as specified in <A =
href=3D"http://tools.ietf.org/html/rfc2048">RFC 2048</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-8">8</A>].

   Any additional encodings specified for use under this profile (or
   others) may also be assigned names registered as MIME subtypes with
   the Internet Assigned Numbers Authority (IANA).  This registry
   provides a means to insure that the names assigned to the additional
   encodings are kept unique.  <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> specifies the =
information that
   is required for the registration of RTP encodings.

   In addition to assigning names to encodings, this profile also
   assigns static RTP payload type numbers to some of them.  However,
   the payload type number space is relatively small and cannot
   accommodate assignments for all existing and future encodings.
   During the early stages of RTP development, it was necessary to use
   statically assigned payload types because no other mechanism had been
   specified to bind encodings to payload types.  It was anticipated
   that non-RTP means beyond the scope of this memo (such as directory
   services or invitation protocols) would be specified to establish a



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 6]</SPAN>
<A id=3Dpage-7 href=3D"http://tools.ietf.org/html/rfc3551#page-7" =
name=3Dpage-7><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   dynamic mapping between a payload type and an encoding.  Now,
   mechanisms for defining dynamic payload type bindings have been
   specified in the Session Description Protocol (SDP) and in other
   protocols such as ITU-T Recommendation H.323/H.245.  These mechanisms
   associate the registered name of the encoding/payload format, along
   with any additional required parameters, such as the RTP timestamp
   clock rate and number of channels, with a payload type number.  This
   association is effective only for the duration of the RTP session in
   which the dynamic payload type binding is made.  This association
   applies only to the RTP session for which it is made, thus the
   numbers can be re-used for different encodings in different sessions
   so the number space limitation is avoided.

   This profile reserves payload type numbers in the range 96-127
   exclusively for dynamic assignment.  Applications SHOULD first use
   values in this range for dynamic payload types.  Those applications
   which need to define more than 32 dynamic payload types MAY bind
   codes below 96, in which case it is RECOMMENDED that unassigned
   payload type numbers be used first.  However, the statically assigned
   payload types are default bindings and MAY be dynamically bound to
   new encodings if needed.  Redefining payload types below 96 may cause
   incorrect operation if an attempt is made to join a session without
   obtaining session description information that defines the dynamic
   payload types.

   Dynamic payload types SHOULD NOT be used without a well-defined
   mechanism to indicate the mapping.  Systems that expect to
   interoperate with others operating under this profile SHOULD NOT make
   their own assignments of proprietary encodings to particular, fixed
   payload types.

   This specification establishes the policy that no additional static
   payload types will be assigned beyond the ones defined in this
   document.  Establishing this policy avoids the problem of trying to
   create a set of criteria for accepting static assignments and
   encourages the implementation and deployment of the dynamic payload
   type mechanisms.

   The final set of static payload type assignments is provided in
   Tables 4 and 5.











<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 7]</SPAN>
<A id=3Dpage-8 href=3D"http://tools.ietf.org/html/rfc3551#page-8" =
name=3Dpage-8><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-4>4</A>.  =
Audio</SPAN>

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.1>4.1</A>  =
Encoding-Independent Rules</SPAN>

   Since the ability to suppress silence is one of the primary
   motivations for using packets to transmit voice, the RTP header
   carries both a sequence number and a timestamp to allow a receiver to
   distinguish between lost packets and periods of time when no data was
   transmitted.  Discontiguous transmission (silence suppression) MAY be
   used with any audio payload format.  Receivers MUST assume that
   senders may suppress silence unless this is restricted by signaling
   specified elsewhere.  (Even if the transmitter does not suppress
   silence, the receiver should be prepared to handle periods when no
   data is present since packets may be lost.)

   Some payload formats (see Sections 4.5.3 and 4.5.6) define a "silence
   insertion descriptor" or "comfort noise" frame to specify parameters
   for artificial noise that may be generated during a period of silence
   to approximate the background noise at the source.  For other payload
   formats, a generic Comfort Noise (CN) payload format is specified in
   <A href=3D"http://tools.ietf.org/html/rfc3389">RFC 3389</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-9">9</A>].  When the CN =
payload format is used with another
   payload format, different values in the RTP payload type field
   distinguish comfort-noise packets from those of the selected payload
   format.

   For applications which send either no packets or occasional comfort-
   noise packets during silence, the first packet of a talkspurt, that
   is, the first packet after a silence period during which packets have
   not been transmitted contiguously, SHOULD be distinguished by setting
   the marker bit in the RTP data header to one.  The marker bit in all
   other packets is zero.  The beginning of a talkspurt MAY be used to
   adjust the playout delay to reflect changing network delays.
   Applications without silence suppression MUST set the marker bit to
   zero.

   The RTP clock rate used for generating the RTP timestamp is
   independent of the number of channels and the encoding; it usually
   equals the number of sampling periods per second.  For N-channel
   encodings, each sampling period (say, 1/8,000 of a second) generates
   N samples.  (This terminology is standard, but somewhat confusing, as
   the total number of samples generated per second is then the sampling
   rate times the channel count.)

   If multiple audio channels are used, channels are numbered left-to-
   right, starting at one.  In RTP audio packets, information from
   lower-numbered channels precedes that from higher-numbered channels.





<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 8]</SPAN>
<A id=3Dpage-9 href=3D"http://tools.ietf.org/html/rfc3551#page-9" =
name=3Dpage-9><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   For more than two channels, the convention followed by the AIFF-C
   audio interchange format SHOULD be followed [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-3">3</A>], using the =
following
   notation, unless some other convention is specified for a particular
   encoding or payload format:

      l  left
      r  right
      c  center
      S  surround
      F  front
      R  rear

      channels  description  channel
                                1     2   3   4   5   6
      _________________________________________________
      2         stereo          l     r
      3                         l     r   c
      4                         l     c   r   S
      5                        Fl     Fr  Fc  Sl  Sr
      6                         l     lc  c   r   rc  S

         Note: <A href=3D"http://tools.ietf.org/html/rfc1890">RFC =
1890</A> defined two conventions for the ordering of four
         audio channels.  Since the ordering is indicated implicitly by
         the number of channels, this was ambiguous.  In this revision,
         the order described as "quadrophonic" has been eliminated to
         remove the ambiguity.  This choice was based on the observation
         that quadrophonic consumer audio format did not become popular
         whereas surround-sound subsequently has.

   Samples for all channels belonging to a single sampling instant MUST
   be within the same packet.  The interleaving of samples from
   different channels depends on the encoding.  General guidelines are
   given in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.3">Section 4.3</A> =
and 4.4.

   The sampling frequency SHOULD be drawn from the set:  8,000, 11,025,
   16,000, 22,050, 24,000, 32,000, 44,100 and 48,000 Hz.  (Older Apple
   Macintosh computers had a native sample rate of 22,254.54 Hz, which
   can be converted to 22,050 with acceptable quality by dropping 4
   samples in a 20 ms frame.)  However, most audio encodings are defined
   for a more restricted set of sampling frequencies.  Receivers SHOULD
   be prepared to accept multi-channel audio, but MAY choose to only
   play a single channel.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.2>4.2</A>  =
Operating Recommendations</SPAN>

   The following recommendations are default operating parameters.
   Applications SHOULD be prepared to handle other values.  The ranges
   given are meant to give guidance to application writers, allowing a



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
              [Page 9]</SPAN>
<A id=3Dpage-10 href=3D"http://tools.ietf.org/html/rfc3551#page-10" =
name=3Dpage-10><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   set of applications conforming to these guidelines to interoperate
   without additional negotiation.  These guidelines are not intended to
   restrict operating parameters for applications that can negotiate a
   set of interoperable parameters, e.g., through a conference control
   protocol.

   For packetized audio, the default packetization interval SHOULD have
   a duration of 20 ms or one frame, whichever is longer, unless
   otherwise noted in Table 1 (column "ms/packet").  The packetization
   interval determines the minimum end-to-end delay; longer packets
   introduce less header overhead but higher delay and make packet loss
   more noticeable.  For non-interactive applications such as lectures
   or for links with severe bandwidth constraints, a higher
   packetization delay MAY be used.  A receiver SHOULD accept packets
   representing between 0 and 200 ms of audio data.  (For framed audio
   encodings, a receiver SHOULD accept packets with a number of frames
   equal to 200 ms divided by the frame duration, rounded up.)  This
   restriction allows reasonable buffer sizing for the receiver.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.3>4.3</A>  =
Guidelines for Sample-Based Audio Encodings</SPAN>

   In sample-based encodings, each audio sample is represented by a
   fixed number of bits.  Within the compressed audio data, codes for
   individual samples may span octet boundaries.  An RTP audio packet
   may contain any number of audio samples, subject to the constraint
   that the number of bits per sample times the number of samples per
   packet yields an integral octet count.  Fractional encodings produce
   less than one octet per sample.

   The duration of an audio packet is determined by the number of
   samples in the packet.

   For sample-based encodings producing one or more octets per sample,
   samples from different channels sampled at the same sampling instant
   SHOULD be packed in consecutive octets.  For example, for a two-
   channel encoding, the octet sequence is (left channel, first sample),
   (right channel, first sample), (left channel, second sample), (right
   channel, second sample), ....  For multi-octet encodings, octets
   SHOULD be transmitted in network byte order (i.e., most significant
   octet first).

   The packing of sample-based encodings producing less than one octet
   per sample is encoding-specific.

   The RTP timestamp reflects the instant at which the first sample in
   the packet was sampled, that is, the oldest information in the
   packet.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 10]</SPAN>
<A id=3Dpage-11 href=3D"http://tools.ietf.org/html/rfc3551#page-11" =
name=3Dpage-11><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.4>4.4</A>  =
Guidelines for Frame-Based Audio Encodings</SPAN>

   Frame-based encodings encode a fixed-length block of audio into
   another block of compressed data, typically also of fixed length.
   For frame-based encodings, the sender MAY choose to combine several
   such frames into a single RTP packet.  The receiver can tell the
   number of frames contained in an RTP packet, if all the frames have
   the same length, by dividing the RTP payload length by the audio
   frame size which is defined as part of the encoding.  This does not
   work when carrying frames of different sizes unless the frame sizes
   are relatively prime.  If not, the frames MUST indicate their size.

   For frame-based codecs, the channel order is defined for the whole
   block.  That is, for two-channel audio, right and left samples SHOULD
   be coded independently, with the encoded frame for the left channel
   preceding that for the right channel.

   All frame-oriented audio codecs SHOULD be able to encode and decode
   several consecutive frames within a single packet.  Since the frame
   size for the frame-oriented codecs is given, there is no need to use
   a separate designation for the same encoding, but with different
   number of frames per packet.

   RTP packets SHALL contain a whole number of frames, with frames
   inserted according to age within a packet, so that the oldest frame
   (to be played first) occurs immediately after the RTP packet header.
   The RTP timestamp reflects the instant at which the first sample in
   the first frame was sampled, that is, the oldest information in the
   packet.






















<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 11]</SPAN>
<A id=3Dpage-12 href=3D"http://tools.ietf.org/html/rfc3551#page-12" =
name=3Dpage-12><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-4.5>4.5</A> Audio =
Encodings</SPAN>

   name of                              sampling              default
   encoding  sample/frame  bits/sample      rate  ms/frame  ms/packet
   __________________________________________________________________
   DVI4      sample        4                var.                   20
   G722      sample        8              16,000                   20
   G723      frame         N/A             8,000        30         30
   G726-40   sample        5               8,000                   20
   G726-32   sample        4               8,000                   20
   G726-24   sample        3               8,000                   20
   G726-16   sample        2               8,000                   20
   G728      frame         N/A             8,000       2.5         20
   G729      frame         N/A             8,000        10         20
   G729D     frame         N/A             8,000        10         20
   G729E     frame         N/A             8,000        10         20
   GSM       frame         N/A             8,000        20         20
   GSM-EFR   frame         N/A             8,000        20         20
   L8        sample        8                var.                   20
   L16       sample        16               var.                   20
   LPC       frame         N/A             8,000        20         20
   MPA       frame         N/A              var.      var.
   PCMA      sample        8                var.                   20
   PCMU      sample        8                var.                   20
   QCELP     frame         N/A             8,000        20         20
   VDVI      sample        var.             var.                   20

   Table 1: Properties of Audio Encodings (N/A: not applicable; var.:
            variable)

   The characteristics of the audio encodings described in this document
   are shown in Table 1; they are listed in order of their payload type
   in Table 4.  While most audio codecs are only specified for a fixed
   sampling rate, some sample-based algorithms (indicated by an entry of
   "var." in the sampling rate column of Table 1) may be used with
   different sampling rates, resulting in different coded bit rates.
   When used with a sampling rate other than that for which a static
   payload type is defined, non-RTP means beyond the scope of this memo
   MUST be used to define a dynamic payload type and MUST indicate the
   selected RTP timestamp clock rate, which is usually the same as the
   sampling rate for audio.










<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 12]</SPAN>
<A id=3Dpage-13 href=3D"http://tools.ietf.org/html/rfc3551#page-13" =
name=3Dpage-13><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.1>4.5.1</A> =
DVI4</SPAN>

   DVI4 uses an adaptive delta pulse code modulation (ADPCM) encoding
   scheme that was specified by the Interactive Multimedia Association
   (IMA) as the "IMA ADPCM wave type".  However, the encoding defined
   here as DVI4 differs in three respects from the IMA specification:

   o  The RTP DVI4 header contains the predicted value rather than the
      first sample value contained the IMA ADPCM block header.

   o  IMA ADPCM blocks contain an odd number of samples, since the first
      sample of a block is contained just in the header (uncompressed),
      followed by an even number of compressed samples.  DVI4 has an
      even number of compressed samples only, using the `predict' word
      from the header to decode the first sample.

   o  For DVI4, the 4-bit samples are packed with the first sample in
      the four most significant bits and the second sample in the four
      least significant bits.  In the IMA ADPCM codec, the samples are
      packed in the opposite order.

   Each packet contains a single DVI block.  This profile only defines
   the 4-bit-per-sample version, while IMA also specified a 3-bit-per-
   sample encoding.

   The "header" word for each channel has the following structure:

      int16  predict;  /* predicted value of first sample
                          from the previous block (L16 format) */
      u_int8 index;    /* current index into stepsize table */
      u_int8 reserved; /* set to zero by sender, ignored by receiver */

   Each octet following the header contains two 4-bit samples, thus the
   number of samples per packet MUST be even because there is no means
   to indicate a partially filled last octet.

   Packing of samples for multiple channels is for further study.

   The IMA ADPCM algorithm was described in the document IMA Recommended
   Practices for Enhancing Digital Audio Compatibility in Multimedia
   Systems (version 3.0).  However, the Interactive Multimedia
   Association ceased operations in 1997.  Resources for an archived
   copy of that document and a software implementation of the RTP DVI4
   encoding are listed in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-13">Section 13</A>.







<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 13]</SPAN>
<A id=3Dpage-14 href=3D"http://tools.ietf.org/html/rfc3551#page-14" =
name=3Dpage-14><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.2>4.5.2</A> =
G722</SPAN>

   G722 is specified in ITU-T Recommendation G.722, "7 kHz audio-coding
   within 64 kbit/s".  The G.722 encoder produces a stream of octets,
   each of which SHALL be octet-aligned in an RTP packet.  The first bit
   transmitted in the G.722 octet, which is the most significant bit of
   the higher sub-band sample, SHALL correspond to the most significant
   bit of the octet in the RTP packet.

   Even though the actual sampling rate for G.722 audio is 16,000 Hz,
   the RTP clock rate for the G722 payload format is 8,000 Hz because
   that value was erroneously assigned in <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> and must remain
   unchanged for backward compatibility.  The octet rate or sample-pair
   rate is 8,000 Hz.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.3>4.5.3</A> =
G723</SPAN>

   G723 is specified in ITU Recommendation G.723.1, "Dual-rate speech
   coder for multimedia communications transmitting at 5.3 and 6.3
   kbit/s".  The G.723.1 5.3/6.3 kbit/s codec was defined by the ITU-T
   as a mandatory codec for ITU-T H.324 GSTN videophone terminal
   applications.  The algorithm has a floating point specification in
   Annex B to G.723.1, a silence compression algorithm in Annex A to
   G.723.1 and a scalable channel coding scheme for wireless
   applications in G.723.1 Annex C.

   This Recommendation specifies a coded representation that can be used
   for compressing the speech signal component of multi-media services
   at a very low bit rate.  Audio is encoded in 30 ms frames, with an
   additional delay of 7.5 ms due to look-ahead.  A G.723.1 frame can be
   one of three sizes:  24 octets (6.3 kb/s frame), 20 octets (5.3 kb/s
   frame), or 4 octets.  These 4-octet frames are called SID frames
   (Silence Insertion Descriptor) and are used to specify comfort noise
   parameters.  There is no restriction on how 4, 20, and 24 octet
   frames are intermixed.  The least significant two bits of the first
   octet in the frame determine the frame size and codec type:

         bits  content                      octets/frame
         00    high-rate speech (6.3 kb/s)            24
         01    low-rate speech  (5.3 kb/s)            20
         10    SID frame                               4
         11    reserved









<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 14]</SPAN>
<A id=3Dpage-15 href=3D"http://tools.ietf.org/html/rfc3551#page-15" =
name=3Dpage-15><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   It is possible to switch between the two rates at any 30 ms frame
   boundary.  Both (5.3 kb/s and 6.3 kb/s) rates are a mandatory part of
   the encoder and decoder.  Receivers MUST accept both data rates and
   MUST accept SID frames unless restriction of these capabilities has
   been signaled.  The MIME registration for G723 in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>]
   specifies parameters that MAY be used with MIME or SDP to restrict to
   a single data rate or to restrict the use of SID frames.  This coder
   was optimized to represent speech with near-toll quality at the above
   rates using a limited amount of complexity.

   The packing of the encoded bit stream into octets and the
   transmission order of the octets is specified in Rec. G.723.1 and is
   the same as that produced by the G.723 C code reference
   implementation.  For the 6.3 kb/s data rate, this packing is
   illustrated as follows, where the header (HDR) bits are always "0 0"
   as shown in Fig. 1 to indicate operation at 6.3 kb/s, and the Z bit
   is always set to zero.  The diagrams show the bit packing in "network
   byte order", also known as big-endian order.  The bits of each 32-bit
   word are numbered 0 to 31, with the most significant bit on the left
   and numbered 0.  The octets (bytes) of each word are transmitted most
   significant octet first.  The bits of each data field are numbered in
   the order of the bit stream representation of the encoding (least
   significant bit first).  The vertical bars indicate the boundaries
   between field fragments.



























<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 15]</SPAN>
<A id=3Dpage-16 href=3D"http://tools.ietf.org/html/rfc3551#page-16" =
name=3Dpage-16><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    LPC    |HDR|      LPC      |      LPC      |    ACL0   |LPC|
   |           |   |               |               |           |   |
   |0 0 0 0 0 0|0 0|1 1 1 1 0 0 0 0|2 2 1 1 1 1 1 1|0 0 0 0 0 0|2 2|
   |5 4 3 2 1 0|   |3 2 1 0 9 8 7 6|1 0 9 8 7 6 5 4|5 4 3 2 1 0|3 2|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  ACL2   |ACL|A| GAIN0 |ACL|ACL|    GAIN0      |    GAIN1      |
   |         | 1 |C|       | 3 | 2 |               |               |
   |0 0 0 0 0|0 0|0|0 0 0 0|0 0|0 0|1 1 0 0 0 0 0 0|0 0 0 0 0 0 0 0|
   |4 3 2 1 0|1 0|6|3 2 1 0|1 0|6 5|1 0 9 8 7 6 5 4|7 6 5 4 3 2 1 0|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | GAIN2 | GAIN1 |     GAIN2     |     GAIN3     | GRID  | GAIN3 |
   |       |       |               |               |       |       |
   |0 0 0 0|1 1 0 0|1 1 0 0 0 0 0 0|0 0 0 0 0 0 0 0|0 0 0 0|1 1 0 0|
   |3 2 1 0|1 0 9 8|1 0 9 8 7 6 5 4|7 6 5 4 3 2 1 0|3 2 1 0|1 0 9 8|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   MSBPOS    |Z|POS|  MSBPOS   |     POS0      |POS|   POS0    |
   |             | | 0 |           |               | 1 |           |
   |0 0 0 0 0 0 0|0|0 0|1 1 1 0 0 0|0 0 0 0 0 0 0 0|0 0|1 1 1 1 1 1|
   |6 5 4 3 2 1 0| |1 0|2 1 0 9 8 7|9 8 7 6 5 4 3 2|1 0|5 4 3 2 1 0|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     POS1      | POS2  | POS1  |     POS2      | POS3  | POS2  |
   |               |       |       |               |       |       |
   |0 0 0 0 0 0 0 0|0 0 0 0|1 1 1 1|1 1 0 0 0 0 0 0|0 0 0 0|1 1 1 1|
   |9 8 7 6 5 4 3 2|3 2 1 0|3 2 1 0|1 0 9 8 7 6 5 4|3 2 1 0|5 4 3 2|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     POS3      |   PSIG0   |POS|PSIG2|  PSIG1  |  PSIG3  |PSIG2|
   |               |           | 3 |     |         |         |     |
   |1 1 0 0 0 0 0 0|0 0 0 0 0 0|1 1|0 0 0|0 0 0 0 0|0 0 0 0 0|0 0 0|
   |1 0 9 8 7 6 5 4|5 4 3 2 1 0|3 2|2 1 0|4 3 2 1 0|4 3 2 1 0|5 4 3|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 1: G.723 (6.3 kb/s) bit packing

   For the 5.3 kb/s data rate, the header (HDR) bits are always "0 1",
   as shown in Fig. 2, to indicate operation at 5.3 kb/s.













<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 16]</SPAN>
<A id=3Dpage-17 href=3D"http://tools.ietf.org/html/rfc3551#page-17" =
name=3Dpage-17><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    LPC    |HDR|      LPC      |      LPC      |   ACL0    |LPC|
   |           |   |               |               |           |   |
   |0 0 0 0 0 0|0 1|1 1 1 1 0 0 0 0|2 2 1 1 1 1 1 1|0 0 0 0 0 0|2 2|
   |5 4 3 2 1 0|   |3 2 1 0 9 8 7 6|1 0 9 8 7 6 5 4|5 4 3 2 1 0|3 2|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  ACL2   |ACL|A| GAIN0 |ACL|ACL|     GAIN0     |     GAIN1     |
   |         | 1 |C|       | 3 | 2 |               |               |
   |0 0 0 0 0|0 0|0|0 0 0 0|0 0|0 0|1 1 0 0 0 0 0 0|0 0 0 0 0 0 0 0|
   |4 3 2 1 0|1 0|6|3 2 1 0|1 0|6 5|1 0 9 8 7 6 5 4|7 6 5 4 3 2 1 0|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | GAIN2 | GAIN1 |     GAIN2     |    GAIN3      | GRID  | GAIN3 |
   |       |       |               |               |       |       |
   |0 0 0 0|1 1 0 0|1 1 0 0 0 0 0 0|0 0 0 0 0 0 0 0|0 0 0 0|1 1 0 0|
   |3 2 1 0|1 0 9 8|1 0 9 8 7 6 5 4|7 6 5 4 3 2 1 0|4 3 2 1|1 0 9 8|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     POS0      | POS1  | POS0  |     POS1      |     POS2      |
   |               |       |       |               |               |
   |0 0 0 0 0 0 0 0|0 0 0 0|1 1 0 0|1 1 0 0 0 0 0 0|0 0 0 0 0 0 0 0|
   |7 6 5 4 3 2 1 0|3 2 1 0|1 0 9 8|1 0 9 8 7 6 5 4|7 6 5 4 3 2 1 0|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | POS3  | POS2  |     POS3      | PSIG1 | PSIG0 | PSIG3 | PSIG2 |
   |       |       |               |       |       |       |       |
   |0 0 0 0|1 1 0 0|1 1 0 0 0 0 0 0|0 0 0 0|0 0 0 0|0 0 0 0|0 0 0 0|
   |3 2 1 0|1 0 9 8|1 0 9 8 7 6 5 4|3 2 1 0|3 2 1 0|3 2 1 0|3 2 1 0|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 2: G.723 (5.3 kb/s) bit packing

   The packing of G.723.1 SID (silence) frames, which are indicated by
   the header (HDR) bits having the pattern "1 0", is depicted in Fig.
   3.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    LPC    |HDR|      LPC      |      LPC      |   GAIN    |LPC|
   |           |   |               |               |           |   |
   |0 0 0 0 0 0|1 0|1 1 1 1 0 0 0 0|2 2 1 1 1 1 1 1|0 0 0 0 0 0|2 2|
   |5 4 3 2 1 0|   |3 2 1 0 9 8 7 6|1 0 9 8 7 6 5 4|5 4 3 2 1 0|3 2|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                   Figure 3: G.723 SID mode bit packing






<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 17]</SPAN>
<A id=3Dpage-18 href=3D"http://tools.ietf.org/html/rfc3551#page-18" =
name=3Dpage-18><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.4>4.5.4</A>  =
G726-40, G726-32, G726-24, and G726-16</SPAN>

   ITU-T Recommendation G.726 describes, among others, the algorithm
   recommended for conversion of a single 64 kbit/s A-law or mu-law PCM
   channel encoded at 8,000 samples/sec to and from a 40, 32, 24, or 16
   kbit/s channel.  The conversion is applied to the PCM stream using an
   Adaptive Differential Pulse Code Modulation (ADPCM) transcoding
   technique.  The ADPCM representation consists of a series of
   codewords with a one-to-one correspondence to the samples in the PCM
   stream.  The G726 data rates of 40, 32, 24, and 16 kbit/s have
   codewords of 5, 4, 3, and 2 bits, respectively.

   The 16 and 24 kbit/s encodings do not provide toll quality speech.
   They are designed for used in overloaded Digital Circuit
   Multiplication Equipment (DCME).  ITU-T G.726 recommends that the 16
   and 24 kbit/s encodings should be alternated with higher data rate
   encodings to provide an average sample size of between 3.5 and 3.7
   bits per sample.

   The encodings of G.726 are here denoted as G726-40, G726-32, G726-24,
   and G726-16.  Prior to 1990, G721 described the 32 kbit/s ADPCM
   encoding, and G723 described the 40, 32, and 16 kbit/s encodings.
   Thus, G726-32 designates the same algorithm as G721 in <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A>.

   A stream of G726 codewords contains no information on the encoding
   being used, therefore transitions between G726 encoding types are not
   permitted within a sequence of packed codewords.  Applications MUST
   determine the encoding type of packed codewords from the RTP payload
   identifier.

   No payload-specific header information SHALL be included as part of
   the audio data.  A stream of G726 codewords MUST be packed into
   octets as follows:  the first codeword is placed into the first octet
   such that the least significant bit of the codeword aligns with the
   least significant bit in the octet, the second codeword is then
   packed so that its least significant bit coincides with the least
   significant unoccupied bit in the octet.  When a complete codeword
   cannot be placed into an octet, the bits overlapping the octet
   boundary are placed into the least significant bits of the next
   octet.  Packing MUST end with a completely packed final octet.  The
   number of codewords packed will therefore be a multiple of 8, 2, 8,
   and 4 for G726-40, G726-32, G726-24, and G726-16, respectively.  An
   example of the packing scheme for G726-32 codewords is as shown,
   where bit 7 is the least significant bit of the first octet, and bit
   A3 is the least significant bit of the first codeword:






<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 18]</SPAN>
<A id=3Dpage-19 href=3D"http://tools.ietf.org/html/rfc3551#page-19" =
name=3Dpage-19><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


          0                   1
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
         |B B B B|A A A A|D D D D|C C C C| ...
         |0 1 2 3|0 1 2 3|0 1 2 3|0 1 2 3|
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

   An example of the packing scheme for G726-24 codewords follows, where
   again bit 7 is the least significant bit of the first octet, and bit
   A2 is the least significant bit of the first codeword:

          0                   1                   2
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
         |C C|B B B|A A A|F|E E E|D D D|C|H H H|G G G|F F| ...
         |1 2|0 1 2|0 1 2|2|0 1 2|0 1 2|0|0 1 2|0 1 2|0 1|
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

   Note that the "little-endian" direction in which samples are packed
   into octets in the G726-16, -24, -32 and -40 payload formats
   specified here is consistent with ITU-T Recommendation X.420, but is
   the opposite of what is specified in ITU-T Recommendation I.366.2
   Annex E for ATM AAL2 transport.  A second set of RTP payload formats
   matching the packetization of I.366.2 Annex E and identified by MIME
   subtypes AAL2-G726-16, -24, -32 and -40 will be specified in a
   separate document.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.5>4.5.5</A> =
G728</SPAN>

   G728 is specified in ITU-T Recommendation G.728, "Coding of speech at
   16 kbit/s using low-delay code excited linear prediction".

   A G.278 encoder translates 5 consecutive audio samples into a 10-bit
   codebook index, resulting in a bit rate of 16 kb/s for audio sampled
   at 8,000 samples per second.  The group of five consecutive samples
   is called a vector.  Four consecutive vectors, labeled V1 to V4
   (where V1 is to be played first by the receiver), build one G.728
   frame.  The four vectors of 40 bits are packed into 5 octets, labeled
   B1 through B5.  B1 SHALL be placed first in the RTP packet.

   Referring to the figure below, the principle for bit order is
   "maintenance of bit significance".  Bits from an older vector are
   more significant than bits from newer vectors.  The MSB of the frame
   goes to the MSB of B1 and the LSB of the frame goes to LSB of B5.







<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 19]</SPAN>
<A id=3Dpage-20 href=3D"http://tools.ietf.org/html/rfc3551#page-20" =
name=3Dpage-20><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


                   1         2         3        3
         0         0         0         0        9
         ++++++++++++++++++++++++++++++++++++++++
         =
&lt;---V1---&gt;&lt;---V2---&gt;&lt;---V3---&gt;&lt;---V4---&gt; vectors
         =
&lt;--B1--&gt;&lt;--B2--&gt;&lt;--B3--&gt;&lt;--B4--&gt;&lt;--B5--&gt; =
octets
         &lt;------------- frame 1 ----------------&gt;

   In particular, B1 contains the eight most significant bits of V1,
   with the MSB of V1 being the MSB of B1.  B2 contains the two least
   significant bits of V1, the more significant of the two in its MSB,
   and the six most significant bits of V2.  B1 SHALL be placed first in
   the RTP packet and B5 last.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.6>4.5.6</A> =
G729</SPAN>

   G729 is specified in ITU-T Recommendation G.729, "Coding of speech at
   8 kbit/s using conjugate structure-algebraic code excited linear
   prediction (CS-ACELP)".  A reduced-complexity version of the G.729
   algorithm is specified in Annex A to Rec. G.729.  The speech coding
   algorithms in the main body of G.729 and in G.729 Annex A are fully
   interoperable with each other, so there is no need to further
   distinguish between them.  An implementation that signals or accepts
   use of G729 payload format may implement either G.729 or G.729A
   unless restricted by additional signaling specified elsewhere related
   specifically to the encoding rather than the payload format.  The
   G.729 and G.729 Annex A codecs were optimized to represent speech
   with high quality, where G.729 Annex A trades some speech quality for
   an approximate 50% complexity reduction [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-10">10</A>].  See the =
next Section
   (4.5.7) for other data rates added in later G.729 Annexes.  For all
   data rates, the sampling frequency (and RTP timestamp clock rate) is
   8,000 Hz.

   A voice activity detector (VAD) and comfort noise generator (CNG)
   algorithm in Annex B of G.729 is RECOMMENDED for digital simultaneous
   voice and data applications and can be used in conjunction with G.729
   or G.729 Annex A.  A G.729 or G.729 Annex A frame contains 10 octets,
   while the G.729 Annex B comfort noise frame occupies 2 octets.
   Receivers MUST accept comfort noise frames if restriction of their
   use has not been signaled.  The MIME registration for G729 in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC</A>
   <A href=3D"http://tools.ietf.org/html/rfc3555">3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>] specifies a =
parameter that MAY be used with MIME or SDP to
   restrict the use of comfort noise frames.

   A G729 RTP packet may consist of zero or more G.729 or G.729 Annex A
   frames, followed by zero or one G.729 Annex B frames.  The presence
   of a comfort noise frame can be deduced from the length of the RTP
   payload.  The default packetization interval is 20 ms (two frames),
   but in some situations it may be desirable to send 10 ms packets.  An




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 20]</SPAN>
<A id=3Dpage-21 href=3D"http://tools.ietf.org/html/rfc3551#page-21" =
name=3Dpage-21><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   example would be a transition from speech to comfort noise in the
   first 10 ms of the packet.  For some applications, a longer
   packetization interval may be required to reduce the packet rate.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |L|      L1     |    L2   |    L3   |       P1      |P|    C1   |
      |0|             |         |         |               |0|         |
      | |0 1 2 3 4 5 6|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4 5 6 7| |0 1 2 3 4|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |       C1      |  S1   | GA1 |  GB1  |    P2   |      C2       |
      |          1 1 1|       |     |       |         |               |
      |5 6 7 8 9 0 1 2|0 1 2 3|0 1 2|0 1 2 3|0 1 2 3 4|0 1 2 3 4 5 6 7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   C2    |  S2   | GA2 |  GB2  |
      |    1 1 1|       |     |       |
      |8 9 0 1 2|0 1 2 3|0 1 2|0 1 2 3|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Figure 4: G.729 and G.729A bit packing

   The transmitted parameters of a G.729/G.729A 10-ms frame, consisting
   of 80 bits, are defined in Recommendation G.729, Table 8/G.729.  The
   mapping of the these parameters is given below in Fig. 4.  The
   diagrams show the bit packing in "network byte order", also known as
   big-endian order.  The bits of each 32-bit word are numbered 0 to 31,
   with the most significant bit on the left and numbered 0.  The octets
   (bytes) of each word are transmitted most significant octet first.
   The bits of each data field are numbered in the order as produced by
   the G.729 C code reference implementation.

   The packing of the G.729 Annex B comfort noise frame is shown in Fig.
   5.

          0                   1
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |L|  LSF1   |  LSF2 |   GAIN  |R|
         |S|         |       |         |E|
         |F|         |       |         |S|
         |0|0 1 2 3 4|0 1 2 3|0 1 2 3 4|V|    RESV =3D Reserved (zero)
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                       Figure 5: G.729 Annex B bit packing






<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 21]</SPAN>
<A id=3Dpage-22 href=3D"http://tools.ietf.org/html/rfc3551#page-22" =
name=3Dpage-22><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.7>4.5.7</A> G729D =
and G729E</SPAN>

   Annexes D and E to ITU-T Recommendation G.729 provide additional data
   rates.  Because the data rate is not signaled in the bitstream, the
   different data rates are given distinct RTP encoding names which are
   mapped to distinct payload type numbers.  G729D indicates a 6.4
   kbit/s coding mode (G.729 Annex D, for momentary reduction in channel
   capacity), while G729E indicates an 11.8 kbit/s mode (G.729 Annex E,
   for improved performance with a wide range of narrow-band input
   signals, e.g., music and background noise).  Annex E has two
   operating modes, backward adaptive and forward adaptive, which are
   signaled by the first two bits in each frame (the most significant
   two bits of the first octet).

   The voice activity detector (VAD) and comfort noise generator (CNG)
   algorithm specified in Annex B of G.729 may be used with Annex D and
   Annex E frames in addition to G.729 and G.729 Annex A frames.  The
   algorithm details for the operation of Annexes D and E with the Annex
   B CNG are specified in G.729 Annexes F and G.  Note that Annexes F
   and G do not introduce any new encodings.  Receivers MUST accept
   comfort noise frames if restriction of their use has not been
   signaled.  The MIME registrations for G729D and G729E in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>]
   specify a parameter that MAY be used with MIME or SDP to restrict the
   use of comfort noise frames.

   For G729D, an RTP packet may consist of zero or more G.729 Annex D
   frames, followed by zero or one G.729 Annex B frame.  Similarly, for
   G729E, an RTP packet may consist of zero or more G.729 Annex E
   frames, followed by zero or one G.729 Annex B frame.  The presence of
   a comfort noise frame can be deduced from the length of the RTP
   payload.

   A single RTP packet must contain frames of only one data rate,
   optionally followed by one comfort noise frame.  The data rate may be
   changed from packet to packet by changing the payload type number.
   G.729 Annexes D, E and H describe what the encoding and decoding
   algorithms must do to accommodate a change in data rate.

   For G729D, the bits of a G.729 Annex D frame are formatted as shown
   below in Fig. 6 (cf.  Table D.1/G.729).  The frame length is 64 bits.











<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 22]</SPAN>
<A id=3Dpage-23 href=3D"http://tools.ietf.org/html/rfc3551#page-23" =
name=3Dpage-23><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |L|      L1     |    L2   |    L3   |        P1     |     C1    |
      |0|             |         |         |               |           |
      | |0 1 2 3 4 5 6|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4 5 6 7|0 1 2 3 4 5|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | C1  |S1 | GA1 | GB1 |  P2   |        C2       |S2 | GA2 | GB2 |
      |     |   |     |     |       |                 |   |     |     |
      |6 7 8|0 1|0 1 2|0 1 2|0 1 2 3|0 1 2 3 4 5 6 7 8|0 1|0 1 2|0 1 2|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 6: G.729 Annex D bit packing

   The net bit rate for the G.729 Annex E algorithm is 11.8 kbit/s and a
   total of 118 bits are used.  Two bits are appended as "don't care"
   bits to complete an integer number of octets for the frame.  For
   G729E, the bits of a data frame are formatted as shown in the next
   two diagrams (cf. Table E.1/G.729).  The fields for the G729E forward
   adaptive mode are packed as shown in Fig. 7.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |0 0|L|      L1     |    L2   |    L3   |        P1     |P| C0_1|
      |   |0|             |         |         |               |0|     |
      |   | |0 1 2 3 4 5 6|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4 5 6 7| |0 1 2|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |       |   C1_1      |     C2_1    |   C3_1      |    C4_1     |
      |       |             |             |             |             |
      |3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | GA1 |  GB1  |    P2   |   C0_2      |     C1_2    |   C2_2    |
      |     |       |         |             |             |           |
      |0 1 2|0 1 2 3|0 1 2 3 4|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | |    C3_2     |     C4_2    | GA2 | GB2   |DC |
      | |             |             |     |       |   |
      |6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2|0 1 2 3|0 1|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

         Figure 7: G.729 Annex E (forward adaptive mode) bit packing

   The fields for the G729E backward adaptive mode are packed as shown
   in Fig. 8.






<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 23]</SPAN>
<A id=3Dpage-24 href=3D"http://tools.ietf.org/html/rfc3551#page-24" =
name=3Dpage-24><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |1 1|       P1      |P|       C0_1              |     C1_1      |
      |   |               |0|                    1 1 1|               |
      |   |0 1 2 3 4 5 6 7|0|0 1 2 3 4 5 6 7 8 9 0 1 2|0 1 2 3 4 5 6 7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   |  C2_1       | C3_1        | C4_1        |GA1  | GB1   |P2 |
      |   |             |             |             |     |       |   |
      |8 9|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2|0 1 2 3|0 1|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     |          C0_2           |       C1_2        |    C2_2   |
      |     |                    1 1 1|                   |           |
      |2 3 4|0 1 2 3 4 5 6 7 8 9 0 1 2|0 1 2 3 4 5 6 7 8 9|0 1 2 3 4 5|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | |    C3_2     |     C4_2    | GA2 | GB2   |DC |
      | |             |             |     |       |   |
      |6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2|0 1 2 3|0 1|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

         Figure 8: G.729 Annex E (backward adaptive mode) bit packing

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.8>4.5.8</A> =
GSM</SPAN>

   GSM (Group Speciale Mobile) denotes the European GSM 06.10 standard
   for full-rate speech transcoding, ETS 300 961, which is based on
   RPE/LTP (residual pulse excitation/long term prediction) coding at a
   rate of 13 kb/s [11,12,13].  The text of the standard can be obtained
   from:

   ETSI (European Telecommunications Standards Institute)
   ETSI Secretariat: B.P.152
   F-06561 Valbonne Cedex
   France
   Phone: +33 92 94 42 00
   Fax:   +33 93 65 47 16

   Blocks of 160 audio samples are compressed into 33 octets, for an
   effective data rate of 13,200 b/s.

<SPAN class=3Dheader level=3D"5"><A name=3Dsection-4.5.8.1>4.5.8.1</A>  =
General Packaging Issues</SPAN>

   The GSM standard (ETS 300 961) specifies the bit stream produced by
   the codec, but does not specify how these bits should be packed for
   transmission.  The packetization specified here has subsequently been
   adopted in ETSI Technical Specification TS 101 318.  Some software
   implementations of the GSM codec use a different packing than that
   specified here.



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 24]</SPAN>
<A id=3Dpage-25 href=3D"http://tools.ietf.org/html/rfc3551#page-25" =
name=3Dpage-25><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


               field  field name  bits  field  field name  bits
               ________________________________________________
               1      LARc[0]     6     39     xmc[22]     3
               2      LARc[1]     6     40     xmc[23]     3
               3      LARc[2]     5     41     xmc[24]     3
               4      LARc[3]     5     42     xmc[25]     3
               5      LARc[4]     4     43     Nc[2]       7
               6      LARc[5]     4     44     bc[2]       2
               7      LARc[6]     3     45     Mc[2]       2
               8      LARc[7]     3     46     xmaxc[2]    6
               9      Nc[0]       7     47     xmc[26]     3
               10     bc[0]       2     48     xmc[27]     3
               11     Mc[0]       2     49     xmc[28]     3
               12     xmaxc[0]    6     50     xmc[29]     3
               13     xmc[0]      3     51     xmc[30]     3
               14     xmc[1]      3     52     xmc[31]     3
               15     xmc[2]      3     53     xmc[32]     3
               16     xmc[3]      3     54     xmc[33]     3
               17     xmc[4]      3     55     xmc[34]     3
               18     xmc[5]      3     56     xmc[35]     3
               19     xmc[6]      3     57     xmc[36]     3
               20     xmc[7]      3     58     xmc[37]     3
               21     xmc[8]      3     59     xmc[38]     3
               22     xmc[9]      3     60     Nc[3]       7
               23     xmc[10]     3     61     bc[3]       2
               24     xmc[11]     3     62     Mc[3]       2
               25     xmc[12]     3     63     xmaxc[3]    6
               26     Nc[1]       7     64     xmc[39]     3
               27     bc[1]       2     65     xmc[40]     3
               28     Mc[1]       2     66     xmc[41]     3
               29     xmaxc[1]    6     67     xmc[42]     3
               30     xmc[13]     3     68     xmc[43]     3
               31     xmc[14]     3     69     xmc[44]     3
               32     xmc[15]     3     70     xmc[45]     3
               33     xmc[16]     3     71     xmc[46]     3
               34     xmc[17]     3     72     xmc[47]     3
               35     xmc[18]     3     73     xmc[48]     3
               36     xmc[19]     3     74     xmc[49]     3
               37     xmc[20]     3     75     xmc[50]     3
               38     xmc[21]     3     76     xmc[51]     3

                      Table 2: Ordering of GSM variables









<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 25]</SPAN>
<A id=3Dpage-26 href=3D"http://tools.ietf.org/html/rfc3551#page-26" =
name=3Dpage-26><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   Octet  Bit 0   Bit 1   Bit 2   Bit 3   Bit 4   Bit 5   Bit 6   Bit 7
   _____________________________________________________________________
       0    1       1       0       1    LARc0.0 LARc0.1 LARc0.2 LARc0.3
       1 LARc0.4 LARc0.5 LARc1.0 LARc1.1 LARc1.2 LARc1.3 LARc1.4 LARc1.5
       2 LARc2.0 LARc2.1 LARc2.2 LARc2.3 LARc2.4 LARc3.0 LARc3.1 LARc3.2
       3 LARc3.3 LARc3.4 LARc4.0 LARc4.1 LARc4.2 LARc4.3 LARc5.0 LARc5.1
       4 LARc5.2 LARc5.3 LARc6.0 LARc6.1 LARc6.2 LARc7.0 LARc7.1 LARc7.2
       5  Nc0.0   Nc0.1   Nc0.2   Nc0.3   Nc0.4   Nc0.5   Nc0.6  bc0.0
       6  bc0.1   Mc0.0   Mc0.1  xmaxc00 xmaxc01 xmaxc02 xmaxc03 xmaxc04
       7 xmaxc05 xmc0.0  xmc0.1  xmc0.2  xmc1.0  xmc1.1  xmc1.2  xmc2.0
       8 xmc2.1  xmc2.2  xmc3.0  xmc3.1  xmc3.2  xmc4.0  xmc4.1  xmc4.2
       9 xmc5.0  xmc5.1  xmc5.2  xmc6.0  xmc6.1  xmc6.2  xmc7.0  xmc7.1
      10 xmc7.2  xmc8.0  xmc8.1  xmc8.2  xmc9.0  xmc9.1  xmc9.2  xmc10.0
      11 xmc10.1 xmc10.2 xmc11.0 xmc11.1 xmc11.2 xmc12.0 xmc12.1 xcm12.2
      12  Nc1.0   Nc1.1   Nc1.2   Nc1.3   Nc1.4   Nc1.5   Nc1.6   bc1.0
      13  bc1.1   Mc1.0   Mc1.1  xmaxc10 xmaxc11 xmaxc12 xmaxc13 xmaxc14
      14 xmax15  xmc13.0 xmc13.1 xmc13.2 xmc14.0 xmc14.1 xmc14.2 xmc15.0
      15 xmc15.1 xmc15.2 xmc16.0 xmc16.1 xmc16.2 xmc17.0 xmc17.1 xmc17.2
      16 xmc18.0 xmc18.1 xmc18.2 xmc19.0 xmc19.1 xmc19.2 xmc20.0 xmc20.1
      17 xmc20.2 xmc21.0 xmc21.1 xmc21.2 xmc22.0 xmc22.1 xmc22.2 xmc23.0
      18 xmc23.1 xmc23.2 xmc24.0 xmc24.1 xmc24.2 xmc25.0 xmc25.1 xmc25.2
      19  Nc2.0   Nc2.1   Nc2.2   Nc2.3   Nc2.4   Nc2.5   Nc2.6   bc2.0
      20  bc2.1   Mc2.0   Mc2.1  xmaxc20 xmaxc21 xmaxc22 xmaxc23 xmaxc24
      21 xmaxc25 xmc26.0 xmc26.1 xmc26.2 xmc27.0 xmc27.1 xmc27.2 xmc28.0
      22 xmc28.1 xmc28.2 xmc29.0 xmc29.1 xmc29.2 xmc30.0 xmc30.1 xmc30.2
      23 xmc31.0 xmc31.1 xmc31.2 xmc32.0 xmc32.1 xmc32.2 xmc33.0 xmc33.1
      24 xmc33.2 xmc34.0 xmc34.1 xmc34.2 xmc35.0 xmc35.1 xmc35.2 xmc36.0
      25 Xmc36.1 xmc36.2 xmc37.0 xmc37.1 xmc37.2 xmc38.0 xmc38.1 xmc38.2
      26  Nc3.0   Nc3.1   Nc3.2   Nc3.3   Nc3.4   Nc3.5   Nc3.6   bc3.0
      27  bc3.1   Mc3.0   Mc3.1  xmaxc30 xmaxc31 xmaxc32 xmaxc33 xmaxc34
      28 xmaxc35 xmc39.0 xmc39.1 xmc39.2 xmc40.0 xmc40.1 xmc40.2 xmc41.0
      29 xmc41.1 xmc41.2 xmc42.0 xmc42.1 xmc42.2 xmc43.0 xmc43.1 xmc43.2
      30 xmc44.0 xmc44.1 xmc44.2 xmc45.0 xmc45.1 xmc45.2 xmc46.0 xmc46.1
      31 xmc46.2 xmc47.0 xmc47.1 xmc47.2 xmc48.0 xmc48.1 xmc48.2 xmc49.0
      32 xmc49.1 xmc49.2 xmc50.0 xmc50.1 xmc50.2 xmc51.0 xmc51.1 xmc51.2

                        Table 3: GSM payload format

   In the GSM packing used by RTP, the bits SHALL be packed beginning
   from the most significant bit.  Every 160 sample GSM frame is coded
   into one 33 octet (264 bit) buffer.  Every such buffer begins with a
   4 bit signature (0xD), followed by the MSB encoding of the fields of
   the frame.  The first octet thus contains 1101 in the 4 most
   significant bits (0-3) and the 4 most significant bits of F1 (0-3) in
   the 4 least significant bits (4-7).  The second octet contains the 2
   least significant bits of F1 in bits 0-1, and F2 in bits 2-7, and so
   on.  The order of the fields in the frame is described in Table 2.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 26]</SPAN>
<A id=3Dpage-27 href=3D"http://tools.ietf.org/html/rfc3551#page-27" =
name=3Dpage-27><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"5"><A name=3Dsection-4.5.8.2>4.5.8.2</A>   =
GSM Variable Names and Numbers</SPAN>

   In the RTP encoding we have the bit pattern described in Table 3,
   where F.i signifies the ith bit of the field F, bit 0 is the most
   significant bit, and the bits of every octet are numbered from 0 to 7
   from most to least significant.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.9>4.5.9</A> =
GSM-EFR</SPAN>

   GSM-EFR denotes GSM 06.60 enhanced full rate speech transcoding,
   specified in ETS 300 726 which is available from ETSI at the address
   given in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.5.8">Section =
4.5.8</A>.  This codec has a frame length of 244 bits.
   For transmission in RTP, each codec frame is packed into a 31 octet
   (248 bit) buffer beginning with a 4-bit signature 0xC in a manner
   similar to that specified here for the original GSM 06.10 codec.  The
   packing is specified in ETSI Technical Specification TS 101 318.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.10>4.5.10</A> =
L8</SPAN>

   L8 denotes linear audio data samples, using 8-bits of precision with
   an offset of 128, that is, the most negative signal is encoded as
   zero.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.11>4.5.11</A> =
L16</SPAN>

   L16 denotes uncompressed audio data samples, using 16-bit signed
   representation with 65,535 equally divided steps between minimum and
   maximum signal level, ranging from -32,768 to 32,767.  The value is
   represented in two's complement notation and transmitted in network
   byte order (most significant byte first).

   The MIME registration for L16 in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>] specifies =
parameters
   that MAY be used with MIME or SDP to indicate that analog pre-
   emphasis was applied to the signal before quantization or to indicate
   that a multiple-channel audio stream follows a different channel
   ordering convention than is specified in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.1">Section 4.1</A>.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.12>4.5.12</A> =
LPC</SPAN>

   LPC designates an experimental linear predictive encoding contributed
   by Ron Frederick, which is based on an implementation written by Ron
   Zuckerman posted to the Usenet group comp.dsp on June 26, 1992.  The
   codec generates 14 octets for every frame.  The framesize is set to
   20 ms, resulting in a bit rate of 5,600 b/s.







<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 27]</SPAN>
<A id=3Dpage-28 href=3D"http://tools.ietf.org/html/rfc3551#page-28" =
name=3Dpage-28><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.13>4.5.13</A> =
MPA</SPAN>

   MPA denotes MPEG-1 or MPEG-2 audio encapsulated as elementary
   streams.  The encoding is defined in ISO standards ISO/IEC 11172-3
   and 13818-3.  The encapsulation is specified in <A =
href=3D"http://tools.ietf.org/html/rfc2250">RFC 2250</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-14">14</A>].

   The encoding may be at any of three levels of complexity, called
   Layer I, II and III.  The selected layer as well as the sampling rate
   and channel count are indicated in the payload.  The RTP timestamp
   clock rate is always 90,000, independent of the sampling rate.
   MPEG-1 audio supports sampling rates of 32, 44.1, and 48 kHz (ISO/IEC
   11172-3, <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-1.1">section 1.1</A>; =
"Scope").  MPEG-2 supports sampling rates of
   16, 22.05 and 24 kHz.  The number of samples per frame is fixed, but
   the frame size will vary with the sampling rate and bit rate.

   The MIME registration for MPA in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>] specifies =
parameters
   that MAY be used with MIME or SDP to restrict the selection of layer,
   channel count, sampling rate, and bit rate.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.14>4.5.14</A> =
PCMA and PCMU</SPAN>

   PCMA and PCMU are specified in ITU-T Recommendation G.711.  Audio
   data is encoded as eight bits per sample, after logarithmic scaling.
   PCMU denotes mu-law scaling, PCMA A-law scaling.  A detailed
   description is given by Jayant and Noll [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-15">15</A>].  Each G.711 =
octet SHALL
   be octet-aligned in an RTP packet.  The sign bit of each G.711 octet
   SHALL correspond to the most significant bit of the octet in the RTP
   packet (i.e., assuming the G.711 samples are handled as octets on the
   host machine, the sign bit SHALL be the most significant bit of the
   octet as defined by the host machine format).  The 56 kb/s and 48
   kb/s modes of G.711 are not applicable to RTP, since PCMA and PCMU
   MUST always be transmitted as 8-bit samples.

   See <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.1">Section 4.1</A> =
regarding silence suppression.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.15>4.5.15</A> =
QCELP</SPAN>

   The Electronic Industries Association (EIA) &amp; Telecommunications
   Industry Association (TIA) standard IS-733, "TR45: High Rate Speech
   Service Option for Wideband Spread Spectrum Communications Systems",
   defines the QCELP audio compression algorithm for use in wireless
   CDMA applications.  The QCELP CODEC compresses each 20 milliseconds
   of 8,000 Hz, 16-bit sampled input speech into one of four different
   size output frames:  Rate 1 (266 bits), Rate 1/2 (124 bits), Rate 1/4
   (54 bits) or Rate 1/8 (20 bits).  For typical speech patterns, this
   results in an average output of 6.8 kb/s for normal mode and 4.7 kb/s
   for reduced rate mode.  The packetization of the QCELP audio codec is
   described in [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-16">16</A>].



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 28]</SPAN>
<A id=3Dpage-29 href=3D"http://tools.ietf.org/html/rfc3551#page-29" =
name=3Dpage-29><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.16>4.5.16</A> =
RED</SPAN>

   The redundant audio payload format "RED" is specified by <A =
href=3D"http://tools.ietf.org/html/rfc2198">RFC 2198</A>
   [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-17">17</A>].  It =
defines a means by which multiple redundant copies of an
   audio packet may be transmitted in a single RTP stream.  Each packet
   in such a stream contains, in addition to the audio data for that
   packetization interval, a (more heavily compressed) copy of the data
   from a previous packetization interval.  This allows an approximation
   of the data from lost packets to be recovered upon decoding of a
   subsequent packet, giving much improved sound quality when compared
   with silence substitution for lost packets.

<SPAN class=3Dheader level=3D"4"><A name=3Dsection-4.5.17>4.5.17</A> =
VDVI</SPAN>

   VDVI is a variable-rate version of DVI4, yielding speech bit rates of
   between 10 and 25 kb/s.  It is specified for single-channel operation
   only.  Samples are packed into octets starting at the most-
   significant bit.  The last octet is padded with 1 bits if the last
   sample does not fill the last octet.  This padding is distinct from
   the valid codewords.  The receiver needs to detect the padding
   because there is no explicit count of samples in the packet.

   It uses the following encoding:

            DVI4 codeword  VDVI bit pattern
            _______________________________
                        0  00
                        1  010
                        2  1100
                        3  11100
                        4  111100
                        5  1111100
                        6  11111100
                        7  11111110
                        8  10
                        9  011
                       10  1101
                       11  11101
                       12  111101
                       13  1111101
                       14  11111101
                       15  11111111









<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 29]</SPAN>
<A id=3Dpage-30 href=3D"http://tools.ietf.org/html/rfc3551#page-30" =
name=3Dpage-30><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-5>5</A>.  =
Video</SPAN>

   The following sections describe the video encodings that are defined
   in this memo and give their abbreviated names used for
   identification.  These video encodings and their payload types are
   listed in Table 5.

   All of these video encodings use an RTP timestamp frequency of 90,000
   Hz, the same as the MPEG presentation time stamp frequency.  This
   frequency yields exact integer timestamp increments for the typical
   24 (HDTV), 25 (PAL), and 29.97 (NTSC) and 30 Hz (HDTV) frame rates
   and 50, 59.94 and 60 Hz field rates.  While 90 kHz is the RECOMMENDED
   rate for future video encodings used within this profile, other rates
   MAY be used.  However, it is not sufficient to use the video frame
   rate (typically between 15 and 30 Hz) because that does not provide
   adequate resolution for typical synchronization requirements when
   calculating the RTP timestamp corresponding to the NTP timestamp in
   an RTCP SR packet.  The timestamp resolution MUST also be sufficient
   for the jitter estimate contained in the receiver reports.

   For most of these video encodings, the RTP timestamp encodes the
   sampling instant of the video image contained in the RTP data packet.
   If a video image occupies more than one packet, the timestamp is the
   same on all of those packets.  Packets from different video images
   are distinguished by their different timestamps.

   Most of these video encodings also specify that the marker bit of the
   RTP header SHOULD be set to one in the last packet of a video frame
   and otherwise set to zero.  Thus, it is not necessary to wait for a
   following packet with a different timestamp to detect that a new
   frame should be displayed.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.1>5.1</A>  =
CelB</SPAN>

   The CELL-B encoding is a proprietary encoding proposed by Sun
   Microsystems.  The byte stream format is described in <A =
href=3D"http://tools.ietf.org/html/rfc2029">RFC 2029</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-18">18</A>].

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.2>5.2</A> =
JPEG</SPAN>

   The encoding is specified in ISO Standards 10918-1 and 10918-2.  The
   RTP payload format is as specified in <A =
href=3D"http://tools.ietf.org/html/rfc2435">RFC 2435</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-19">19</A>].

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.3>5.3</A> =
H261</SPAN>

   The encoding is specified in ITU-T Recommendation H.261, "Video codec
   for audiovisual services at p x 64 kbit/s".  The packetization and
   RTP-specific properties are described in <A =
href=3D"http://tools.ietf.org/html/rfc2032">RFC 2032</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-20">20</A>].




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 30]</SPAN>
<A id=3Dpage-31 href=3D"http://tools.ietf.org/html/rfc3551#page-31" =
name=3Dpage-31><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.4>5.4</A> =
H263</SPAN>

   The encoding is specified in the 1996 version of ITU-T Recommendation
   H.263, "Video coding for low bit rate communication".  The
   packetization and RTP-specific properties are described in <A =
href=3D"http://tools.ietf.org/html/rfc2190">RFC 2190</A>
   [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-21">21</A>].  The =
H263-1998 payload format is RECOMMENDED over this one for
   use by new implementations.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.5>5.5</A> =
H263-1998</SPAN>

   The encoding is specified in the 1998 version of ITU-T Recommendation
   H.263, "Video coding for low bit rate communication".  The
   packetization and RTP-specific properties are described in <A =
href=3D"http://tools.ietf.org/html/rfc2429">RFC 2429</A>
   [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-22">22</A>].  =
Because the 1998 version of H.263 is a superset of the 1996
   syntax, this payload format can also be used with the 1996 version of
   H.263, and is RECOMMENDED for this use by new implementations.  This
   payload format does not replace <A =
href=3D"http://tools.ietf.org/html/rfc2190">RFC 2190</A>, which =
continues to be used
   by existing implementations, and may be required for backward
   compatibility in new implementations.  Implementations using the new
   features of the 1998 version of H.263 MUST use the payload format
   described in <A href=3D"http://tools.ietf.org/html/rfc2429">RFC =
2429</A>.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.6>5.6</A> =
MPV</SPAN>

   MPV designates the use of MPEG-1 and MPEG-2 video encoding elementary
   streams as specified in ISO Standards ISO/IEC 11172 and 13818-2,
   respectively.  The RTP payload format is as specified in <A =
href=3D"http://tools.ietf.org/html/rfc2250">RFC 2250</A>
   [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-14">14</A>], <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-3">Section 3</A>.

   The MIME registration for MPV in <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>] specifies a =
parameter
   that MAY be used with MIME or SDP to restrict the selection of the
   type of MPEG video.

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.7>5.7</A> =
MP2T</SPAN>

   MP2T designates the use of MPEG-2 transport streams, for either audio
   or video.  The RTP payload format is described in <A =
href=3D"http://tools.ietf.org/html/rfc2250">RFC 2250</A> [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-14">14</A>],
   <A href=3D"http://tools.ietf.org/html/rfc3551#section-2">Section =
2</A>.













<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 31]</SPAN>
<A id=3Dpage-32 href=3D"http://tools.ietf.org/html/rfc3551#page-32" =
name=3Dpage-32><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"3"><A name=3Dsection-5.8>5.8</A> nv</SPAN>

   The encoding is implemented in the program `nv', version 4, developed
   at Xerox PARC by Ron Frederick.  Further information is available
   from the author:

   Ron Frederick
   Blue Coat Systems Inc.
   650 Almanor Avenue
   Sunnyvale, CA 94085
   United States
   EMail: ronf@bluecoat.com

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-6>6</A>.  Payload =
Type Definitions</SPAN>

   Tables 4 and 5 define this profile's static payload type values for
   the PT field of the RTP data header.  In addition, payload type
   values in the range 96-127 MAY be defined dynamically through a
   conference control protocol, which is beyond the scope of this
   document.  For example, a session directory could specify that for a
   given session, payload type 96 indicates PCMU encoding, 8,000 Hz
   sampling rate, 2 channels.  Entries in Tables 4 and 5 with payload
   type "dyn" have no static payload type assigned and are only used
   with a dynamic payload type.  Payload type 2 was assigned to G721 in
   <A href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> and to =
its equivalent successor G726-32 in draft versions of
   this specification, but its use is now deprecated and that static
   payload type is marked reserved due to conflicting use for the
   payload formats G726-32 and AAL2-G726-32 (see <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.5.4">Section =
4.5.4</A>).
   Payload type 13 indicates the Comfort Noise (CN) payload format
   specified in <A href=3D"http://tools.ietf.org/html/rfc3389">RFC =
3389</A> [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-9">9</A>].  =
Payload type 19 is marked "reserved"
   because some draft versions of this specification assigned that
   number to an earlier version of the comfort noise payload format.
   The payload type range 72-76 is marked "reserved" so that RTCP and
   RTP packets can be reliably distinguished (see Section "Summary of
   Protocol Constants" of the RTP protocol specification).

   The payload types currently defined in this profile are assigned to
   exactly one of three categories or media types:  audio only, video
   only and those combining audio and video.  The media types are marked
   in Tables 4 and 5 as "A", "V" and "AV", respectively.  Payload types
   of different media types SHALL NOT be interleaved or multiplexed
   within a single RTP session, but multiple RTP sessions MAY be used in
   parallel to send multiple media types.  An RTP source MAY change
   payload types within the same media type during a session.  See the
   section "Multiplexing RTP Sessions" of <A =
href=3D"http://tools.ietf.org/html/rfc3550">RFC 3550</A> for additional
   explanation.





<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 32]</SPAN>
<A id=3Dpage-33 href=3D"http://tools.ietf.org/html/rfc3551#page-33" =
name=3Dpage-33><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


               PT   encoding    media type  clock rate   channels
                    name                    (Hz)
               ___________________________________________________
               0    PCMU        A            8,000       1
               1    reserved    A
               2    reserved    A
               3    GSM         A            8,000       1
               4    G723        A            8,000       1
               5    DVI4        A            8,000       1
               6    DVI4        A           16,000       1
               7    LPC         A            8,000       1
               8    PCMA        A            8,000       1
               9    G722        A            8,000       1
               10   L16         A           44,100       2
               11   L16         A           44,100       1
               12   QCELP       A            8,000       1
               13   CN          A            8,000       1
               14   MPA         A           90,000       (see text)
               15   G728        A            8,000       1
               16   DVI4        A           11,025       1
               17   DVI4        A           22,050       1
               18   G729        A            8,000       1
               19   reserved    A
               20   unassigned  A
               21   unassigned  A
               22   unassigned  A
               23   unassigned  A
               dyn  G726-40     A            8,000       1
               dyn  G726-32     A            8,000       1
               dyn  G726-24     A            8,000       1
               dyn  G726-16     A            8,000       1
               dyn  G729D       A            8,000       1
               dyn  G729E       A            8,000       1
               dyn  GSM-EFR     A            8,000       1
               dyn  L8          A            var.        var.
               dyn  RED         A                        (see text)
               dyn  VDVI        A            var.        1

               Table 4: Payload types (PT) for audio encodings












<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 33]</SPAN>
<A id=3Dpage-34 href=3D"http://tools.ietf.org/html/rfc3551#page-34" =
name=3Dpage-34><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


               PT      encoding    media type  clock rate
                       name                    (Hz)
               _____________________________________________
               24      unassigned  V
               25      CelB        V           90,000
               26      JPEG        V           90,000
               27      unassigned  V
               28      nv          V           90,000
               29      unassigned  V
               30      unassigned  V
               31      H261        V           90,000
               32      MPV         V           90,000
               33      MP2T        AV          90,000
               34      H263        V           90,000
               35-71   unassigned  ?
               72-76   reserved    N/A         N/A
               77-95   unassigned  ?
               96-127  dynamic     ?
               dyn     H263-1998   V           90,000

               Table 5: Payload types (PT) for video and combined
                        encodings

   Session participants agree through mechanisms beyond the scope of
   this specification on the set of payload types allowed in a given
   session.  This set MAY, for example, be defined by the capabilities
   of the applications used, negotiated by a conference control protocol
   or established by agreement between the human participants.

   Audio applications operating under this profile SHOULD, at a minimum,
   be able to send and/or receive payload types 0 (PCMU) and 5 (DVI4).
   This allows interoperability without format negotiation and ensures
   successful negotiation with a conference control protocol.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-7>7</A>.  RTP over =
TCP and Similar Byte Stream Protocols</SPAN>

   Under special circumstances, it may be necessary to carry RTP in
   protocols offering a byte stream abstraction, such as TCP, possibly
   multiplexed with other data.  The application MUST define its own
   method of delineating RTP and RTCP packets (RTSP [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-23">23</A>] provides an
   example of such an encapsulation specification).

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-8>8</A>.  Port =
Assignment</SPAN>

   As specified in the RTP protocol definition, RTP data SHOULD be
   carried on an even UDP port number and the corresponding RTCP packets
   SHOULD be carried on the next higher (odd) port number.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 34]</SPAN>
<A id=3Dpage-35 href=3D"http://tools.ietf.org/html/rfc3551#page-35" =
name=3Dpage-35><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   Applications operating under this profile MAY use any such UDP port
   pair.  For example, the port pair MAY be allocated randomly by a
   session management program.  A single fixed port number pair cannot
   be required because multiple applications using this profile are
   likely to run on the same host, and there are some operating systems
   that do not allow multiple processes to use the same UDP port with
   different multicast addresses.

   However, port numbers 5004 and 5005 have been registered for use with
   this profile for those applications that choose to use them as the
   default pair.  Applications that operate under multiple profiles MAY
   use this port pair as an indication to select this profile if they
   are not subject to the constraint of the previous paragraph.
   Applications need not have a default and MAY require that the port
   pair be explicitly specified.  The particular port numbers were
   chosen to lie in the range above 5000 to accommodate port number
   allocation practice within some versions of the Unix operating
   system, where port numbers below 1024 can only be used by privileged
   processes and port numbers between 1024 and 5000 are automatically
   assigned by the operating system.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-9>9</A>.  Changes =
from <A href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A></SPAN>

   This RFC revises <A href=3D"http://tools.ietf.org/html/rfc1890">RFC =
1890</A>.  It is mostly backwards-compatible with
   <A href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> except =
for functions removed because two interoperable
   implementations were not found.  The additions to <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A> codify
   existing practice in the use of payload formats under this profile.
   Since this profile may be used without using any of the payload
   formats listed here, the addition of new payload formats in this
   revision does not affect backwards compatibility.  The changes are
   listed below, categorized into functional and non-functional changes.

   Functional changes:

   o  <A href=3D"http://tools.ietf.org/html/rfc3551#section-11">Section =
11</A>, "IANA Considerations" was added to specify the
      registration of the name for this profile.  That appendix also
      references a new <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-3">Section 3</A> =
"Registering Additional Encodings"
      which establishes a policy that no additional registration of
      static payload types for this profile will be made beyond those
      added in this revision and included in Tables 4 and 5.  Instead,
      additional encoding names may be registered as MIME subtypes for
      binding to dynamic payload types.  Non-normative references were
      added to <A href=3D"http://tools.ietf.org/html/rfc3555">RFC =
3555</A> [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-7">7</A>] =
where MIME subtypes for all the listed
      payload formats are registered, some with optional parameters for
      use of the payload formats.






<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 35]</SPAN>
<A id=3Dpage-36 href=3D"http://tools.ietf.org/html/rfc3551#page-36" =
name=3Dpage-36><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   o  Static payload types 4, 16, 17 and 34 were added to incorporate
      IANA registrations made since the publication of <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A>, along
      with the corresponding payload format descriptions for G723 and
      H263.

   o  Following working group discussion, static payload types 12 and 18
      were added along with the corresponding payload format
      descriptions for QCELP and G729.  Static payload type 13 was
      assigned to the Comfort Noise (CN) payload format defined in <A =
href=3D"http://tools.ietf.org/html/rfc3389">RFC</A>
      <A href=3D"http://tools.ietf.org/html/rfc3389">3389</A>.  Payload =
type 19 was marked reserved because it had been
      temporarily allocated to an earlier version of Comfort Noise
      present in some draft revisions of this document.

   o  The payload format for G721 was renamed to G726-32 following the
      ITU-T renumbering, and the payload format description for G726 was
      expanded to include the -16, -24 and -40 data rates.  Because of
      confusion regarding draft revisions of this document, some
      implementations of these G726 payload formats packed samples into
      octets starting with the most significant bit rather than the
      least significant bit as specified here.  To partially resolve
      this incompatibility, new payload formats named AAL2-G726-16, -24,
      -32 and -40 will be specified in a separate document (see note in
      <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.5.4">Section =
4.5.4</A>), and use of static payload type 2 is deprecated as
      explained in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-6">Section 6</A>.

   o  Payload formats G729D and G729E were added following the ITU-T
      addition of Annexes D and E to Recommendation G.729.  Listings
      were added for payload formats GSM-EFR, RED, and H263-1998
      published in other documents subsequent to <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC 1890</A>.  These
      additional payload formats are referenced only by dynamic payload
      type numbers.

   o  The descriptions of the payload formats for G722, G728, GSM, VDVI
      were expanded.

   o  The payload format for 1016 audio was removed and its static
      payload type assignment 1 was marked "reserved" because two
      interoperable implementations were not found.

   o  Requirements for congestion control were added in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-2">Section 2</A>.

   o  This profile follows the suggestion in the revised RTP spec that
      RTCP bandwidth may be specified separately from the session
      bandwidth and separately for active senders and passive receivers.

   o  The mapping of a user pass-phrase string into an encryption key
      was deleted from <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-2">Section 2</A> =
because two interoperable
      implementations were not found.



<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 36]</SPAN>
<A id=3Dpage-37 href=3D"http://tools.ietf.org/html/rfc3551#page-37" =
name=3Dpage-37><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   o  The "quadrophonic" sample ordering convention for four-channel
      audio was removed to eliminate an ambiguity as noted in Section
      4.1.

   Non-functional changes:

   o  In <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.1">Section 4.1</A>, =
it is now explicitly stated that silence
      suppression is allowed for all audio payload formats.  (This has
      always been the case and derives from a fundamental aspect of
      RTP's design and the motivations for packet audio, but was not
      explicit stated before.)  The use of comfort noise is also
      explained.

   o  In <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.1">Section 4.1</A>, =
the requirement level for setting of the marker
      bit on the first packet after silence for audio was changed from
      "is" to "SHOULD be", and clarified that the marker bit is set only
      when packets are intentionally not sent.

   o  Similarly, text was added to specify that the marker bit SHOULD be
      set to one on the last packet of a video frame, and that video
      frames are distinguished by their timestamps.

   o  RFC references are added for payload formats published after <A =
href=3D"http://tools.ietf.org/html/rfc1890">RFC</A>
      <A href=3D"http://tools.ietf.org/html/rfc1890">1890</A>.

   o  The security considerations and full copyright sections were
      added.

   o  According to Peter Hoddie of Apple, only pre-1994 Macintosh used
      the 22254.54 rate and none the 11127.27 rate, so the latter was
      dropped from the discussion of suggested sampling frequencies.

   o  Table 1 was corrected to move some values from the "ms/packet"
      column to the "default ms/packet" column where they belonged.

   o  Since the Interactive Multimedia Association ceased operations, an
      alternate resource was provided for a referenced IMA document.

   o  A note has been added for G722 to clarify a discrepancy between
      the actual sampling rate and the RTP timestamp clock rate.

   o  Small clarifications of the text have been made in several places,
      some in response to questions from readers.  In particular:

      -  A definition for "media type" is given in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-1.1">Section 1.1</A> =
to allow
         the explanation of multiplexing RTP sessions in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-6">Section 6</A> to =
be
         more clear regarding the multiplexing of multiple media.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 37]</SPAN>
<A id=3Dpage-38 href=3D"http://tools.ietf.org/html/rfc3551#page-38" =
name=3Dpage-38><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


      -  The explanation of how to determine the number of audio frames
         in a packet from the length was expanded.

      -  More description of the allocation of bandwidth to SDES items
         is given.

      -  A note was added that the convention for the order of channels
         specified in <A =
href=3D"http://tools.ietf.org/html/rfc3551#section-4.1">Section 4.1</A> =
may be overridden by a particular
         encoding or payload format specification.

      -  The terms MUST, SHOULD, MAY, etc. are used as defined in <A =
href=3D"http://tools.ietf.org/html/rfc2119">RFC</A>
         <A href=3D"http://tools.ietf.org/html/rfc2119">2119</A>.

   o  A second author for this document was added.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-10>10</A>. Security =
Considerations</SPAN>

   Implementations using the profile defined in this specification are
   subject to the security considerations discussed in the RTP
   specification [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-1">1</A>].  This profile =
does not specify any different
   security services.  The primary function of this profile is to list a
   set of data compression encodings for audio and video media.

   Confidentiality of the media streams is achieved by encryption.
   Because the data compression used with the payload formats described
   in this profile is applied end-to-end, encryption may be performed
   after compression so there is no conflict between the two operations.

   A potential denial-of-service threat exists for data encodings using
   compression techniques that have non-uniform receiver-end
   computational load.  The attacker can inject pathological datagrams
   into the stream which are complex to decode and cause the receiver to
   be overloaded.

   As with any IP-based protocol, in some circumstances a receiver may
   be overloaded simply by the receipt of too many packets, either
   desired or undesired.  Network-layer authentication MAY be used to
   discard packets from undesired sources, but the processing cost of
   the authentication itself may be too high.  In a multicast
   environment, source pruning is implemented in IGMPv3 (<A =
href=3D"http://tools.ietf.org/html/rfc3376">RFC 3376</A>) [<A =
href=3D"http://tools.ietf.org/html/rfc3551#ref-24">24</A>]
   and in multicast routing protocols to allow a receiver to select
   which sources are allowed to reach it.









<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 38]</SPAN>
<A id=3Dpage-39 href=3D"http://tools.ietf.org/html/rfc3551#page-39" =
name=3Dpage-39><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-11>11</A>. IANA =
Considerations</SPAN>

   The RTP specification establishes a registry of profile names for use
   by higher-level control protocols, such as the Session Description
   Protocol (SDP), <A href=3D"http://tools.ietf.org/html/rfc2327">RFC =
2327</A> [<A href=3D"http://tools.ietf.org/html/rfc3551#ref-6">6</A>], =
to refer to transport methods.  This
   profile registers the name "RTP/AVP".

   <A href=3D"http://tools.ietf.org/html/rfc3551#section-3">Section =
3</A> establishes the policy that no additional registration of
   static RTP payload types for this profile will be made beyond those
   added in this document revision and included in Tables 4 and 5.  IANA
   may reference that section in declining to accept any additional
   registration requests.  In Tables 4 and 5, note that types 1 and 2
   have been marked reserved and the set of "dyn" payload types included
   has been updated.  These changes are explained in Sections 6 and 9.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-12>12</A>.  =
References</SPAN>

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-12.1>12.1</A> =
Normative References</SPAN>

   [<A id=3Dref-1 name=3Dref-1>1</A>]  Schulzrinne, H., Casner, S., =
Frederick, R. and V. Jacobson,
        "RTP:  A Transport Protocol for Real-Time Applications", <A =
href=3D"http://tools.ietf.org/html/rfc3550">RFC</A>
        <A href=3D"http://tools.ietf.org/html/rfc3550">3550</A>, July =
2003.

   [<A id=3Dref-2 name=3Dref-2>2</A>]  Bradner, S., "Key Words for Use =
in RFCs to Indicate Requirement
        Levels", <A href=3D"http://tools.ietf.org/html/bcp14">BCP =
14</A>, <A href=3D"http://tools.ietf.org/html/rfc2119">RFC 2119</A>, =
March 1997.

   [<A id=3Dref-3 name=3Dref-3>3</A>]  Apple Computer, "Audio =
Interchange File Format AIFF-C", August
        1991.  (also ftp://ftp.sgi.com/sgi/aiff-c.9.26.91.ps.Z).

<SPAN class=3Dheader level=3D"3"><A name=3Dsection-12.2>12.2</A> =
Informative References</SPAN>

   [<A id=3Dref-4 name=3Dref-4>4</A>]  Braden, R., Clark, D. and S. =
Shenker, "Integrated Services in
        the Internet Architecture: an Overview", <A =
href=3D"http://tools.ietf.org/html/rfc1633">RFC 1633</A>, June 1994.

   [<A id=3Dref-5 name=3Dref-5>5</A>]  Blake, S., Black, D., Carlson, =
M., Davies, E., Wang, Z. and W.
        Weiss, "An Architecture for Differentiated Service", <A =
href=3D"http://tools.ietf.org/html/rfc2475">RFC 2475</A>,
        December 1998.

   [<A id=3Dref-6 name=3Dref-6>6</A>]  Handley, M. and V. Jacobson, =
"SDP: Session Description
        Protocol", <A href=3D"http://tools.ietf.org/html/rfc2327">RFC =
2327</A>, April 1998.

   [<A id=3Dref-7 name=3Dref-7>7</A>]  Casner, S. and P. Hoschka, "MIME =
Type Registration of RTP
        Payload Types", <A =
href=3D"http://tools.ietf.org/html/rfc3555">RFC 3555</A>, July 2003.

   [<A id=3Dref-8 name=3Dref-8>8</A>]  Freed, N., Klensin, J. and J. =
Postel, "Multipurpose Internet
        Mail Extensions (MIME) Part Four: Registration Procedures", <A =
href=3D"http://tools.ietf.org/html/bcp13">BCP</A>
        <A href=3D"http://tools.ietf.org/html/bcp13">13</A>, <A =
href=3D"http://tools.ietf.org/html/rfc2048">RFC 2048</A>, November 1996.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 39]</SPAN>
<A id=3Dpage-40 href=3D"http://tools.ietf.org/html/rfc3551#page-40" =
name=3Dpage-40><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   [<A id=3Dref-9 name=3Dref-9>9</A>]  Zopf, R., "Real-time Transport =
Protocol (RTP) Payload for
        Comfort Noise (CN)", <A =
href=3D"http://tools.ietf.org/html/rfc3389">RFC 3389</A>, September =
2002.

   [<A id=3Dref-10 name=3Dref-10>10</A>] Deleam, D. and J.-P. Petit, =
"Real-time implementations of the
        recent ITU-T low bit rate speech coders on the TI TMS320C54X
        DSP: results, methodology, and applications", in Proc. of
        International Conference on Signal Processing, Technology, and
        Applications (ICSPAT) , (Boston, Massachusetts), pp. 1656--1660,
        October 1996.

   [<A id=3Dref-11 name=3Dref-11>11</A>] Mouly, M. and M.-B. Pautet, The =
GSM system for mobile
        communications Lassay-les-Chateaux, France: Europe Media
        Duplication, 1993.

   [<A id=3Dref-12 name=3Dref-12>12</A>] Degener, J., "Digital Speech =
Compression", Dr. Dobb's Journal,
        December 1994.

   [<A id=3Dref-13 name=3Dref-13>13</A>] Redl, S., Weber, M. and M. =
Oliphant, An Introduction to GSM
        Boston: Artech House, 1995.

   [<A id=3Dref-14 name=3Dref-14>14</A>] Hoffman, D., Fernando, G., =
Goyal, V. and M. Civanlar, "RTP
        Payload Format for MPEG1/MPEG2 Video", <A =
href=3D"http://tools.ietf.org/html/rfc2250">RFC 2250</A>, January 1998.

   [<A id=3Dref-15 name=3Dref-15>15</A>] Jayant, N. and P. Noll, Digital =
Coding of Waveforms--Principles
        and Applications to Speech and Video Englewood Cliffs, New
        Jersey: Prentice-Hall, 1984.

   [<A id=3Dref-16 name=3Dref-16>16</A>] McKay, K., "RTP Payload Format =
for PureVoice(tm) Audio", <A =
href=3D"http://tools.ietf.org/html/rfc2658">RFC</A>
        <A href=3D"http://tools.ietf.org/html/rfc2658">2658</A>, August =
1999.

   [<A id=3Dref-17 name=3Dref-17>17</A>] Perkins, C., Kouvelas, I., =
Hodson, O., Hardman, V., Handley, M.,
        Bolot, J.-C., Vega-Garcia, A. and S. Fosse-Parisis, "RTP Payload
        for Redundant Audio Data", <A =
href=3D"http://tools.ietf.org/html/rfc2198">RFC 2198</A>, September =
1997.

   [<A id=3Dref-18 name=3Dref-18>18</A>] Speer, M. and D. Hoffman, "RTP =
Payload Format of Sun's CellB
        Video Encoding", <A =
href=3D"http://tools.ietf.org/html/rfc2029">RFC 2029</A>, October 1996.

   [<A id=3Dref-19 name=3Dref-19>19</A>] Berc, L., Fenner, W., =
Frederick, R., McCanne, S. and P. Stewart,
        "RTP Payload Format for JPEG-Compressed Video", <A =
href=3D"http://tools.ietf.org/html/rfc2435">RFC 2435</A>,
        October 1998.

   [<A id=3Dref-20 name=3Dref-20>20</A>] Turletti, T. and C. Huitema, =
"RTP Payload Format for H.261 Video
        Streams", <A href=3D"http://tools.ietf.org/html/rfc2032">RFC =
2032</A>, October 1996.

   [<A id=3Dref-21 name=3Dref-21>21</A>] Zhu, C., "RTP Payload Format =
for H.263 Video Streams", <A =
href=3D"http://tools.ietf.org/html/rfc2190">RFC 2190</A>,
        September 1997.





<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 40]</SPAN>
<A id=3Dpage-41 href=3D"http://tools.ietf.org/html/rfc3551#page-41" =
name=3Dpage-41><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   [<A id=3Dref-22 name=3Dref-22>22</A>] Bormann, C., Cline, L., =
Deisher, G., Gardos, T., Maciocco, C.,
        Newell, D., Ott, J., Sullivan, G., Wenger, S. and C. Zhu, "RTP
        Payload Format for the 1998 Version of ITU-T Rec. H.263 Video
        (H.263+)", <A href=3D"http://tools.ietf.org/html/rfc2429">RFC =
2429</A>, October 1998.

   [<A id=3Dref-23 name=3Dref-23>23</A>] Schulzrinne, H., Rao, A. and R. =
Lanphier, "Real Time Streaming
        Protocol (RTSP)", <A =
href=3D"http://tools.ietf.org/html/rfc2326">RFC 2326</A>, April 1998.

   [<A id=3Dref-24 name=3Dref-24>24</A>] Cain, B., Deering, S., =
Kouvelas, I., Fenner, B. and A.
        Thyagarajan, "Internet Group Management Protocol, Version 3",
        <A href=3D"http://tools.ietf.org/html/rfc3376">RFC 3376</A>, =
October 2002.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-13>13</A>. Current =
Locations of Related Resources</SPAN>

   Note:  Several sections below refer to the ITU-T Software Tool
   Library (STL).  It is available from the ITU Sales Service, Place des
   Nations, CH-1211 Geneve 20, Switzerland (also check
   <A href=3D"http://www.itu.int/">http://www.itu.int/</A>).  The ITU-T =
STL is covered by a license defined
   in ITU-T Recommendation G.191, "Software tools for speech and audio
   coding standardization".

   DVI4

   An archived copy of the document IMA Recommended Practices for
   Enhancing Digital Audio Compatibility in Multimedia Systems (version
   3.0), which describes the IMA ADPCM algorithm, is available at:

      <A =
href=3D"http://www.cs.columbia.edu/~hgs/audio/dvi/">http://www.cs.columbi=
a.edu/~hgs/audio/dvi/</A>

   An implementation is available from Jack Jansen at

      ftp://ftp.cwi.nl/local/pub/audio/adpcm.shar

   G722

   An implementation of the G.722 algorithm is available as part of the
   ITU-T STL, described above.

   G723

   The reference C code implementation defining the G.723.1 algorithm
   and its Annexes A, B, and C are available as an integral part of
   Recommendation G.723.1 from the ITU Sales Service, address listed
   above.  Both the algorithm and C code are covered by a specific
   license.  The ITU-T Secretariat should be contacted to obtain such
   licensing information.





<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 41]</SPAN>
<A id=3Dpage-42 href=3D"http://tools.ietf.org/html/rfc3551#page-42" =
name=3Dpage-42><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


   G726

   G726 is specified in the ITU-T Recommendation G.726, "40, 32, 24, and
   16 kb/s Adaptive Differential Pulse Code Modulation (ADPCM)".  An
   implementation of the G.726 algorithm is available as part of the
   ITU-T STL, described above.

   G729

   The reference C code implementation defining the G.729 algorithm and
   its Annexes A through I are available as an integral part of
   Recommendation G.729 from the ITU Sales Service, listed above.  Annex
   I contains the integrated C source code for all G.729 operating
   modes.  The G.729 algorithm and associated C code are covered by a
   specific license.  The contact information for obtaining the license
   is available from the ITU-T Secretariat.

   GSM

   A reference implementation was written by Carsten Bormann and Jutta
   Degener (then at TU Berlin, Germany).  It is available at

      <A =
href=3D"http://www.dmn.tzi.org/software/gsm/">http://www.dmn.tzi.org/soft=
ware/gsm/</A>

   Although the RPE-LTP algorithm is not an ITU-T standard, there is a C
   code implementation of the RPE-LTP algorithm available as part of the
   ITU-T STL.  The STL implementation is an adaptation of the TU Berlin
   version.

   LPC

   An implementation is available at

      ftp://parcftp.xerox.com/pub/net-research/lpc.tar.Z

   PCMU, PCMA

   An implementation of these algorithms is available as part of the
   ITU-T STL, described above.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-14>14</A>. =
Acknowledgments</SPAN>

   The comments and careful review of Simao Campos, Richard Cox and AVT
   Working Group participants are gratefully acknowledged.  The GSM
   description was adopted from the IMTC Voice over IP Forum Service
   Interoperability Implementation Agreement (January 1997).  Fred Burg
   and Terry Lyons helped with the G.729 description.




<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 42]</SPAN>
<A id=3Dpage-43 href=3D"http://tools.ietf.org/html/rfc3551#page-43" =
name=3Dpage-43><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-15>15</A>. =
Intellectual Property Rights Statement</SPAN>

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights.  Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in <A =
href=3D"http://tools.ietf.org/html/bcp11">BCP-11</A>.  Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard.  Please address the information to the IETF Executive
   Director.

<SPAN class=3Dheader level=3D"2"><A name=3Dsection-16>16</A>. Authors' =
Addresses</SPAN>

   Henning Schulzrinne
   Department of Computer Science
   Columbia University
   1214 Amsterdam Avenue
   New York, NY 10027
   United States

   EMail: schulzrinne@cs.columbia.edu


   Stephen L. Casner
   Packet Design
   3400 Hillview Avenue, Building 3
   Palo Alto, CA 94304
   United States

   EMail: casner@acm.org










<SPAN class=3Dgrey>Schulzrinne &amp; Casner        Standards Track       =
             [Page 43]</SPAN>
<A id=3Dpage-44 href=3D"http://tools.ietf.org/html/rfc3551#page-44" =
name=3Dpage-44><SPAN class=3Dbreak></SPAN></A>
<SPAN class=3Dgrey><A href=3D"http://tools.ietf.org/html/rfc3551">RFC =
3551</A>                    RTP A/V Profile                    July =
2003</SPAN>


<SPAN class=3Dheader level=3D"2"><A name=3Dsection-17>17</A>. Full =
Copyright Statement</SPAN>

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

   Funding for the RFC Editor function is currently provided by the
   Internet Society.



















Schulzrinne &amp; Casner        Standards Track                    [Page =
44]
<SPAN class=3Dbreak></SPAN>

</PRE><BR><SMALL><SMALL>Html markup produced by rfcmarkup 1.31, =
available from=20
<A=20
href=3D"http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/too=
ls/rfcmarkup/</A>=20
</SMALL></SMALL></BODY></HTML>

------=_NextPart_000_0007_01C6F7DF.78FC5BD0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://tools.ietf.org/js/MochiKit.js

/***=0A=
=0A=
    MochiKit.MochiKit 1.3.1 : PACKED VERSION=0A=
=0A=
    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please=0A=
    diff against the source tree, not this file.=0A=
=0A=
    See <http://mochikit.com/> for documentation, downloads, license, =
etc.=0A=
=0A=
    (c) 2005 Bob Ippolito.  All rights Reserved.=0A=
=0A=
***/=0A=
=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Base");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
MochiKit.Base=3D{};=0A=
}=0A=
MochiKit.Base.VERSION=3D"1.3.1";=0A=
MochiKit.Base.NAME=3D"MochiKit.Base";=0A=
MochiKit.Base.update=3Dfunction(_1,_2){=0A=
if(_1=3D=3D=3Dnull){=0A=
_1=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"undefined"&&o!=3D=3Dnull){=0A=
for(var k in o){=0A=
_1[k]=3Do[k];=0A=
}=0A=
}=0A=
}=0A=
return _1;=0A=
};=0A=
MochiKit.Base.update(MochiKit.Base,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},counter:function(n){=0A=
if(arguments.length=3D=3D=3D0){=0A=
n=3D1;=0A=
}=0A=
return function(){=0A=
return n++;=0A=
};=0A=
},clone:function(_7){=0A=
var me=3Darguments.callee;=0A=
if(arguments.length=3D=3D1){=0A=
me.prototype=3D_7;=0A=
return new me();=0A=
}=0A=
},flattenArguments:function(_9){=0A=
var res=3D[];=0A=
var m=3DMochiKit.Base;=0A=
var _12=3Dm.extend(null,arguments);=0A=
while(_12.length){=0A=
var o=3D_12.shift();=0A=
if(o&&typeof (o)=3D=3D"object"&&typeof (o.length)=3D=3D"number"){=0A=
for(var i=3Do.length-1;i>=3D0;i--){=0A=
_12.unshift(o[i]);=0A=
}=0A=
}else{=0A=
res.push(o);=0A=
}=0A=
}=0A=
return res;=0A=
},extend:function(_13,obj,_15){=0A=
if(!_15){=0A=
_15=3D0;=0A=
}=0A=
if(obj){=0A=
var l=3Dobj.length;=0A=
if(typeof (l)!=3D"number"){=0A=
if(typeof (MochiKit.Iter)!=3D"undefined"){=0A=
obj=3DMochiKit.Iter.list(obj);=0A=
l=3Dobj.length;=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(!_13){=0A=
_13=3D[];=0A=
}=0A=
for(var i=3D_15;i<l;i++){=0A=
_13.push(obj[i]);=0A=
}=0A=
}=0A=
return _13;=0A=
},updatetree:function(_17,obj){=0A=
if(_17=3D=3D=3Dnull){=0A=
_17=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"undefined"&&o!=3D=3Dnull){=0A=
for(var k in o){=0A=
var v=3Do[k];=0A=
if(typeof (_17[k])=3D=3D"object"&&typeof (v)=3D=3D"object"){=0A=
arguments.callee(_17[k],v);=0A=
}else{=0A=
_17[k]=3Dv;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _17;=0A=
},setdefault:function(_19,obj){=0A=
if(_19=3D=3D=3Dnull){=0A=
_19=3D{};=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
for(var k in o){=0A=
if(!(k in _19)){=0A=
_19[k]=3Do[k];=0A=
}=0A=
}=0A=
}=0A=
return _19;=0A=
},keys:function(obj){=0A=
var _20=3D[];=0A=
for(var _21 in obj){=0A=
_20.push(_21);=0A=
}=0A=
return _20;=0A=
},items:function(obj){=0A=
var _22=3D[];=0A=
var e;=0A=
for(var _24 in obj){=0A=
var v;=0A=
try{=0A=
v=3Dobj[_24];=0A=
}=0A=
catch(e){=0A=
continue;=0A=
}=0A=
_22.push([_24,v]);=0A=
}=0A=
return _22;=0A=
},_newNamedError:function(_25,_26,_27){=0A=
_27.prototype=3Dnew MochiKit.Base.NamedError(_25.NAME+"."+_26);=0A=
_25[_26]=3D_27;=0A=
},operator:{truth:function(a){=0A=
return !!a;=0A=
},lognot:function(a){=0A=
return !a;=0A=
},identity:function(a){=0A=
return a;=0A=
},not:function(a){=0A=
return ~a;=0A=
},neg:function(a){=0A=
return -a;=0A=
},add:function(a,b){=0A=
return a+b;=0A=
},sub:function(a,b){=0A=
return a-b;=0A=
},div:function(a,b){=0A=
return a/b;=0A=
},mod:function(a,b){=0A=
return a%b;=0A=
},mul:function(a,b){=0A=
return a*b;=0A=
},and:function(a,b){=0A=
return a&b;=0A=
},or:function(a,b){=0A=
return a|b;=0A=
},xor:function(a,b){=0A=
return a^b;=0A=
},lshift:function(a,b){=0A=
return a<<b;=0A=
},rshift:function(a,b){=0A=
return a>>b;=0A=
},zrshift:function(a,b){=0A=
return a>>>b;=0A=
},eq:function(a,b){=0A=
return a=3D=3Db;=0A=
},ne:function(a,b){=0A=
return a!=3Db;=0A=
},gt:function(a,b){=0A=
return a>b;=0A=
},ge:function(a,b){=0A=
return a>=3Db;=0A=
},lt:function(a,b){=0A=
return a<b;=0A=
},le:function(a,b){=0A=
return a<=3Db;=0A=
},ceq:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D=3D0;=0A=
},cne:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D=3D0;=0A=
},cgt:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D1;=0A=
},cge:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D-1;=0A=
},clt:function(a,b){=0A=
return MochiKit.Base.compare(a,b)=3D=3D-1;=0A=
},cle:function(a,b){=0A=
return MochiKit.Base.compare(a,b)!=3D1;=0A=
},logand:function(a,b){=0A=
return a&&b;=0A=
},logor:function(a,b){=0A=
return a||b;=0A=
},contains:function(a,b){=0A=
return b in a;=0A=
}},forwardCall:function(_30){=0A=
return function(){=0A=
return this[_30].apply(this,arguments);=0A=
};=0A=
},itemgetter:function(_31){=0A=
return function(arg){=0A=
return arg[_31];=0A=
};=0A=
},typeMatcher:function(){=0A=
var _33=3D{};=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var typ=3Darguments[i];=0A=
_33[typ]=3Dtyp;=0A=
}=0A=
return function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(typeof (arguments[i]) in _33)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
};=0A=
},isNull:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(arguments[i]!=3D=3Dnull){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isUndefinedOrNull:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(!(typeof (o)=3D=3D"undefined"||o=3D=3D=3Dnull)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isEmpty:function(obj){=0A=
return !MochiKit.Base.isNotEmpty.apply(this,arguments);=0A=
},isNotEmpty:function(obj){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(!(o&&o.length)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isArrayLike:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
var typ=3Dtypeof (o);=0A=
if((typ!=3D"object"&&!(typ=3D=3D"function"&&typeof =
(o.item)=3D=3D"function"))||o=3D=3D=3Dnull||typeof =
(o.length)!=3D"number"){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},isDateLike:function(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(typeof (o)!=3D"object"||o=3D=3D=3Dnull||typeof =
(o.getTime)!=3D"function"){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},xmap:function(fn){=0A=
if(fn=3D=3D=3Dnull){=0A=
return MochiKit.Base.extend(null,arguments,1);=0A=
}=0A=
var _36=3D[];=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
_36.push(fn(arguments[i]));=0A=
}=0A=
return _36;=0A=
},map:function(fn,lst){=0A=
var m=3DMochiKit.Base;=0A=
var itr=3DMochiKit.Iter;=0A=
var _39=3Dm.isArrayLike;=0A=
if(arguments.length<=3D2){=0A=
if(!_39(lst)){=0A=
if(itr){=0A=
lst=3Ditr.list(lst);=0A=
if(fn=3D=3D=3Dnull){=0A=
return lst;=0A=
}=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(fn=3D=3D=3Dnull){=0A=
return m.extend(null,lst);=0A=
}=0A=
var _40=3D[];=0A=
for(var i=3D0;i<lst.length;i++){=0A=
_40.push(fn(lst[i]));=0A=
}=0A=
return _40;=0A=
}else{=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3DArray;=0A=
}=0A=
var _41=3Dnull;=0A=
for(i=3D1;i<arguments.length;i++){=0A=
if(!_39(arguments[i])){=0A=
if(itr){=0A=
return itr.list(itr.imap.apply(null,arguments));=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
var l=3Darguments[i].length;=0A=
if(_41=3D=3D=3Dnull||_41>l){=0A=
_41=3Dl;=0A=
}=0A=
}=0A=
_40=3D[];=0A=
for(i=3D0;i<_41;i++){=0A=
var _42=3D[];=0A=
for(var j=3D1;j<arguments.length;j++){=0A=
_42.push(arguments[j][i]);=0A=
}=0A=
_40.push(fn.apply(this,_42));=0A=
}=0A=
return _40;=0A=
}=0A=
},xfilter:function(fn){=0A=
var _44=3D[];=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3DMochiKit.Base.operator.truth;=0A=
}=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var o=3Darguments[i];=0A=
if(fn(o)){=0A=
_44.push(o);=0A=
}=0A=
}=0A=
return _44;=0A=
},filter:function(fn,lst,_45){=0A=
var _46=3D[];=0A=
var m=3DMochiKit.Base;=0A=
if(!m.isArrayLike(lst)){=0A=
if(MochiKit.Iter){=0A=
lst=3DMochiKit.Iter.list(lst);=0A=
}else{=0A=
throw new TypeError("Argument not an array-like and MochiKit.Iter not =
present");=0A=
}=0A=
}=0A=
if(fn=3D=3D=3Dnull){=0A=
fn=3Dm.operator.truth;=0A=
}=0A=
if(typeof (Array.prototype.filter)=3D=3D"function"){=0A=
return Array.prototype.filter.call(lst,fn,_45);=0A=
}else{=0A=
if(typeof (_45)=3D=3D"undefined"||_45=3D=3D=3Dnull){=0A=
for(var i=3D0;i<lst.length;i++){=0A=
var o=3Dlst[i];=0A=
if(fn(o)){=0A=
_46.push(o);=0A=
}=0A=
}=0A=
}else{=0A=
for(i=3D0;i<lst.length;i++){=0A=
o=3Dlst[i];=0A=
if(fn.call(_45,o)){=0A=
_46.push(o);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _46;=0A=
},_wrapDumbFunction:function(_47){=0A=
return function(){=0A=
switch(arguments.length){=0A=
case 0:=0A=
return _47();=0A=
case 1:=0A=
return _47(arguments[0]);=0A=
case 2:=0A=
return _47(arguments[0],arguments[1]);=0A=
case 3:=0A=
return _47(arguments[0],arguments[1],arguments[2]);=0A=
}=0A=
var _48=3D[];=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
_48.push("arguments["+i+"]");=0A=
}=0A=
return eval("(func("+_48.join(",")+"))");=0A=
};=0A=
},method:function(_49,_50){=0A=
var m=3DMochiKit.Base;=0A=
return m.bind.apply(this,m.extend([_50,_49],arguments,2));=0A=
},bind:function(_51,_52){=0A=
if(typeof (_51)=3D=3D"string"){=0A=
_51=3D_52[_51];=0A=
}=0A=
var _53=3D_51.im_func;=0A=
var _54=3D_51.im_preargs;=0A=
var _55=3D_51.im_self;=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_51)=3D=3D"function"&&typeof (_51.apply)=3D=3D"undefined"){=0A=
_51=3Dm._wrapDumbFunction(_51);=0A=
}=0A=
if(typeof (_53)!=3D"function"){=0A=
_53=3D_51;=0A=
}=0A=
if(typeof (_52)!=3D"undefined"){=0A=
_55=3D_52;=0A=
}=0A=
if(typeof (_54)=3D=3D"undefined"){=0A=
_54=3D[];=0A=
}else{=0A=
_54=3D_54.slice();=0A=
}=0A=
m.extend(_54,arguments,2);=0A=
var _56=3Dfunction(){=0A=
var _57=3Darguments;=0A=
var me=3Darguments.callee;=0A=
if(me.im_preargs.length>0){=0A=
_57=3Dm.concat(me.im_preargs,_57);=0A=
}=0A=
var _52=3Dme.im_self;=0A=
if(!_52){=0A=
_52=3Dthis;=0A=
}=0A=
return me.im_func.apply(_52,_57);=0A=
};=0A=
_56.im_self=3D_55;=0A=
_56.im_func=3D_53;=0A=
_56.im_preargs=3D_54;=0A=
return _56;=0A=
},bindMethods:function(_58){=0A=
var _59=3DMochiKit.Base.bind;=0A=
for(var k in _58){=0A=
var _60=3D_58[k];=0A=
if(typeof (_60)=3D=3D"function"){=0A=
_58[k]=3D_59(_60,_58);=0A=
}=0A=
}=0A=
},registerComparator:function(_61,_62,_63,_64){=0A=
MochiKit.Base.comparatorRegistry.register(_61,_62,_63,_64);=0A=
},_primitives:{"boolean":true,"string":true,"number":true},compare:functi=
on(a,b){=0A=
if(a=3D=3Db){=0A=
return 0;=0A=
}=0A=
var _65=3D(typeof (a)=3D=3D"undefined"||a=3D=3D=3Dnull);=0A=
var _66=3D(typeof (b)=3D=3D"undefined"||b=3D=3D=3Dnull);=0A=
if(_65&&_66){=0A=
return 0;=0A=
}else{=0A=
if(_65){=0A=
return -1;=0A=
}else{=0A=
if(_66){=0A=
return 1;=0A=
}=0A=
}=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var _67=3Dm._primitives;=0A=
if(!(typeof (a) in _67&&typeof (b) in _67)){=0A=
try{=0A=
return m.comparatorRegistry.match(a,b);=0A=
}=0A=
catch(e){=0A=
if(e!=3Dm.NotFound){=0A=
throw e;=0A=
}=0A=
}=0A=
}=0A=
if(a<b){=0A=
return -1;=0A=
}else{=0A=
if(a>b){=0A=
return 1;=0A=
}=0A=
}=0A=
var _68=3Dm.repr;=0A=
throw new TypeError(_68(a)+" and "+_68(b)+" can not be compared");=0A=
},compareDateLike:function(a,b){=0A=
return MochiKit.Base.compare(a.getTime(),b.getTime());=0A=
},compareArrayLike:function(a,b){=0A=
var _69=3DMochiKit.Base.compare;=0A=
var _70=3Da.length;=0A=
var _71=3D0;=0A=
if(_70>b.length){=0A=
_71=3D1;=0A=
_70=3Db.length;=0A=
}else{=0A=
if(_70<b.length){=0A=
_71=3D-1;=0A=
}=0A=
}=0A=
for(var i=3D0;i<_70;i++){=0A=
var cmp=3D_69(a[i],b[i]);=0A=
if(cmp){=0A=
return cmp;=0A=
}=0A=
}=0A=
return _71;=0A=
},registerRepr:function(_73,_74,_75,_76){=0A=
MochiKit.Base.reprRegistry.register(_73,_74,_75,_76);=0A=
},repr:function(o){=0A=
if(typeof (o)=3D=3D"undefined"){=0A=
return "undefined";=0A=
}else{=0A=
if(o=3D=3D=3Dnull){=0A=
return "null";=0A=
}=0A=
}=0A=
try{=0A=
if(typeof (o.__repr__)=3D=3D"function"){=0A=
return o.__repr__();=0A=
}else{=0A=
if(typeof (o.repr)=3D=3D"function"&&o.repr!=3Darguments.callee){=0A=
return o.repr();=0A=
}=0A=
}=0A=
return MochiKit.Base.reprRegistry.match(o);=0A=
}=0A=
catch(e){=0A=
if(typeof =
(o.NAME)=3D=3D"string"&&(o.toString=3D=3DFunction.prototype.toString||o.t=
oString=3D=3DObject.prototype.toString)){=0A=
return o.NAME;=0A=
}=0A=
}=0A=
try{=0A=
var _77=3D(o+"");=0A=
}=0A=
catch(e){=0A=
return "["+typeof (o)+"]";=0A=
}=0A=
if(typeof (o)=3D=3D"function"){=0A=
o=3D_77.replace(/^\s+/,"");=0A=
var idx=3Do.indexOf("{");=0A=
if(idx!=3D-1){=0A=
o=3Do.substr(0,idx)+"{...}";=0A=
}=0A=
}=0A=
return _77;=0A=
},reprArrayLike:function(o){=0A=
var m=3DMochiKit.Base;=0A=
return "["+m.map(m.repr,o).join(", ")+"]";=0A=
},reprString:function(o){=0A=
return =
("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/=
[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]=
/g,"\\r");=0A=
},reprNumber:function(o){=0A=
return o+"";=0A=
},registerJSON:function(_79,_80,_81,_82){=0A=
MochiKit.Base.jsonRegistry.register(_79,_80,_81,_82);=0A=
},evalJSON:function(){=0A=
return eval("("+arguments[0]+")");=0A=
},serializeJSON:function(o){=0A=
var _83=3Dtypeof (o);=0A=
if(_83=3D=3D"undefined"){=0A=
return "undefined";=0A=
}else{=0A=
if(_83=3D=3D"number"||_83=3D=3D"boolean"){=0A=
return o+"";=0A=
}else{=0A=
if(o=3D=3D=3Dnull){=0A=
return "null";=0A=
}=0A=
}=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var _84=3Dm.reprString;=0A=
if(_83=3D=3D"string"){=0A=
return _84(o);=0A=
}=0A=
var me=3Darguments.callee;=0A=
var _85;=0A=
if(typeof (o.__json__)=3D=3D"function"){=0A=
_85=3Do.__json__();=0A=
if(o!=3D=3D_85){=0A=
return me(_85);=0A=
}=0A=
}=0A=
if(typeof (o.json)=3D=3D"function"){=0A=
_85=3Do.json();=0A=
if(o!=3D=3D_85){=0A=
return me(_85);=0A=
}=0A=
}=0A=
if(_83!=3D"function"&&typeof (o.length)=3D=3D"number"){=0A=
var res=3D[];=0A=
for(var i=3D0;i<o.length;i++){=0A=
var val=3Dme(o[i]);=0A=
if(typeof (val)!=3D"string"){=0A=
val=3D"undefined";=0A=
}=0A=
res.push(val);=0A=
}=0A=
return "["+res.join(", ")+"]";=0A=
}=0A=
try{=0A=
_85=3Dm.jsonRegistry.match(o);=0A=
return me(_85);=0A=
}=0A=
catch(e){=0A=
if(e!=3Dm.NotFound){=0A=
throw e;=0A=
}=0A=
}=0A=
if(_83=3D=3D"function"){=0A=
return null;=0A=
}=0A=
res=3D[];=0A=
for(var k in o){=0A=
var _87;=0A=
if(typeof (k)=3D=3D"number"){=0A=
_87=3D"\""+k+"\"";=0A=
}else{=0A=
if(typeof (k)=3D=3D"string"){=0A=
_87=3D_84(k);=0A=
}else{=0A=
continue;=0A=
}=0A=
}=0A=
val=3Dme(o[k]);=0A=
if(typeof (val)!=3D"string"){=0A=
continue;=0A=
}=0A=
res.push(_87+":"+val);=0A=
}=0A=
return "{"+res.join(", ")+"}";=0A=
},objEqual:function(a,b){=0A=
return (MochiKit.Base.compare(a,b)=3D=3D=3D0);=0A=
},arrayEqual:function(_88,arr){=0A=
if(_88.length!=3Darr.length){=0A=
return false;=0A=
}=0A=
return (MochiKit.Base.compare(_88,arr)=3D=3D=3D0);=0A=
},concat:function(){=0A=
var _90=3D[];=0A=
var _91=3DMochiKit.Base.extend;=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
_91(_90,arguments[i]);=0A=
}=0A=
return _90;=0A=
},keyComparator:function(key){=0A=
var m=3DMochiKit.Base;=0A=
var _93=3Dm.compare;=0A=
if(arguments.length=3D=3D1){=0A=
return function(a,b){=0A=
return _93(a[key],b[key]);=0A=
};=0A=
}=0A=
var _94=3Dm.extend(null,arguments);=0A=
return function(a,b){=0A=
var _95=3D0;=0A=
for(var i=3D0;(_95=3D=3D=3D0)&&(i<_94.length);i++){=0A=
var key=3D_94[i];=0A=
_95=3D_93(a[key],b[key]);=0A=
}=0A=
return _95;=0A=
};=0A=
},reverseKeyComparator:function(key){=0A=
var _96=3DMochiKit.Base.keyComparator.apply(this,arguments);=0A=
return function(a,b){=0A=
return _96(b,a);=0A=
};=0A=
},partial:function(_97){=0A=
var m=3DMochiKit.Base;=0A=
return m.bind.apply(this,m.extend([_97,undefined],arguments,1));=0A=
},listMinMax:function(_98,lst){=0A=
if(lst.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var cur=3Dlst[0];=0A=
var _100=3DMochiKit.Base.compare;=0A=
for(var i=3D1;i<lst.length;i++){=0A=
var o=3Dlst[i];=0A=
if(_100(o,cur)=3D=3D_98){=0A=
cur=3Do;=0A=
}=0A=
}=0A=
return cur;=0A=
},objMax:function(){=0A=
return MochiKit.Base.listMinMax(1,arguments);=0A=
},objMin:function(){=0A=
return MochiKit.Base.listMinMax(-1,arguments);=0A=
},findIdentical:function(lst,_101,_102,end){=0A=
if(typeof (end)=3D=3D"undefined"||end=3D=3D=3Dnull){=0A=
end=3Dlst.length;=0A=
}=0A=
for(var i=3D(_102||0);i<end;i++){=0A=
if(lst[i]=3D=3D=3D_101){=0A=
return i;=0A=
}=0A=
}=0A=
return -1;=0A=
},findValue:function(lst,_104,_105,end){=0A=
if(typeof (end)=3D=3D"undefined"||end=3D=3D=3Dnull){=0A=
end=3Dlst.length;=0A=
}=0A=
var cmp=3DMochiKit.Base.compare;=0A=
for(var i=3D(_105||0);i<end;i++){=0A=
if(cmp(lst[i],_104)=3D=3D=3D0){=0A=
return i;=0A=
}=0A=
}=0A=
return -1;=0A=
},nodeWalk:function(node,_107){=0A=
var _108=3D[node];=0A=
var _109=3DMochiKit.Base.extend;=0A=
while(_108.length){=0A=
var res=3D_107(_108.shift());=0A=
if(res){=0A=
_109(_108,res);=0A=
}=0A=
}=0A=
},nameFunctions:function(_110){=0A=
var base=3D_110.NAME;=0A=
if(typeof (base)=3D=3D"undefined"){=0A=
base=3D"";=0A=
}else{=0A=
base=3Dbase+".";=0A=
}=0A=
for(var name in _110){=0A=
var o=3D_110[name];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+name;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
},queryString:function(_113,_114){=0A=
if(typeof =
(MochiKit.DOM)!=3D"undefined"&&arguments.length=3D=3D1&&(typeof =
(_113)=3D=3D"string"||(typeof =
(_113.nodeType)!=3D"undefined"&&_113.nodeType>0))){=0A=
var kv=3DMochiKit.DOM.formContents(_113);=0A=
_113=3Dkv[0];=0A=
_114=3Dkv[1];=0A=
}else{=0A=
if(arguments.length=3D=3D1){=0A=
var o=3D_113;=0A=
_113=3D[];=0A=
_114=3D[];=0A=
for(var k in o){=0A=
var v=3Do[k];=0A=
if(typeof (v)!=3D"function"){=0A=
_113.push(k);=0A=
_114.push(v);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
var rval=3D[];=0A=
var len=3DMath.min(_113.length,_114.length);=0A=
var _118=3DMochiKit.Base.urlEncode;=0A=
for(var i=3D0;i<len;i++){=0A=
v=3D_114[i];=0A=
if(typeof (v)!=3D"undefined"&&v!=3D=3Dnull){=0A=
rval.push(_118(_113[i])+"=3D"+_118(v));=0A=
}=0A=
}=0A=
return rval.join("&");=0A=
},parseQueryString:function(_119,_120){=0A=
var _121=3D_119.replace(/\+/g,"%20").split("&");=0A=
var o=3D{};=0A=
var _122;=0A=
if(typeof (decodeURIComponent)!=3D"undefined"){=0A=
_122=3DdecodeURIComponent;=0A=
}else{=0A=
_122=3Dunescape;=0A=
}=0A=
if(_120){=0A=
for(var i=3D0;i<_121.length;i++){=0A=
var pair=3D_121[i].split("=3D");=0A=
var name=3D_122(pair[0]);=0A=
var arr=3Do[name];=0A=
if(!(arr instanceof Array)){=0A=
arr=3D[];=0A=
o[name]=3Darr;=0A=
}=0A=
arr.push(_122(pair[1]));=0A=
}=0A=
}else{=0A=
for(i=3D0;i<_121.length;i++){=0A=
pair=3D_121[i].split("=3D");=0A=
o[_122(pair[0])]=3D_122(pair[1]);=0A=
}=0A=
}=0A=
return o;=0A=
}});=0A=
MochiKit.Base.AdapterRegistry=3Dfunction(){=0A=
this.pairs=3D[];=0A=
};=0A=
MochiKit.Base.AdapterRegistry.prototype=3D{register:function(name,_124,wr=
ap,_126){=0A=
if(_126){=0A=
this.pairs.unshift([name,_124,wrap]);=0A=
}else{=0A=
this.pairs.push([name,_124,wrap]);=0A=
}=0A=
},match:function(){=0A=
for(var i=3D0;i<this.pairs.length;i++){=0A=
var pair=3Dthis.pairs[i];=0A=
if(pair[1].apply(this,arguments)){=0A=
return pair[2].apply(this,arguments);=0A=
}=0A=
}=0A=
throw MochiKit.Base.NotFound;=0A=
},unregister:function(name){=0A=
for(var i=3D0;i<this.pairs.length;i++){=0A=
var pair=3Dthis.pairs[i];=0A=
if(pair[0]=3D=3Dname){=0A=
this.pairs.splice(i,1);=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
}};=0A=
MochiKit.Base.EXPORT=3D["counter","clone","extend","update","updatetree",=
"setdefault","keys","items","NamedError","operator","forwardCall","itemge=
tter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNul=
l","isEmpty","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilte=
r","filter","bind","bindMethods","NotFound","AdapterRegistry","registerCo=
mparator","compare","registerRepr","repr","objEqual","arrayEqual","concat=
","keyComparator","reverseKeyComparator","partial","merge","listMinMax","=
listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryS=
tring","serializeJSON","registerJSON","evalJSON","parseQueryString","find=
Value","findIdentical","flattenArguments","method"];=0A=
MochiKit.Base.EXPORT_OK=3D["nameFunctions","comparatorRegistry","reprRegi=
stry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike"=
,"reprString","reprNumber"];=0A=
MochiKit.Base._exportSymbols=3Dfunction(_127,_128){=0A=
if(typeof (MochiKit.__export__)=3D=3D"undefined"){=0A=
MochiKit.__export__=3D(MochiKit.__compat__||(typeof =
(JSAN)=3D=3D"undefined"&&typeof (dojo)=3D=3D"undefined"));=0A=
}=0A=
if(!MochiKit.__export__){=0A=
return;=0A=
}=0A=
var all=3D_128.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_127[all[i]]=3D_128[all[i]];=0A=
}=0A=
};=0A=
MochiKit.Base.__new__=3Dfunction(){=0A=
var m=3Dthis;=0A=
m.forward=3Dm.forwardCall;=0A=
m.find=3Dm.findValue;=0A=
if(typeof (encodeURIComponent)!=3D"undefined"){=0A=
m.urlEncode=3Dfunction(_130){=0A=
return encodeURIComponent(_130).replace(/\'/g,"%27");=0A=
};=0A=
}else{=0A=
m.urlEncode=3Dfunction(_131){=0A=
return =
escape(_131).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g=
,"%27");=0A=
};=0A=
}=0A=
m.NamedError=3Dfunction(name){=0A=
this.message=3Dname;=0A=
this.name=3Dname;=0A=
};=0A=
m.NamedError.prototype=3Dnew Error();=0A=
m.update(m.NamedError.prototype,{repr:function(){=0A=
if(this.message&&this.message!=3Dthis.name){=0A=
return this.name+"("+m.repr(this.message)+")";=0A=
}else{=0A=
return this.name+"()";=0A=
}=0A=
},toString:m.forwardCall("repr")});=0A=
m.NotFound=3Dnew m.NamedError("MochiKit.Base.NotFound");=0A=
m.listMax=3Dm.partial(m.listMinMax,1);=0A=
m.listMin=3Dm.partial(m.listMinMax,-1);=0A=
m.isCallable=3Dm.typeMatcher("function");=0A=
m.isUndefined=3Dm.typeMatcher("undefined");=0A=
m.merge=3Dm.partial(m.update,null);=0A=
m.zip=3Dm.partial(m.map,null);=0A=
m.comparatorRegistry=3Dnew m.AdapterRegistry();=0A=
m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);=0A=
m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);=0A=
m.reprRegistry=3Dnew m.AdapterRegistry();=0A=
m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);=0A=
m.registerRepr("string",m.typeMatcher("string"),m.reprString);=0A=
m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);=0A=
m.jsonRegistry=3Dnew m.AdapterRegistry();=0A=
var all=3Dm.concat(m.EXPORT,m.EXPORT_OK);=0A=
m.EXPORT_TAGS=3D{":common":m.concat(m.EXPORT_OK),":all":all};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Base.__new__();=0A=
if(!MochiKit.__compat__){=0A=
compare=3DMochiKit.Base.compare;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Base);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Iter");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Iter depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Iter)=3D=3D"undefined"){=0A=
MochiKit.Iter=3D{};=0A=
}=0A=
MochiKit.Iter.NAME=3D"MochiKit.Iter";=0A=
MochiKit.Iter.VERSION=3D"1.3.1";=0A=
MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},registerIteratorFactory:function(name,_132,_133,_134){=0A=
MochiKit.Iter.iteratorRegistry.register(name,_132,_133,_134);=0A=
},iter:function(_135,_136){=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length=3D=3D2){=0A=
return self.takewhile(function(a){=0A=
return a!=3D_136;=0A=
},_135);=0A=
}=0A=
if(typeof (_135.next)=3D=3D"function"){=0A=
return _135;=0A=
}else{=0A=
if(typeof (_135.iter)=3D=3D"function"){=0A=
return _135.iter();=0A=
}=0A=
}=0A=
try{=0A=
return self.iteratorRegistry.match(_135);=0A=
}=0A=
catch(e){=0A=
var m=3DMochiKit.Base;=0A=
if(e=3D=3Dm.NotFound){=0A=
e=3Dnew TypeError(typeof (_135)+": "+m.repr(_135)+" is not iterable");=0A=
}=0A=
throw e;=0A=
}=0A=
},count:function(n){=0A=
if(!n){=0A=
n=3D0;=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
return {repr:function(){=0A=
return "count("+n+")";=0A=
},toString:m.forwardCall("repr"),next:m.counter(n)};=0A=
},cycle:function(p){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
var lst=3D[];=0A=
var _139=3Dself.iter(p);=0A=
return {repr:function(){=0A=
return "cycle(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
try{=0A=
var rval=3D_139.next();=0A=
lst.push(rval);=0A=
return rval;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
if(lst.length=3D=3D=3D0){=0A=
this.next=3Dfunction(){=0A=
throw self.StopIteration;=0A=
};=0A=
}else{=0A=
var i=3D-1;=0A=
this.next=3Dfunction(){=0A=
i=3D(i+1)%lst.length;=0A=
return lst[i];=0A=
};=0A=
}=0A=
return this.next();=0A=
}=0A=
}};=0A=
},repeat:function(elem,n){=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (n)=3D=3D"undefined"){=0A=
return {repr:function(){=0A=
return "repeat("+m.repr(elem)+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return elem;=0A=
}};=0A=
}=0A=
return {repr:function(){=0A=
return "repeat("+m.repr(elem)+", "+n+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
if(n<=3D0){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
n-=3D1;=0A=
return elem;=0A=
}};=0A=
},next:function(_141){=0A=
return _141.next();=0A=
},izip:function(p,q){=0A=
var m=3DMochiKit.Base;=0A=
var next=3DMochiKit.Iter.next;=0A=
var _144=3Dm.map(iter,arguments);=0A=
return {repr:function(){=0A=
return "izip(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return m.map(next,_144);=0A=
}};=0A=
},ifilter:function(pred,seq){=0A=
var m=3DMochiKit.Base;=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
if(pred=3D=3D=3Dnull){=0A=
pred=3Dm.operator.truth;=0A=
}=0A=
return {repr:function(){=0A=
return "ifilter(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(pred(rval)){=0A=
return rval;=0A=
}=0A=
}=0A=
return undefined;=0A=
}};=0A=
},ifilterfalse:function(pred,seq){=0A=
var m=3DMochiKit.Base;=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
if(pred=3D=3D=3Dnull){=0A=
pred=3Dm.operator.truth;=0A=
}=0A=
return {repr:function(){=0A=
return "ifilterfalse(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
return rval;=0A=
}=0A=
}=0A=
return undefined;=0A=
}};=0A=
},islice:function(seq){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
seq=3Dself.iter(seq);=0A=
var _147=3D0;=0A=
var stop=3D0;=0A=
var step=3D1;=0A=
var i=3D-1;=0A=
if(arguments.length=3D=3D2){=0A=
stop=3Darguments[1];=0A=
}else{=0A=
if(arguments.length=3D=3D3){=0A=
_147=3Darguments[1];=0A=
stop=3Darguments[2];=0A=
}else{=0A=
_147=3Darguments[1];=0A=
stop=3Darguments[2];=0A=
step=3Darguments[3];=0A=
}=0A=
}=0A=
return {repr:function(){=0A=
return "islice("+["...",_147,stop,step].join(", ")+")";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
var rval;=0A=
while(i<_147){=0A=
rval=3Dseq.next();=0A=
i++;=0A=
}=0A=
if(_147>=3Dstop){=0A=
throw self.StopIteration;=0A=
}=0A=
_147+=3Dstep;=0A=
return rval;=0A=
}};=0A=
},imap:function(fun,p,q){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
var _151=3Dm.map(self.iter,m.extend(null,arguments,1));=0A=
var map=3Dm.map;=0A=
var next=3Dself.next;=0A=
return {repr:function(){=0A=
return "imap(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return fun.apply(this,map(next,_151));=0A=
}};=0A=
},applymap:function(fun,seq,self){=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
var m=3DMochiKit.Base;=0A=
return {repr:function(){=0A=
return "applymap(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
return fun.apply(self,seq.next());=0A=
}};=0A=
},chain:function(p,q){=0A=
var self=3DMochiKit.Iter;=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length=3D=3D1){=0A=
return self.iter(arguments[0]);=0A=
}=0A=
var _153=3Dm.map(self.iter,arguments);=0A=
return {repr:function(){=0A=
return "chain(...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
while(_153.length>1){=0A=
try{=0A=
return _153[0].next();=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
_153.shift();=0A=
}=0A=
}=0A=
if(_153.length=3D=3D1){=0A=
var arg=3D_153.shift();=0A=
this.next=3Dm.bind("next",arg);=0A=
return this.next();=0A=
}=0A=
throw self.StopIteration;=0A=
}};=0A=
},takewhile:function(pred,seq){=0A=
var self=3DMochiKit.Iter;=0A=
seq=3Dself.iter(seq);=0A=
return {repr:function(){=0A=
return "takewhile(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
this.next=3Dfunction(){=0A=
throw self.StopIteration;=0A=
};=0A=
this.next();=0A=
}=0A=
return rval;=0A=
}};=0A=
},dropwhile:function(pred,seq){=0A=
seq=3DMochiKit.Iter.iter(seq);=0A=
var m=3DMochiKit.Base;=0A=
var bind=3Dm.bind;=0A=
return {"repr":function(){=0A=
return "dropwhile(...)";=0A=
},"toString":m.forwardCall("repr"),"next":function(){=0A=
while(true){=0A=
var rval=3Dseq.next();=0A=
if(!pred(rval)){=0A=
break;=0A=
}=0A=
}=0A=
this.next=3Dbind("next",seq);=0A=
return rval;=0A=
}};=0A=
},_tee:function(_155,sync,_157){=0A=
sync.pos[_155]=3D-1;=0A=
var m=3DMochiKit.Base;=0A=
var _158=3Dm.listMin;=0A=
return {repr:function(){=0A=
return "tee("+_155+", ...)";=0A=
},toString:m.forwardCall("repr"),next:function(){=0A=
var rval;=0A=
var i=3Dsync.pos[_155];=0A=
if(i=3D=3Dsync.max){=0A=
rval=3D_157.next();=0A=
sync.deque.push(rval);=0A=
sync.max+=3D1;=0A=
sync.pos[_155]+=3D1;=0A=
}else{=0A=
rval=3Dsync.deque[i-sync.min];=0A=
sync.pos[_155]+=3D1;=0A=
if(i=3D=3Dsync.min&&_158(sync.pos)!=3Dsync.min){=0A=
sync.min+=3D1;=0A=
sync.deque.shift();=0A=
}=0A=
}=0A=
return rval;=0A=
}};=0A=
},tee:function(_159,n){=0A=
var rval=3D[];=0A=
var sync=3D{"pos":[],"deque":[],"max":-1,"min":-1};=0A=
if(arguments.length=3D=3D1){=0A=
n=3D2;=0A=
}=0A=
var self=3DMochiKit.Iter;=0A=
_159=3Dself.iter(_159);=0A=
var _tee=3Dself._tee;=0A=
for(var i=3D0;i<n;i++){=0A=
rval.push(_tee(i,sync,_159));=0A=
}=0A=
return rval;=0A=
},list:function(_161){=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_161.slice)=3D=3D"function"){=0A=
return _161.slice();=0A=
}else{=0A=
if(m.isArrayLike(_161)){=0A=
return m.concat(_161);=0A=
}=0A=
}=0A=
var self=3DMochiKit.Iter;=0A=
_161=3Dself.iter(_161);=0A=
var rval=3D[];=0A=
try{=0A=
while(true){=0A=
rval.push(_161.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return rval;=0A=
}=0A=
return undefined;=0A=
},reduce:function(fn,_162,_163){=0A=
var i=3D0;=0A=
var x=3D_163;=0A=
var self=3DMochiKit.Iter;=0A=
_162=3Dself.iter(_162);=0A=
if(arguments.length<3){=0A=
try{=0A=
x=3D_162.next();=0A=
}=0A=
catch(e){=0A=
if(e=3D=3Dself.StopIteration){=0A=
e=3Dnew TypeError("reduce() of empty sequence with no initial value");=0A=
}=0A=
throw e;=0A=
}=0A=
i++;=0A=
}=0A=
try{=0A=
while(true){=0A=
x=3Dfn(x,_162.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
return x;=0A=
},range:function(){=0A=
var _165=3D0;=0A=
var stop=3D0;=0A=
var step=3D1;=0A=
if(arguments.length=3D=3D1){=0A=
stop=3Darguments[0];=0A=
}else{=0A=
if(arguments.length=3D=3D2){=0A=
_165=3Darguments[0];=0A=
stop=3Darguments[1];=0A=
}else{=0A=
if(arguments.length=3D=3D3){=0A=
_165=3Darguments[0];=0A=
stop=3Darguments[1];=0A=
step=3Darguments[2];=0A=
}else{=0A=
throw new TypeError("range() takes 1, 2, or 3 arguments!");=0A=
}=0A=
}=0A=
}=0A=
if(step=3D=3D=3D0){=0A=
throw new TypeError("range() step must not be 0");=0A=
}=0A=
return {next:function(){=0A=
if((step>0&&_165>=3Dstop)||(step<0&&_165<=3Dstop)){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
var rval=3D_165;=0A=
_165+=3Dstep;=0A=
return rval;=0A=
},repr:function(){=0A=
return "range("+[_165,stop,step].join(", ")+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
},sum:function(_166,_167){=0A=
var x=3D_167||0;=0A=
var self=3DMochiKit.Iter;=0A=
_166=3Dself.iter(_166);=0A=
try{=0A=
while(true){=0A=
x+=3D_166.next();=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
return x;=0A=
},exhaust:function(_168){=0A=
var self=3DMochiKit.Iter;=0A=
_168=3Dself.iter(_168);=0A=
try{=0A=
while(true){=0A=
_168.next();=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
},forEach:function(_169,func,self){=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length>2){=0A=
func=3Dm.bind(func,self);=0A=
}=0A=
if(m.isArrayLike(_169)){=0A=
try{=0A=
for(var i=3D0;i<_169.length;i++){=0A=
func(_169[i]);=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3DMochiKit.Iter.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
}else{=0A=
self=3DMochiKit.Iter;=0A=
self.exhaust(self.imap(func,_169));=0A=
}=0A=
},every:function(_171,func){=0A=
var self=3DMochiKit.Iter;=0A=
try{=0A=
self.ifilterfalse(func,_171).next();=0A=
return false;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return true;=0A=
}=0A=
},sorted:function(_172,cmp){=0A=
var rval=3DMochiKit.Iter.list(_172);=0A=
if(arguments.length=3D=3D1){=0A=
cmp=3DMochiKit.Base.compare;=0A=
}=0A=
rval.sort(cmp);=0A=
return rval;=0A=
},reversed:function(_173){=0A=
var rval=3DMochiKit.Iter.list(_173);=0A=
rval.reverse();=0A=
return rval;=0A=
},some:function(_174,func){=0A=
var self=3DMochiKit.Iter;=0A=
try{=0A=
self.ifilter(func,_174).next();=0A=
return true;=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
return false;=0A=
}=0A=
},iextend:function(lst,_175){=0A=
if(MochiKit.Base.isArrayLike(_175)){=0A=
for(var i=3D0;i<_175.length;i++){=0A=
lst.push(_175[i]);=0A=
}=0A=
}else{=0A=
var self=3DMochiKit.Iter;=0A=
_175=3Dself.iter(_175);=0A=
try{=0A=
while(true){=0A=
lst.push(_175.next());=0A=
}=0A=
}=0A=
catch(e){=0A=
if(e!=3Dself.StopIteration){=0A=
throw e;=0A=
}=0A=
}=0A=
}=0A=
return lst;=0A=
},groupby:function(_176,_177){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length<2){=0A=
_177=3Dm.operator.identity;=0A=
}=0A=
_176=3Dself.iter(_176);=0A=
var pk=3Dundefined;=0A=
var k=3Dundefined;=0A=
var v;=0A=
function fetch(){=0A=
v=3D_176.next();=0A=
k=3D_177(v);=0A=
}=0A=
function eat(){=0A=
var ret=3Dv;=0A=
v=3Dundefined;=0A=
return ret;=0A=
}=0A=
var _180=3Dtrue;=0A=
return {repr:function(){=0A=
return "groupby(...)";=0A=
},next:function(){=0A=
while(k=3D=3Dpk){=0A=
fetch();=0A=
if(_180){=0A=
_180=3Dfalse;=0A=
break;=0A=
}=0A=
}=0A=
pk=3Dk;=0A=
return [k,{next:function(){=0A=
if(v=3D=3Dundefined){=0A=
fetch();=0A=
}=0A=
if(k!=3Dpk){=0A=
throw self.StopIteration;=0A=
}=0A=
return eat();=0A=
}}];=0A=
}};=0A=
},groupby_as_array:function(_181,_182){=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Iter;=0A=
if(arguments.length<2){=0A=
_182=3Dm.operator.identity;=0A=
}=0A=
_181=3Dself.iter(_181);=0A=
var _183=3D[];=0A=
var _184=3Dtrue;=0A=
var _185;=0A=
while(true){=0A=
try{=0A=
var _186=3D_181.next();=0A=
var key=3D_182(_186);=0A=
}=0A=
catch(e){=0A=
if(e=3D=3Dself.StopIteration){=0A=
break;=0A=
}=0A=
throw e;=0A=
}=0A=
if(_184||key!=3D_185){=0A=
var _187=3D[];=0A=
_183.push([key,_187]);=0A=
}=0A=
_187.push(_186);=0A=
_184=3Dfalse;=0A=
_185=3Dkey;=0A=
}=0A=
return _183;=0A=
},arrayLikeIter:function(_188){=0A=
var i=3D0;=0A=
return {repr:function(){=0A=
return "arrayLikeIter(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
if(i>=3D_188.length){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
return _188[i++];=0A=
}};=0A=
},hasIterateNext:function(_189){=0A=
return (_189&&typeof (_189.iterateNext)=3D=3D"function");=0A=
},iterateNextIter:function(_190){=0A=
return {repr:function(){=0A=
return "iterateNextIter(...)";=0A=
},toString:MochiKit.Base.forwardCall("repr"),next:function(){=0A=
var rval=3D_190.iterateNext();=0A=
if(rval=3D=3D=3Dnull||rval=3D=3D=3Dundefined){=0A=
throw MochiKit.Iter.StopIteration;=0A=
}=0A=
return rval;=0A=
}};=0A=
}});=0A=
MochiKit.Iter.EXPORT_OK=3D["iteratorRegistry","arrayLikeIter","hasIterate=
Next","iterateNextIter",];=0A=
MochiKit.Iter.EXPORT=3D["StopIteration","registerIteratorFactory","iter",=
"count","cycle","repeat","next","izip","ifilter","ifilterfalse","islice",=
"imap","applymap","chain","takewhile","dropwhile","tee","list","reduce","=
range","sum","exhaust","forEach","every","sorted","reversed","some","iext=
end","groupby","groupby_as_array"];=0A=
MochiKit.Iter.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
this.StopIteration=3Dnew m.NamedError("StopIteration");=0A=
this.iteratorRegistry=3Dnew m.AdapterRegistry();=0A=
this.registerIteratorFactory("arrayLike",m.isArrayLike,this.arrayLikeIter=
);=0A=
this.registerIteratorFactory("iterateNext",this.hasIterateNext,this.itera=
teNextIter);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Iter.__new__();=0A=
if(!MochiKit.__compat__){=0A=
reduce=3DMochiKit.Iter.reduce;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Iter);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Logging");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Logging depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Logging)=3D=3D"undefined"){=0A=
MochiKit.Logging=3D{};=0A=
}=0A=
MochiKit.Logging.NAME=3D"MochiKit.Logging";=0A=
MochiKit.Logging.VERSION=3D"1.3.1";=0A=
MochiKit.Logging.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Logging.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Logging.EXPORT=3D["LogLevel","LogMessage","Logger","alertListene=
r","logger","log","logError","logDebug","logFatal","logWarning"];=0A=
MochiKit.Logging.EXPORT_OK=3D["logLevelAtLeast","isLogMessage","compareLo=
gMessage"];=0A=
MochiKit.Logging.LogMessage=3Dfunction(num,_192,info){=0A=
this.num=3Dnum;=0A=
this.level=3D_192;=0A=
this.info=3Dinfo;=0A=
this.timestamp=3Dnew Date();=0A=
};=0A=
MochiKit.Logging.LogMessage.prototype=3D{repr:function(){=0A=
var m=3DMochiKit.Base;=0A=
return =
"LogMessage("+m.map(m.repr,[this.num,this.level,this.info]).join(", =
")+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
MochiKit.Base.update(MochiKit.Logging,{logLevelAtLeast:function(_194){=0A=
var self=3DMochiKit.Logging;=0A=
if(typeof (_194)=3D=3D"string"){=0A=
_194=3Dself.LogLevel[_194];=0A=
}=0A=
return function(msg){=0A=
var _196=3Dmsg.level;=0A=
if(typeof (_196)=3D=3D"string"){=0A=
_196=3Dself.LogLevel[_196];=0A=
}=0A=
return _196>=3D_194;=0A=
};=0A=
},isLogMessage:function(){=0A=
var _197=3DMochiKit.Logging.LogMessage;=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(arguments[i] instanceof _197)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},compareLogMessage:function(a,b){=0A=
return MochiKit.Base.compare([a.level,a.info],[b.level,b.info]);=0A=
},alertListener:function(msg){=0A=
alert("num: "+msg.num+"\nlevel: "+msg.level+"\ninfo: "+msg.info.join(" =
"));=0A=
}});=0A=
MochiKit.Logging.Logger=3Dfunction(_198){=0A=
this.counter=3D0;=0A=
if(typeof (_198)=3D=3D"undefined"||_198=3D=3D=3Dnull){=0A=
_198=3D-1;=0A=
}=0A=
this.maxSize=3D_198;=0A=
this._messages=3D[];=0A=
this.listeners=3D{};=0A=
this.useNativeConsole=3Dfalse;=0A=
};=0A=
MochiKit.Logging.Logger.prototype=3D{clear:function(){=0A=
this._messages.splice(0,this._messages.length);=0A=
},logToConsole:function(msg){=0A=
if(typeof (window)!=3D"undefined"&&window.console&&window.console.log){=0A=
window.console.log(msg);=0A=
}else{=0A=
if(typeof (opera)!=3D"undefined"&&opera.postError){=0A=
opera.postError(msg);=0A=
}else{=0A=
if(typeof (printfire)=3D=3D"function"){=0A=
printfire(msg);=0A=
}=0A=
}=0A=
}=0A=
},dispatchListeners:function(msg){=0A=
for(var k in this.listeners){=0A=
var pair=3Dthis.listeners[k];=0A=
if(pair.ident!=3Dk||(pair[0]&&!pair[0](msg))){=0A=
continue;=0A=
}=0A=
pair[1](msg);=0A=
}=0A=
},addListener:function(_199,_200,_201){=0A=
if(typeof (_200)=3D=3D"string"){=0A=
_200=3DMochiKit.Logging.logLevelAtLeast(_200);=0A=
}=0A=
var _202=3D[_200,_201];=0A=
_202.ident=3D_199;=0A=
this.listeners[_199]=3D_202;=0A=
},removeListener:function(_203){=0A=
delete this.listeners[_203];=0A=
},baseLog:function(_204,_205){=0A=
var msg=3Dnew =
MochiKit.Logging.LogMessage(this.counter,_204,MochiKit.Base.extend(null,a=
rguments,1));=0A=
this._messages.push(msg);=0A=
this.dispatchListeners(msg);=0A=
if(this.useNativeConsole){=0A=
this.logToConsole(msg.level+": "+msg.info.join(" "));=0A=
}=0A=
this.counter+=3D1;=0A=
while(this.maxSize>=3D0&&this._messages.length>this.maxSize){=0A=
this._messages.shift();=0A=
}=0A=
},getMessages:function(_206){=0A=
var _207=3D0;=0A=
if(!(typeof (_206)=3D=3D"undefined"||_206=3D=3D=3Dnull)){=0A=
_207=3DMath.max(0,this._messages.length-_206);=0A=
}=0A=
return this._messages.slice(_207);=0A=
},getMessageText:function(_208){=0A=
if(typeof (_208)=3D=3D"undefined"||_208=3D=3D=3Dnull){=0A=
_208=3D30;=0A=
}=0A=
var _209=3Dthis.getMessages(_208);=0A=
if(_209.length){=0A=
var lst=3Dmap(function(m){=0A=
return "\n  ["+m.num+"] "+m.level+": "+m.info.join(" ");=0A=
},_209);=0A=
lst.unshift("LAST "+_209.length+" MESSAGES:");=0A=
return lst.join("");=0A=
}=0A=
return "";=0A=
},debuggingBookmarklet:function(_210){=0A=
if(typeof (MochiKit.LoggingPane)=3D=3D"undefined"){=0A=
alert(this.getMessageText());=0A=
}else{=0A=
MochiKit.LoggingPane.createLoggingPane(_210||false);=0A=
}=0A=
}};=0A=
MochiKit.Logging.__new__=3Dfunction(){=0A=
this.LogLevel=3D{ERROR:40,FATAL:50,WARNING:30,INFO:20,DEBUG:10};=0A=
var m=3DMochiKit.Base;=0A=
m.registerComparator("LogMessage",this.isLogMessage,this.compareLogMessag=
e);=0A=
var _211=3Dm.partial;=0A=
var _212=3Dthis.Logger;=0A=
var _213=3D_212.prototype.baseLog;=0A=
m.update(this.Logger.prototype,{debug:_211(_213,"DEBUG"),log:_211(_213,"I=
NFO"),error:_211(_213,"ERROR"),fatal:_211(_213,"FATAL"),warning:_211(_213=
,"WARNING")});=0A=
var self=3Dthis;=0A=
var _214=3Dfunction(name){=0A=
return function(){=0A=
self.logger[name].apply(self.logger,arguments);=0A=
};=0A=
};=0A=
this.log=3D_214("log");=0A=
this.logError=3D_214("error");=0A=
this.logDebug=3D_214("debug");=0A=
this.logFatal=3D_214("fatal");=0A=
this.logWarning=3D_214("warning");=0A=
this.logger=3Dnew _212();=0A=
this.logger.useNativeConsole=3Dtrue;=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
if(typeof (printfire)=3D=3D"undefined"&&typeof =
(document)!=3D"undefined"&&document.createEvent&&typeof =
(dispatchEvent)!=3D"undefined"){=0A=
printfire=3Dfunction(){=0A=
printfire.args=3Darguments;=0A=
var ev=3Ddocument.createEvent("Events");=0A=
ev.initEvent("printfire",false,true);=0A=
dispatchEvent(ev);=0A=
};=0A=
}=0A=
MochiKit.Logging.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Logging);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.DateTime");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.DateTime)=3D=3D"undefined"){=0A=
MochiKit.DateTime=3D{};=0A=
}=0A=
MochiKit.DateTime.NAME=3D"MochiKit.DateTime";=0A=
MochiKit.DateTime.VERSION=3D"1.3.1";=0A=
MochiKit.DateTime.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.DateTime.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.DateTime.isoDate=3Dfunction(str){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"||str.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var iso=3Dstr.split("-");=0A=
if(iso.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
return new Date(iso[0],iso[1]-1,iso[2]);=0A=
};=0A=
MochiKit.DateTime._isoRegexp=3D/(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T =
](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::=
(\d{1,2}))?)?)?)?)?/;=0A=
MochiKit.DateTime.isoTimestamp=3Dfunction(str){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"||str.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var res=3Dstr.match(MochiKit.DateTime._isoRegexp);=0A=
if(typeof (res)=3D=3D"undefined"||res=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var year,month,day,hour,min,sec,msec;=0A=
year=3DparseInt(res[1],10);=0A=
if(typeof (res[2])=3D=3D"undefined"||res[2]=3D=3D=3D""){=0A=
return new Date(year);=0A=
}=0A=
month=3DparseInt(res[2],10)-1;=0A=
day=3DparseInt(res[3],10);=0A=
if(typeof (res[4])=3D=3D"undefined"||res[4]=3D=3D=3D""){=0A=
return new Date(year,month,day);=0A=
}=0A=
hour=3DparseInt(res[4],10);=0A=
min=3DparseInt(res[5],10);=0A=
sec=3D(typeof =
(res[6])!=3D"undefined"&&res[6]!=3D=3D"")?parseInt(res[6],10):0;=0A=
if(typeof (res[7])!=3D"undefined"&&res[7]!=3D=3D""){=0A=
msec=3DMath.round(1000*parseFloat("0."+res[7]));=0A=
}else{=0A=
msec=3D0;=0A=
}=0A=
if((typeof (res[8])=3D=3D"undefined"||res[8]=3D=3D=3D"")&&(typeof =
(res[9])=3D=3D"undefined"||res[9]=3D=3D=3D"")){=0A=
return new Date(year,month,day,hour,min,sec,msec);=0A=
}=0A=
var ofs;=0A=
if(typeof (res[9])!=3D"undefined"&&res[9]!=3D=3D""){=0A=
ofs=3DparseInt(res[10],10)*3600000;=0A=
if(typeof (res[11])!=3D"undefined"&&res[11]!=3D=3D""){=0A=
ofs+=3DparseInt(res[11],10)*60000;=0A=
}=0A=
if(res[9]=3D=3D"-"){=0A=
ofs=3D-ofs;=0A=
}=0A=
}else{=0A=
ofs=3D0;=0A=
}=0A=
return new Date(Date.UTC(year,month,day,hour,min,sec,msec)-ofs);=0A=
};=0A=
MochiKit.DateTime.toISOTime=3Dfunction(date,_221){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var hh=3Ddate.getHours();=0A=
var mm=3Ddate.getMinutes();=0A=
var ss=3Ddate.getSeconds();=0A=
var =
lst=3D[((_221&&(hh<10))?"0"+hh:hh),((mm<10)?"0"+mm:mm),((ss<10)?"0"+ss:ss=
)];=0A=
return lst.join(":");=0A=
};=0A=
MochiKit.DateTime.toISOTimestamp=3Dfunction(date,_225){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var sep=3D_225?"T":" ";=0A=
var foot=3D_225?"Z":"";=0A=
if(_225){=0A=
date=3Dnew Date(date.getTime()+(date.getTimezoneOffset()*60000));=0A=
}=0A=
return =
MochiKit.DateTime.toISODate(date)+sep+MochiKit.DateTime.toISOTime(date,_2=
25)+foot;=0A=
};=0A=
MochiKit.DateTime.toISODate=3Dfunction(date){=0A=
if(typeof (date)=3D=3D"undefined"||date=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var _228=3DMochiKit.DateTime._padTwo;=0A=
return =
[date.getFullYear(),_228(date.getMonth()+1),_228(date.getDate())].join("-=
");=0A=
};=0A=
MochiKit.DateTime.americanDate=3Dfunction(d){=0A=
d=3Dd+"";=0A=
if(typeof (d)!=3D"string"||d.length=3D=3D=3D0){=0A=
return null;=0A=
}=0A=
var a=3Dd.split("/");=0A=
return new Date(a[2],a[0]-1,a[1]);=0A=
};=0A=
MochiKit.DateTime._padTwo=3Dfunction(n){=0A=
return (n>9)?n:"0"+n;=0A=
};=0A=
MochiKit.DateTime.toPaddedAmericanDate=3Dfunction(d){=0A=
if(typeof (d)=3D=3D"undefined"||d=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
var _230=3DMochiKit.DateTime._padTwo;=0A=
return =
[_230(d.getMonth()+1),_230(d.getDate()),d.getFullYear()].join("/");=0A=
};=0A=
MochiKit.DateTime.toAmericanDate=3Dfunction(d){=0A=
if(typeof (d)=3D=3D"undefined"||d=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
return [d.getMonth()+1,d.getDate(),d.getFullYear()].join("/");=0A=
};=0A=
MochiKit.DateTime.EXPORT=3D["isoDate","isoTimestamp","toISOTime","toISOTi=
mestamp","toISODate","americanDate","toPaddedAmericanDate","toAmericanDat=
e"];=0A=
MochiKit.DateTime.EXPORT_OK=3D[];=0A=
MochiKit.DateTime.EXPORT_TAGS=3D{":common":MochiKit.DateTime.EXPORT,":all=
":MochiKit.DateTime.EXPORT};=0A=
MochiKit.DateTime.__new__=3Dfunction(){=0A=
var base=3Dthis.NAME+".";=0A=
for(var k in this){=0A=
var o=3Dthis[k];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+k;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
};=0A=
MochiKit.DateTime.__new__();=0A=
if(typeof (MochiKit.Base)!=3D"undefined"){=0A=
MochiKit.Base._exportSymbols(this,MochiKit.DateTime);=0A=
}else{=0A=
(function(_231,_232){=0A=
if((typeof (JSAN)=3D=3D"undefined"&&typeof =
(dojo)=3D=3D"undefined")||(typeof =
(MochiKit.__compat__)=3D=3D"boolean"&&MochiKit.__compat__)){=0A=
var all=3D_232.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_231[all[i]]=3D_232[all[i]];=0A=
}=0A=
}=0A=
})(this,MochiKit.DateTime);=0A=
}=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Format");=0A=
}=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.Format)=3D=3D"undefined"){=0A=
MochiKit.Format=3D{};=0A=
}=0A=
MochiKit.Format.NAME=3D"MochiKit.Format";=0A=
MochiKit.Format.VERSION=3D"1.3.1";=0A=
MochiKit.Format.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Format.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Format._numberFormatter=3Dfunction(_233,_234,_235,_236,_237,_238=
,_239,_240,_241){=0A=
return function(num){=0A=
num=3DparseFloat(num);=0A=
if(typeof (num)=3D=3D"undefined"||num=3D=3D=3Dnull||isNaN(num)){=0A=
return _233;=0A=
}=0A=
var _242=3D_234;=0A=
var _243=3D_235;=0A=
if(num<0){=0A=
num=3D-num;=0A=
}else{=0A=
_242=3D_242.replace(/-/,"");=0A=
}=0A=
var me=3Darguments.callee;=0A=
var fmt=3DMochiKit.Format.formatLocale(_236);=0A=
if(_237){=0A=
num=3Dnum*100;=0A=
_243=3Dfmt.percent+_243;=0A=
}=0A=
num=3DMochiKit.Format.roundToFixed(num,_238);=0A=
var _245=3Dnum.split(/\./);=0A=
var _246=3D_245[0];=0A=
var frac=3D(_245.length=3D=3D1)?"":_245[1];=0A=
var res=3D"";=0A=
while(_246.length<_239){=0A=
_246=3D"0"+_246;=0A=
}=0A=
if(_240){=0A=
while(_246.length>_240){=0A=
var i=3D_246.length-_240;=0A=
res=3Dfmt.separator+_246.substring(i,_246.length)+res;=0A=
_246=3D_246.substring(0,i);=0A=
}=0A=
}=0A=
res=3D_246+res;=0A=
if(_238>0){=0A=
while(frac.length<_241){=0A=
frac=3Dfrac+"0";=0A=
}=0A=
res=3Dres+fmt.decimal+frac;=0A=
}=0A=
return _242+res+_243;=0A=
};=0A=
};=0A=
MochiKit.Format.numberFormatter=3Dfunction(_248,_249,_250){=0A=
if(typeof (_249)=3D=3D"undefined"){=0A=
_249=3D"";=0A=
}=0A=
var _251=3D_248.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);=0A=
if(!_251){=0A=
throw TypeError("Invalid pattern");=0A=
}=0A=
var _252=3D_248.substr(0,_251.index);=0A=
var _253=3D_248.substr(_251.index+_251[0].length);=0A=
if(_252.search(/-/)=3D=3D-1){=0A=
_252=3D_252+"-";=0A=
}=0A=
var _254=3D_251[1];=0A=
var frac=3D(typeof (_251[2])=3D=3D"string"&&_251[2]!=3D"")?_251[2]:"";=0A=
var _255=3D(typeof (_251[3])=3D=3D"string"&&_251[3]!=3D"");=0A=
var tmp=3D_254.split(/,/);=0A=
var _257;=0A=
if(typeof (_250)=3D=3D"undefined"){=0A=
_250=3D"default";=0A=
}=0A=
if(tmp.length=3D=3D1){=0A=
_257=3Dnull;=0A=
}else{=0A=
_257=3Dtmp[1].length;=0A=
}=0A=
var _258=3D_254.length-_254.replace(/0/g,"").length;=0A=
var _259=3Dfrac.length-frac.replace(/0/g,"").length;=0A=
var _260=3Dfrac.length;=0A=
var =
rval=3DMochiKit.Format._numberFormatter(_249,_252,_253,_250,_255,_260,_25=
8,_257,_259);=0A=
var m=3DMochiKit.Base;=0A=
if(m){=0A=
var fn=3Darguments.callee;=0A=
var args=3Dm.concat(arguments);=0A=
rval.repr=3Dfunction(){=0A=
return [self.NAME,"(",map(m.repr,args).join(", "),")"].join("");=0A=
};=0A=
}=0A=
return rval;=0A=
};=0A=
MochiKit.Format.formatLocale=3Dfunction(_262){=0A=
if(typeof (_262)=3D=3D"undefined"||_262=3D=3D=3Dnull){=0A=
_262=3D"default";=0A=
}=0A=
if(typeof (_262)=3D=3D"string"){=0A=
var rval=3DMochiKit.Format.LOCALE[_262];=0A=
if(typeof (rval)=3D=3D"string"){=0A=
rval=3Darguments.callee(rval);=0A=
MochiKit.Format.LOCALE[_262]=3Drval;=0A=
}=0A=
return rval;=0A=
}else{=0A=
return _262;=0A=
}=0A=
};=0A=
MochiKit.Format.twoDigitAverage=3Dfunction(_263,_264){=0A=
if(_264){=0A=
var res=3D_263/_264;=0A=
if(!isNaN(res)){=0A=
return MochiKit.Format.twoDigitFloat(_263/_264);=0A=
}=0A=
}=0A=
return "0";=0A=
};=0A=
MochiKit.Format.twoDigitFloat=3Dfunction(_265){=0A=
var sign=3D(_265<0?"-":"");=0A=
var s=3DMath.floor(Math.abs(_265)*100).toString();=0A=
if(s=3D=3D"0"){=0A=
return s;=0A=
}=0A=
if(s.length<3){=0A=
while(s.charAt(s.length-1)=3D=3D"0"){=0A=
s=3Ds.substring(0,s.length-1);=0A=
}=0A=
return sign+"0."+s;=0A=
}=0A=
var head=3Dsign+s.substring(0,s.length-2);=0A=
var tail=3Ds.substring(s.length-2,s.length);=0A=
if(tail=3D=3D"00"){=0A=
return head;=0A=
}else{=0A=
if(tail.charAt(1)=3D=3D"0"){=0A=
return head+"."+tail.charAt(0);=0A=
}else{=0A=
return head+"."+tail;=0A=
}=0A=
}=0A=
};=0A=
MochiKit.Format.lstrip=3Dfunction(str,_270){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"){=0A=
return null;=0A=
}=0A=
if(!_270){=0A=
return str.replace(/^\s+/,"");=0A=
}else{=0A=
return str.replace(new RegExp("^["+_270+"]+"),"");=0A=
}=0A=
};=0A=
MochiKit.Format.rstrip=3Dfunction(str,_271){=0A=
str=3Dstr+"";=0A=
if(typeof (str)!=3D"string"){=0A=
return null;=0A=
}=0A=
if(!_271){=0A=
return str.replace(/\s+$/,"");=0A=
}else{=0A=
return str.replace(new RegExp("["+_271+"]+$"),"");=0A=
}=0A=
};=0A=
MochiKit.Format.strip=3Dfunction(str,_272){=0A=
var self=3DMochiKit.Format;=0A=
return self.rstrip(self.lstrip(str,_272),_272);=0A=
};=0A=
MochiKit.Format.truncToFixed=3Dfunction(_273,_274){=0A=
_273=3DMath.floor(_273*Math.pow(10,_274));=0A=
var res=3D(_273*Math.pow(10,-_274)).toFixed(_274);=0A=
if(res.charAt(0)=3D=3D"."){=0A=
res=3D"0"+res;=0A=
}=0A=
return res;=0A=
};=0A=
MochiKit.Format.roundToFixed=3Dfunction(_275,_276){=0A=
return MochiKit.Format.truncToFixed(_275+0.5*Math.pow(10,-_276),_276);=0A=
};=0A=
MochiKit.Format.percentFormat=3Dfunction(_277){=0A=
return MochiKit.Format.twoDigitFloat(100*_277)+"%";=0A=
};=0A=
MochiKit.Format.EXPORT=3D["truncToFixed","roundToFixed","numberFormatter"=
,"formatLocale","twoDigitAverage","twoDigitFloat","percentFormat","lstrip=
","rstrip","strip"];=0A=
MochiKit.Format.LOCALE=3D{en_US:{separator:",",decimal:".",percent:"%"},d=
e_DE:{separator:".",decimal:",",percent:"%"},fr_FR:{separator:" =
",decimal:",",percent:"%"},"default":"en_US"};=0A=
MochiKit.Format.EXPORT_OK=3D[];=0A=
MochiKit.Format.EXPORT_TAGS=3D{":all":MochiKit.Format.EXPORT,":common":Mo=
chiKit.Format.EXPORT};=0A=
MochiKit.Format.__new__=3Dfunction(){=0A=
var base=3Dthis.NAME+".";=0A=
var k,v,o;=0A=
for(k in this.LOCALE){=0A=
o=3Dthis.LOCALE[k];=0A=
if(typeof (o)=3D=3D"object"){=0A=
o.repr=3Dfunction(){=0A=
return this.NAME;=0A=
};=0A=
o.NAME=3Dbase+"LOCALE."+k;=0A=
}=0A=
}=0A=
for(k in this){=0A=
o=3Dthis[k];=0A=
if(typeof (o)=3D=3D"function"&&typeof (o.NAME)=3D=3D"undefined"){=0A=
try{=0A=
o.NAME=3Dbase+k;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
};=0A=
MochiKit.Format.__new__();=0A=
if(typeof (MochiKit.Base)!=3D"undefined"){=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Format);=0A=
}else{=0A=
(function(_278,_279){=0A=
if((typeof (JSAN)=3D=3D"undefined"&&typeof =
(dojo)=3D=3D"undefined")||(typeof =
(MochiKit.__compat__)=3D=3D"boolean"&&MochiKit.__compat__)){=0A=
var all=3D_279.EXPORT_TAGS[":all"];=0A=
for(var i=3D0;i<all.length;i++){=0A=
_278[all[i]]=3D_279[all[i]];=0A=
}=0A=
}=0A=
})(this,MochiKit.Format);=0A=
}=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Async");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Async depends on MochiKit.Base!";=0A=
}=0A=
if(typeof (MochiKit.Async)=3D=3D"undefined"){=0A=
MochiKit.Async=3D{};=0A=
}=0A=
MochiKit.Async.NAME=3D"MochiKit.Async";=0A=
MochiKit.Async.VERSION=3D"1.3.1";=0A=
MochiKit.Async.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Async.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Async.Deferred=3Dfunction(_280){=0A=
this.chain=3D[];=0A=
this.id=3Dthis._nextId();=0A=
this.fired=3D-1;=0A=
this.paused=3D0;=0A=
this.results=3D[null,null];=0A=
this.canceller=3D_280;=0A=
this.silentlyCancelled=3Dfalse;=0A=
this.chained=3Dfalse;=0A=
};=0A=
MochiKit.Async.Deferred.prototype=3D{repr:function(){=0A=
var _281;=0A=
if(this.fired=3D=3D-1){=0A=
_281=3D"unfired";=0A=
}else{=0A=
if(this.fired=3D=3D=3D0){=0A=
_281=3D"success";=0A=
}else{=0A=
_281=3D"error";=0A=
}=0A=
}=0A=
return "Deferred("+this.id+", "+_281+")";=0A=
},toString:MochiKit.Base.forwardCall("repr"),_nextId:MochiKit.Base.counte=
r(),cancel:function(){=0A=
var self=3DMochiKit.Async;=0A=
if(this.fired=3D=3D-1){=0A=
if(this.canceller){=0A=
this.canceller(this);=0A=
}else{=0A=
this.silentlyCancelled=3Dtrue;=0A=
}=0A=
if(this.fired=3D=3D-1){=0A=
this.errback(new self.CancelledError(this));=0A=
}=0A=
}else{=0A=
if((this.fired=3D=3D=3D0)&&(this.results[0] instanceof self.Deferred)){=0A=
this.results[0].cancel();=0A=
}=0A=
}=0A=
},_pause:function(){=0A=
this.paused++;=0A=
},_unpause:function(){=0A=
this.paused--;=0A=
if((this.paused=3D=3D=3D0)&&(this.fired>=3D0)){=0A=
this._fire();=0A=
}=0A=
},_continue:function(res){=0A=
this._resback(res);=0A=
this._unpause();=0A=
},_resback:function(res){=0A=
this.fired=3D((res instanceof Error)?1:0);=0A=
this.results[this.fired]=3Dres;=0A=
this._fire();=0A=
},_check:function(){=0A=
if(this.fired!=3D-1){=0A=
if(!this.silentlyCancelled){=0A=
throw new MochiKit.Async.AlreadyCalledError(this);=0A=
}=0A=
this.silentlyCancelled=3Dfalse;=0A=
return;=0A=
}=0A=
},callback:function(res){=0A=
this._check();=0A=
if(res instanceof MochiKit.Async.Deferred){=0A=
throw new Error("Deferred instances can only be chained if they are the =
result of a callback");=0A=
}=0A=
this._resback(res);=0A=
},errback:function(res){=0A=
this._check();=0A=
var self=3DMochiKit.Async;=0A=
if(res instanceof self.Deferred){=0A=
throw new Error("Deferred instances can only be chained if they are the =
result of a callback");=0A=
}=0A=
if(!(res instanceof Error)){=0A=
res=3Dnew self.GenericError(res);=0A=
}=0A=
this._resback(res);=0A=
},addBoth:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(fn,fn);=0A=
},addCallback:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(fn,null);=0A=
},addErrback:function(fn){=0A=
if(arguments.length>1){=0A=
fn=3DMochiKit.Base.partial.apply(null,arguments);=0A=
}=0A=
return this.addCallbacks(null,fn);=0A=
},addCallbacks:function(cb,eb){=0A=
if(this.chained){=0A=
throw new Error("Chained Deferreds can not be re-used");=0A=
}=0A=
this.chain.push([cb,eb]);=0A=
if(this.fired>=3D0){=0A=
this._fire();=0A=
}=0A=
return this;=0A=
},_fire:function(){=0A=
var _284=3Dthis.chain;=0A=
var _285=3Dthis.fired;=0A=
var res=3Dthis.results[_285];=0A=
var self=3Dthis;=0A=
var cb=3Dnull;=0A=
while(_284.length>0&&this.paused=3D=3D=3D0){=0A=
var pair=3D_284.shift();=0A=
var f=3Dpair[_285];=0A=
if(f=3D=3D=3Dnull){=0A=
continue;=0A=
}=0A=
try{=0A=
res=3Df(res);=0A=
_285=3D((res instanceof Error)?1:0);=0A=
if(res instanceof MochiKit.Async.Deferred){=0A=
cb=3Dfunction(res){=0A=
self._continue(res);=0A=
};=0A=
this._pause();=0A=
}=0A=
}=0A=
catch(err){=0A=
_285=3D1;=0A=
if(!(err instanceof Error)){=0A=
err=3Dnew MochiKit.Async.GenericError(err);=0A=
}=0A=
res=3Derr;=0A=
}=0A=
}=0A=
this.fired=3D_285;=0A=
this.results[_285]=3Dres;=0A=
if(cb&&this.paused){=0A=
res.addBoth(cb);=0A=
res.chained=3Dtrue;=0A=
}=0A=
}};=0A=
MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(){=0A=
return eval("("+arguments[0].responseText+")");=0A=
},succeed:function(_287){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
d.callback.apply(d,arguments);=0A=
return d;=0A=
},fail:function(_288){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
d.errback.apply(d,arguments);=0A=
return d;=0A=
},getXMLHttpRequest:function(){=0A=
var self=3Darguments.callee;=0A=
if(!self.XMLHttpRequest){=0A=
var _289=3D[function(){=0A=
return new XMLHttpRequest();=0A=
},function(){=0A=
return new ActiveXObject("Msxml2.XMLHTTP");=0A=
},function(){=0A=
return new ActiveXObject("Microsoft.XMLHTTP");=0A=
},function(){=0A=
return new ActiveXObject("Msxml2.XMLHTTP.4.0");=0A=
},function(){=0A=
throw new MochiKit.Async.BrowserComplianceError("Browser does not =
support XMLHttpRequest");=0A=
}];=0A=
for(var i=3D0;i<_289.length;i++){=0A=
var func=3D_289[i];=0A=
try{=0A=
self.XMLHttpRequest=3Dfunc;=0A=
return func();=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
}=0A=
return self.XMLHttpRequest();=0A=
},_nothing:function(){=0A=
},_xhr_onreadystatechange:function(d){=0A=
if(this.readyState=3D=3D4){=0A=
try{=0A=
this.onreadystatechange=3Dnull;=0A=
}=0A=
catch(e){=0A=
try{=0A=
this.onreadystatechange=3DMochiKit.Async._nothing;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
var _290=3Dnull;=0A=
try{=0A=
_290=3Dthis.status;=0A=
if(!_290&&MochiKit.Base.isNotEmpty(this.responseText)){=0A=
_290=3D304;=0A=
}=0A=
}=0A=
catch(e){=0A=
}=0A=
if(_290=3D=3D200||_290=3D=3D304){=0A=
d.callback(this);=0A=
}else{=0A=
var err=3Dnew MochiKit.Async.XMLHttpRequestError(this,"Request failed");=0A=
if(err.number){=0A=
d.errback(err);=0A=
}else{=0A=
d.errback(err);=0A=
}=0A=
}=0A=
}=0A=
},_xhr_canceller:function(req){=0A=
try{=0A=
req.onreadystatechange=3Dnull;=0A=
}=0A=
catch(e){=0A=
try{=0A=
req.onreadystatechange=3DMochiKit.Async._nothing;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
req.abort();=0A=
},sendXMLHttpRequest:function(req,_293){=0A=
if(typeof (_293)=3D=3D"undefined"||_293=3D=3D=3Dnull){=0A=
_293=3D"";=0A=
}=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.Async;=0A=
var d=3Dnew self.Deferred(m.partial(self._xhr_canceller,req));=0A=
try{=0A=
req.onreadystatechange=3Dm.bind(self._xhr_onreadystatechange,req,d);=0A=
req.send(_293);=0A=
}=0A=
catch(e){=0A=
try{=0A=
req.onreadystatechange=3Dnull;=0A=
}=0A=
catch(ignore){=0A=
}=0A=
d.errback(e);=0A=
}=0A=
return d;=0A=
},doSimpleXMLHttpRequest:function(url){=0A=
var self=3DMochiKit.Async;=0A=
var req=3Dself.getXMLHttpRequest();=0A=
if(arguments.length>1){=0A=
var m=3DMochiKit.Base;=0A=
var qs=3Dm.queryString.apply(null,m.extend(null,arguments,1));=0A=
if(qs){=0A=
url+=3D"?"+qs;=0A=
}=0A=
}=0A=
req.open("GET",url,true);=0A=
return self.sendXMLHttpRequest(req);=0A=
},loadJSONDoc:function(url){=0A=
var self=3DMochiKit.Async;=0A=
var d=3Dself.doSimpleXMLHttpRequest.apply(self,arguments);=0A=
d=3Dd.addCallback(self.evalJSONRequest);=0A=
return d;=0A=
},wait:function(_296,_297){=0A=
var d=3Dnew MochiKit.Async.Deferred();=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_297)!=3D"undefined"){=0A=
d.addCallback(function(){=0A=
return _297;=0A=
});=0A=
}=0A=
var _298=3DsetTimeout(m.bind("callback",d),Math.floor(_296*1000));=0A=
d.canceller=3Dfunction(){=0A=
try{=0A=
clearTimeout(_298);=0A=
}=0A=
catch(e){=0A=
}=0A=
};=0A=
return d;=0A=
},callLater:function(_299,func){=0A=
var m=3DMochiKit.Base;=0A=
var _300=3Dm.partial.apply(m,m.extend(null,arguments,1));=0A=
return MochiKit.Async.wait(_299).addCallback(function(res){=0A=
return _300();=0A=
});=0A=
}});=0A=
MochiKit.Async.DeferredLock=3Dfunction(){=0A=
this.waiting=3D[];=0A=
this.locked=3Dfalse;=0A=
this.id=3Dthis._nextId();=0A=
};=0A=
MochiKit.Async.DeferredLock.prototype=3D{__class__:MochiKit.Async.Deferre=
dLock,acquire:function(){=0A=
d=3Dnew MochiKit.Async.Deferred();=0A=
if(this.locked){=0A=
this.waiting.push(d);=0A=
}else{=0A=
this.locked=3Dtrue;=0A=
d.callback(this);=0A=
}=0A=
return d;=0A=
},release:function(){=0A=
if(!this.locked){=0A=
throw TypeError("Tried to release an unlocked DeferredLock");=0A=
}=0A=
this.locked=3Dfalse;=0A=
if(this.waiting.length>0){=0A=
this.locked=3Dtrue;=0A=
this.waiting.shift().callback(this);=0A=
}=0A=
},_nextId:MochiKit.Base.counter(),repr:function(){=0A=
var _301;=0A=
if(this.locked){=0A=
_301=3D"locked, "+this.waiting.length+" waiting";=0A=
}else{=0A=
_301=3D"unlocked";=0A=
}=0A=
return "DeferredLock("+this.id+", "+_301+")";=0A=
},toString:MochiKit.Base.forwardCall("repr")};=0A=
MochiKit.Async.DeferredList=3Dfunction(list,_303,_304,_305,_306){=0A=
this.list=3Dlist;=0A=
this.resultList=3Dnew Array(this.list.length);=0A=
this.chain=3D[];=0A=
this.id=3Dthis._nextId();=0A=
this.fired=3D-1;=0A=
this.paused=3D0;=0A=
this.results=3D[null,null];=0A=
this.canceller=3D_306;=0A=
this.silentlyCancelled=3Dfalse;=0A=
if(this.list.length=3D=3D=3D0&&!_303){=0A=
this.callback(this.resultList);=0A=
}=0A=
this.finishedCount=3D0;=0A=
this.fireOnOneCallback=3D_303;=0A=
this.fireOnOneErrback=3D_304;=0A=
this.consumeErrors=3D_305;=0A=
var _307=3D0;=0A=
MochiKit.Base.map(MochiKit.Base.bind(function(d){=0A=
d.addCallback(MochiKit.Base.bind(this._cbDeferred,this),_307,true);=0A=
d.addErrback(MochiKit.Base.bind(this._cbDeferred,this),_307,false);=0A=
_307+=3D1;=0A=
},this),this.list);=0A=
};=0A=
MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,MochiKit.Async=
.Deferred.prototype);=0A=
MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,{_cbDeferred:f=
unction(_308,_309,_310){=0A=
this.resultList[_308]=3D[_309,_310];=0A=
this.finishedCount+=3D1;=0A=
if(this.fired!=3D=3D0){=0A=
if(_309&&this.fireOnOneCallback){=0A=
this.callback([_308,_310]);=0A=
}else{=0A=
if(!_309&&this.fireOnOneErrback){=0A=
this.errback(_310);=0A=
}else{=0A=
if(this.finishedCount=3D=3Dthis.list.length){=0A=
this.callback(this.resultList);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
if(!_309&&this.consumeErrors){=0A=
_310=3Dnull;=0A=
}=0A=
return _310;=0A=
}});=0A=
MochiKit.Async.gatherResults=3Dfunction(_311){=0A=
var d=3Dnew MochiKit.Async.DeferredList(_311,false,true,false);=0A=
d.addCallback(function(_312){=0A=
var ret=3D[];=0A=
for(var i=3D0;i<_312.length;i++){=0A=
ret.push(_312[i][1]);=0A=
}=0A=
return ret;=0A=
});=0A=
return d;=0A=
};=0A=
MochiKit.Async.maybeDeferred=3Dfunction(func){=0A=
var self=3DMochiKit.Async;=0A=
var _313;=0A=
try{=0A=
var r=3Dfunc.apply(null,MochiKit.Base.extend([],arguments,1));=0A=
if(r instanceof self.Deferred){=0A=
_313=3Dr;=0A=
}else{=0A=
if(r instanceof Error){=0A=
_313=3Dself.fail(r);=0A=
}else{=0A=
_313=3Dself.succeed(r);=0A=
}=0A=
}=0A=
}=0A=
catch(e){=0A=
_313=3Dself.fail(e);=0A=
}=0A=
return _313;=0A=
};=0A=
MochiKit.Async.EXPORT=3D["AlreadyCalledError","CancelledError","BrowserCo=
mplianceError","GenericError","XMLHttpRequestError","Deferred","succeed",=
"fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait",=
"callLater","sendXMLHttpRequest","DeferredLock","DeferredList","gatherRes=
ults","maybeDeferred"];=0A=
MochiKit.Async.EXPORT_OK=3D["evalJSONRequest"];=0A=
MochiKit.Async.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
var ne=3Dm.partial(m._newNamedError,this);=0A=
ne("AlreadyCalledError",function(_316){=0A=
this.deferred=3D_316;=0A=
});=0A=
ne("CancelledError",function(_317){=0A=
this.deferred=3D_317;=0A=
});=0A=
ne("BrowserComplianceError",function(msg){=0A=
this.message=3Dmsg;=0A=
});=0A=
ne("GenericError",function(msg){=0A=
this.message=3Dmsg;=0A=
});=0A=
ne("XMLHttpRequestError",function(req,msg){=0A=
this.req=3Dreq;=0A=
this.message=3Dmsg;=0A=
try{=0A=
this.number=3Dreq.status;=0A=
}=0A=
catch(e){=0A=
}=0A=
});=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Async.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Async);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.DOM");=0A=
dojo.require("MochiKit.Iter");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Iter",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Iter)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.DOM depends on MochiKit.Iter!";=0A=
}=0A=
if(typeof (MochiKit.DOM)=3D=3D"undefined"){=0A=
MochiKit.DOM=3D{};=0A=
}=0A=
MochiKit.DOM.NAME=3D"MochiKit.DOM";=0A=
MochiKit.DOM.VERSION=3D"1.3.1";=0A=
MochiKit.DOM.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.DOM.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.DOM.EXPORT=3D["formContents","currentWindow","currentDocument","=
withWindow","withDocument","registerDOMConverter","coerceToDOM","createDO=
M","createDOMFunc","getNodeAttribute","setNodeAttribute","updateNodeAttri=
butes","appendChildNodes","replaceChildNodes","removeElement","swapDOM","=
BUTTON","TT","PRE","H1","H2","H3","BR","CANVAS","HR","LABEL","TEXTAREA","=
FORM","STRONG","SELECT","OPTION","OPTGROUP","LEGEND","FIELDSET","P","UL",=
"OL","LI","TD","TR","THEAD","TBODY","TFOOT","TABLE","TH","INPUT","SPAN","=
A","DIV","IMG","getElement","$","computedStyle","getElementsByTagAndClass=
Name","addToCallStack","addLoadEvent","focusOnLoad","setElementClass","to=
ggleElementClass","addElementClass","removeElementClass","swapElementClas=
s","hasElementClass","escapeHTML","toHTML","emitHTML","setDisplayForEleme=
nt","hideElement","showElement","scrapeText","elementDimensions","element=
Position","setElementDimensions","setElementPosition","getViewportDimensi=
ons","setOpacity"];=0A=
MochiKit.DOM.EXPORT_OK=3D["domConverters"];=0A=
MochiKit.DOM.Dimensions=3Dfunction(w,h){=0A=
this.w=3Dw;=0A=
this.h=3Dh;=0A=
};=0A=
MochiKit.DOM.Dimensions.prototype.repr=3Dfunction(){=0A=
var repr=3DMochiKit.Base.repr;=0A=
return "{w: "+repr(this.w)+", h: "+repr(this.h)+"}";=0A=
};=0A=
MochiKit.DOM.Coordinates=3Dfunction(x,y){=0A=
this.x=3Dx;=0A=
this.y=3Dy;=0A=
};=0A=
MochiKit.DOM.Coordinates.prototype.repr=3Dfunction(){=0A=
var repr=3DMochiKit.Base.repr;=0A=
return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";=0A=
};=0A=
MochiKit.DOM.Coordinates.prototype.toString=3Dfunction(){=0A=
return this.repr();=0A=
};=0A=
MochiKit.Base.update(MochiKit.DOM,{setOpacity:function(elem,o){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"opacity":o,"-moz-opacit=
y":o,"-khtml-opacity":o,"filter":" alpha(opacity=3D"+(o*100)+")"}});=0A=
},getViewportDimensions:function(){=0A=
var d=3Dnew MochiKit.DOM.Dimensions();=0A=
var w=3DMochiKit.DOM._window;=0A=
var b=3DMochiKit.DOM._document.body;=0A=
if(w.innerWidth){=0A=
d.w=3Dw.innerWidth;=0A=
d.h=3Dw.innerHeight;=0A=
}else{=0A=
if(b.parentElement.clientWidth){=0A=
d.w=3Db.parentElement.clientWidth;=0A=
d.h=3Db.parentElement.clientHeight;=0A=
}else{=0A=
if(b&&b.clientWidth){=0A=
d.w=3Db.clientWidth;=0A=
d.h=3Db.clientHeight;=0A=
}=0A=
}=0A=
}=0A=
return d;=0A=
},elementDimensions:function(elem){=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (elem.w)=3D=3D"number"||typeof (elem.h)=3D=3D"number"){=0A=
return new self.Dimensions(elem.w||0,elem.h||0);=0A=
}=0A=
elem=3Dself.getElement(elem);=0A=
if(!elem){=0A=
return undefined;=0A=
}=0A=
if(self.computedStyle(elem,"display")!=3D"none"){=0A=
return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);=0A=
}=0A=
var s=3Delem.style;=0A=
var _322=3Ds.visibility;=0A=
var _323=3Ds.position;=0A=
s.visibility=3D"hidden";=0A=
s.position=3D"absolute";=0A=
s.display=3D"";=0A=
var _324=3Delem.offsetWidth;=0A=
var _325=3Delem.offsetHeight;=0A=
s.display=3D"none";=0A=
s.position=3D_323;=0A=
s.visibility=3D_322;=0A=
return new self.Dimensions(_324,_325);=0A=
},elementPosition:function(elem,_326){=0A=
var self=3DMochiKit.DOM;=0A=
elem=3Dself.getElement(elem);=0A=
if(!elem){=0A=
return undefined;=0A=
}=0A=
var c=3Dnew self.Coordinates(0,0);=0A=
if(elem.x&&elem.y){=0A=
c.x+=3Delem.x||0;=0A=
c.y+=3Delem.y||0;=0A=
return c;=0A=
}else{=0A=
if(elem.parentNode=3D=3D=3Dnull||self.computedStyle(elem,"display")=3D=3D=
"none"){=0A=
return undefined;=0A=
}=0A=
}=0A=
var box=3Dnull;=0A=
var _329=3Dnull;=0A=
var d=3DMochiKit.DOM._document;=0A=
var de=3Dd.documentElement;=0A=
var b=3Dd.body;=0A=
if(elem.getBoundingClientRect){=0A=
box=3Delem.getBoundingClientRect();=0A=
c.x+=3Dbox.left+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clientLef=
t);=0A=
c.y+=3Dbox.top+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientTop);=0A=
}else{=0A=
if(d.getBoxObjectFor){=0A=
box=3Dd.getBoxObjectFor(elem);=0A=
c.x+=3Dbox.x;=0A=
c.y+=3Dbox.y;=0A=
}else{=0A=
if(elem.offsetParent){=0A=
c.x+=3Delem.offsetLeft;=0A=
c.y+=3Delem.offsetTop;=0A=
_329=3Delem.offsetParent;=0A=
if(_329!=3Delem){=0A=
while(_329){=0A=
c.x+=3D_329.offsetLeft;=0A=
c.y+=3D_329.offsetTop;=0A=
_329=3D_329.offsetParent;=0A=
}=0A=
}=0A=
var ua=3Dnavigator.userAgent.toLowerCase();=0A=
if((typeof =
(opera)!=3D"undefined"&&parseFloat(opera.version())<9)||(ua.indexOf("safa=
ri")!=3D-1&&self.computedStyle(elem,"position")=3D=3D"absolute")){=0A=
c.x-=3Db.offsetLeft;=0A=
c.y-=3Db.offsetTop;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
if(typeof (_326)!=3D"undefined"){=0A=
_326=3Darguments.callee(_326);=0A=
if(_326){=0A=
c.x-=3D(_326.x||0);=0A=
c.y-=3D(_326.y||0);=0A=
}=0A=
}=0A=
if(elem.parentNode){=0A=
_329=3Delem.parentNode;=0A=
}else{=0A=
_329=3Dnull;=0A=
}=0A=
while(_329&&_329.tagName!=3D"BODY"&&_329.tagName!=3D"HTML"){=0A=
c.x-=3D_329.scrollLeft;=0A=
c.y-=3D_329.scrollTop;=0A=
if(_329.parentNode){=0A=
_329=3D_329.parentNode;=0A=
}else{=0A=
_329=3Dnull;=0A=
}=0A=
}=0A=
return c;=0A=
},setElementDimensions:function(elem,_332,_333){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
if(typeof (_333)=3D=3D"undefined"){=0A=
_333=3D"px";=0A=
}=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"width":_332.w+_333,"hei=
ght":_332.h+_333}});=0A=
},setElementPosition:function(elem,_334,_335){=0A=
elem=3DMochiKit.DOM.getElement(elem);=0A=
if(typeof (_335)=3D=3D"undefined"){=0A=
_335=3D"px";=0A=
}=0A=
MochiKit.DOM.updateNodeAttributes(elem,{"style":{"left":_334.x+_335,"top"=
:_334.y+_335}});=0A=
},currentWindow:function(){=0A=
return MochiKit.DOM._window;=0A=
},currentDocument:function(){=0A=
return MochiKit.DOM._document;=0A=
},withWindow:function(win,func){=0A=
var self=3DMochiKit.DOM;=0A=
var _337=3Dself._document;=0A=
var _338=3Dself._win;=0A=
var rval;=0A=
try{=0A=
self._window=3Dwin;=0A=
self._document=3Dwin.document;=0A=
rval=3Dfunc();=0A=
}=0A=
catch(e){=0A=
self._window=3D_338;=0A=
self._document=3D_337;=0A=
throw e;=0A=
}=0A=
self._window=3D_338;=0A=
self._document=3D_337;=0A=
return rval;=0A=
},formContents:function(elem){=0A=
var _339=3D[];=0A=
var _340=3D[];=0A=
var m=3DMochiKit.Base;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (elem)=3D=3D"undefined"||elem=3D=3D=3Dnull){=0A=
elem=3Dself._document;=0A=
}else{=0A=
elem=3Dself.getElement(elem);=0A=
}=0A=
m.nodeWalk(elem,function(elem){=0A=
var name=3Delem.name;=0A=
if(m.isNotEmpty(name)){=0A=
var _341=3Delem.nodeName;=0A=
if(_341=3D=3D"INPUT"&&(elem.type=3D=3D"radio"||elem.type=3D=3D"checkbox")=
&&!elem.checked){=0A=
return null;=0A=
}=0A=
if(_341=3D=3D"SELECT"){=0A=
if(elem.selectedIndex>=3D0){=0A=
var opt=3Delem.options[elem.selectedIndex];=0A=
_339.push(name);=0A=
_340.push((opt.value)?opt.value:opt.text);=0A=
return null;=0A=
}=0A=
_339.push(name);=0A=
_340.push("");=0A=
return null;=0A=
}=0A=
if(_341=3D=3D"FORM"||_341=3D=3D"P"||_341=3D=3D"SPAN"||_341=3D=3D"DIV"){=0A=
return elem.childNodes;=0A=
}=0A=
_339.push(name);=0A=
_340.push(elem.value||"");=0A=
return null;=0A=
}=0A=
return elem.childNodes;=0A=
});=0A=
return [_339,_340];=0A=
},withDocument:function(doc,func){=0A=
var self=3DMochiKit.DOM;=0A=
var _344=3Dself._document;=0A=
var rval;=0A=
try{=0A=
self._document=3Ddoc;=0A=
rval=3Dfunc();=0A=
}=0A=
catch(e){=0A=
self._document=3D_344;=0A=
throw e;=0A=
}=0A=
self._document=3D_344;=0A=
return rval;=0A=
},registerDOMConverter:function(name,_345,wrap,_346){=0A=
MochiKit.DOM.domConverters.register(name,_345,wrap,_346);=0A=
},coerceToDOM:function(node,ctx){=0A=
var im=3DMochiKit.Iter;=0A=
var self=3DMochiKit.DOM;=0A=
var iter=3Dim.iter;=0A=
var _350=3Dim.repeat;=0A=
var imap=3Dim.imap;=0A=
var _352=3Dself.domConverters;=0A=
var _353=3Dself.coerceToDOM;=0A=
var _354=3DMochiKit.Base.NotFound;=0A=
while(true){=0A=
if(typeof (node)=3D=3D"undefined"||node=3D=3D=3Dnull){=0A=
return null;=0A=
}=0A=
if(typeof (node.nodeType)!=3D"undefined"&&node.nodeType>0){=0A=
return node;=0A=
}=0A=
if(typeof (node)=3D=3D"number"||typeof (node)=3D=3D"boolean"){=0A=
node=3Dnode.toString();=0A=
}=0A=
if(typeof (node)=3D=3D"string"){=0A=
return self._document.createTextNode(node);=0A=
}=0A=
if(typeof (node.toDOM)=3D=3D"function"){=0A=
node=3Dnode.toDOM(ctx);=0A=
continue;=0A=
}=0A=
if(typeof (node)=3D=3D"function"){=0A=
node=3Dnode(ctx);=0A=
continue;=0A=
}=0A=
var _355=3Dnull;=0A=
try{=0A=
_355=3Diter(node);=0A=
}=0A=
catch(e){=0A=
}=0A=
if(_355){=0A=
return imap(_353,_355,_350(ctx));=0A=
}=0A=
try{=0A=
node=3D_352.match(node,ctx);=0A=
continue;=0A=
}=0A=
catch(e){=0A=
if(e!=3D_354){=0A=
throw e;=0A=
}=0A=
}=0A=
return self._document.createTextNode(node.toString());=0A=
}=0A=
return undefined;=0A=
},setNodeAttribute:function(node,attr,_357){=0A=
var o=3D{};=0A=
o[attr]=3D_357;=0A=
try{=0A=
return MochiKit.DOM.updateNodeAttributes(node,o);=0A=
}=0A=
catch(e){=0A=
}=0A=
return null;=0A=
},getNodeAttribute:function(node,attr){=0A=
var self=3DMochiKit.DOM;=0A=
var _358=3Dself.attributeArray.renames[attr];=0A=
node=3Dself.getElement(node);=0A=
try{=0A=
if(_358){=0A=
return node[_358];=0A=
}=0A=
return node.getAttribute(attr);=0A=
}=0A=
catch(e){=0A=
}=0A=
return null;=0A=
},updateNodeAttributes:function(node,_359){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
}=0A=
if(_359){=0A=
var _360=3DMochiKit.Base.updatetree;=0A=
if(self.attributeArray.compliant){=0A=
for(var k in _359){=0A=
var v=3D_359[k];=0A=
if(typeof (v)=3D=3D"object"&&typeof (elem[k])=3D=3D"object"){=0A=
_360(elem[k],v);=0A=
}else{=0A=
if(k.substring(0,2)=3D=3D"on"){=0A=
if(typeof (v)=3D=3D"string"){=0A=
v=3Dnew Function(v);=0A=
}=0A=
elem[k]=3Dv;=0A=
}else{=0A=
elem.setAttribute(k,v);=0A=
}=0A=
}=0A=
}=0A=
}else{=0A=
var _361=3Dself.attributeArray.renames;=0A=
for(k in _359){=0A=
v=3D_359[k];=0A=
var _362=3D_361[k];=0A=
if(k=3D=3D"style"&&typeof (v)=3D=3D"string"){=0A=
elem.style.cssText=3Dv;=0A=
}else{=0A=
if(typeof (_362)=3D=3D"string"){=0A=
elem[_362]=3Dv;=0A=
}else{=0A=
if(typeof (elem[k])=3D=3D"object"&&typeof (v)=3D=3D"object"){=0A=
_360(elem[k],v);=0A=
}else{=0A=
if(k.substring(0,2)=3D=3D"on"){=0A=
if(typeof (v)=3D=3D"string"){=0A=
v=3Dnew Function(v);=0A=
}=0A=
elem[k]=3Dv;=0A=
}else{=0A=
elem.setAttribute(k,v);=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return elem;=0A=
},appendChildNodes:function(node){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
}=0A=
var =
_363=3D[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];=0A=
var _364=3DMochiKit.Base.concat;=0A=
while(_363.length){=0A=
var n=3D_363.shift();=0A=
if(typeof (n)=3D=3D"undefined"||n=3D=3D=3Dnull){=0A=
}else{=0A=
if(typeof (n.nodeType)=3D=3D"number"){=0A=
elem.appendChild(n);=0A=
}else{=0A=
_363=3D_364(n,_363);=0A=
}=0A=
}=0A=
}=0A=
return elem;=0A=
},replaceChildNodes:function(node){=0A=
var elem=3Dnode;=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (node)=3D=3D"string"){=0A=
elem=3Dself.getElement(node);=0A=
arguments[0]=3Delem;=0A=
}=0A=
var _365;=0A=
while((_365=3Delem.firstChild)){=0A=
elem.removeChild(_365);=0A=
}=0A=
if(arguments.length<2){=0A=
return elem;=0A=
}else{=0A=
return self.appendChildNodes.apply(this,arguments);=0A=
}=0A=
},createDOM:function(name,_366){=0A=
var elem;=0A=
var self=3DMochiKit.DOM;=0A=
var m=3DMochiKit.Base;=0A=
if(typeof (_366)=3D=3D"string"||typeof (_366)=3D=3D"number"){=0A=
var args=3Dm.extend([name,null],arguments,1);=0A=
return arguments.callee.apply(this,args);=0A=
}=0A=
if(typeof (name)=3D=3D"string"){=0A=
if(_366&&"name" in _366&&!self.attributeArray.compliant){=0A=
name=3D("<"+name+" name=3D\""+self.escapeHTML(_366.name)+"\">");=0A=
}=0A=
elem=3Dself._document.createElement(name);=0A=
}else{=0A=
elem=3Dname;=0A=
}=0A=
if(_366){=0A=
self.updateNodeAttributes(elem,_366);=0A=
}=0A=
if(arguments.length<=3D2){=0A=
return elem;=0A=
}else{=0A=
var args=3Dm.extend([elem],arguments,2);=0A=
return self.appendChildNodes.apply(this,args);=0A=
}=0A=
},createDOMFunc:function(){=0A=
var m=3DMochiKit.Base;=0A=
return =
m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));=0A=
},swapDOM:function(dest,src){=0A=
var self=3DMochiKit.DOM;=0A=
dest=3Dself.getElement(dest);=0A=
var _369=3Ddest.parentNode;=0A=
if(src){=0A=
src=3Dself.getElement(src);=0A=
_369.replaceChild(src,dest);=0A=
}else{=0A=
_369.removeChild(dest);=0A=
}=0A=
return src;=0A=
},getElement:function(id){=0A=
var self=3DMochiKit.DOM;=0A=
if(arguments.length=3D=3D1){=0A=
return ((typeof =
(id)=3D=3D"string")?self._document.getElementById(id):id);=0A=
}else{=0A=
return MochiKit.Base.map(self.getElement,arguments);=0A=
}=0A=
},computedStyle:function(_371,_372,_373){=0A=
if(arguments.length=3D=3D2){=0A=
_373=3D_372;=0A=
}=0A=
var self=3DMochiKit.DOM;=0A=
var el=3Dself.getElement(_371);=0A=
var _375=3Dself._document;=0A=
if(!el||el=3D=3D_375){=0A=
return undefined;=0A=
}=0A=
if(el.currentStyle){=0A=
return el.currentStyle[_372];=0A=
}=0A=
if(typeof (_375.defaultView)=3D=3D"undefined"){=0A=
return undefined;=0A=
}=0A=
if(_375.defaultView=3D=3D=3Dnull){=0A=
return undefined;=0A=
}=0A=
var _376=3D_375.defaultView.getComputedStyle(el,null);=0A=
if(typeof (_376)=3D=3D"undefined"||_376=3D=3D=3Dnull){=0A=
return undefined;=0A=
}=0A=
return _376.getPropertyValue(_373);=0A=
},getElementsByTagAndClassName:function(_377,_378,_379){=0A=
var self=3DMochiKit.DOM;=0A=
if(typeof (_377)=3D=3D"undefined"||_377=3D=3D=3Dnull){=0A=
_377=3D"*";=0A=
}=0A=
if(typeof (_379)=3D=3D"undefined"||_379=3D=3D=3Dnull){=0A=
_379=3Dself._document;=0A=
}=0A=
_379=3Dself.getElement(_379);=0A=
var _380=3D(_379.getElementsByTagName(_377)||self._document.all);=0A=
if(typeof (_378)=3D=3D"undefined"||_378=3D=3D=3Dnull){=0A=
return MochiKit.Base.extend(null,_380);=0A=
}=0A=
var _381=3D[];=0A=
for(var i=3D0;i<_380.length;i++){=0A=
var _382=3D_380[i];=0A=
var _383=3D_382.className.split(" ");=0A=
for(var j=3D0;j<_383.length;j++){=0A=
if(_383[j]=3D=3D_378){=0A=
_381.push(_382);=0A=
break;=0A=
}=0A=
}=0A=
}=0A=
return _381;=0A=
},_newCallStack:function(path,once){=0A=
var rval=3Dfunction(){=0A=
var _386=3Darguments.callee.callStack;=0A=
for(var i=3D0;i<_386.length;i++){=0A=
if(_386[i].apply(this,arguments)=3D=3D=3Dfalse){=0A=
break;=0A=
}=0A=
}=0A=
if(once){=0A=
try{=0A=
this[path]=3Dnull;=0A=
}=0A=
catch(e){=0A=
}=0A=
}=0A=
};=0A=
rval.callStack=3D[];=0A=
return rval;=0A=
},addToCallStack:function(_387,path,func,once){=0A=
var self=3DMochiKit.DOM;=0A=
var _388=3D_387[path];=0A=
var _389=3D_388;=0A=
if(!(typeof (_388)=3D=3D"function"&&typeof =
(_388.callStack)=3D=3D"object"&&_388.callStack!=3D=3Dnull)){=0A=
_389=3Dself._newCallStack(path,once);=0A=
if(typeof (_388)=3D=3D"function"){=0A=
_389.callStack.push(_388);=0A=
}=0A=
_387[path]=3D_389;=0A=
}=0A=
_389.callStack.push(func);=0A=
},addLoadEvent:function(func){=0A=
var self=3DMochiKit.DOM;=0A=
self.addToCallStack(self._window,"onload",func,true);=0A=
},focusOnLoad:function(_390){=0A=
var self=3DMochiKit.DOM;=0A=
self.addLoadEvent(function(){=0A=
_390=3Dself.getElement(_390);=0A=
if(_390){=0A=
_390.focus();=0A=
}=0A=
});=0A=
},setElementClass:function(_391,_392){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_391);=0A=
if(self.attributeArray.compliant){=0A=
obj.setAttribute("class",_392);=0A=
}else{=0A=
obj.setAttribute("className",_392);=0A=
}=0A=
},toggleElementClass:function(_393){=0A=
var self=3DMochiKit.DOM;=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var obj=3Dself.getElement(arguments[i]);=0A=
if(!self.addElementClass(obj,_393)){=0A=
self.removeElementClass(obj,_393);=0A=
}=0A=
}=0A=
},addElementClass:function(_394,_395){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_394);=0A=
var cls=3Dobj.className;=0A=
if(cls.length=3D=3D=3D0){=0A=
self.setElementClass(obj,_395);=0A=
return true;=0A=
}=0A=
if(cls=3D=3D_395){=0A=
return false;=0A=
}=0A=
var _397=3Dobj.className.split(" ");=0A=
for(var i=3D0;i<_397.length;i++){=0A=
if(_397[i]=3D=3D_395){=0A=
return false;=0A=
}=0A=
}=0A=
self.setElementClass(obj,cls+" "+_395);=0A=
return true;=0A=
},removeElementClass:function(_398,_399){=0A=
var self=3DMochiKit.DOM;=0A=
var obj=3Dself.getElement(_398);=0A=
var cls=3Dobj.className;=0A=
if(cls.length=3D=3D=3D0){=0A=
return false;=0A=
}=0A=
if(cls=3D=3D_399){=0A=
self.setElementClass(obj,"");=0A=
return true;=0A=
}=0A=
var _400=3Dobj.className.split(" ");=0A=
for(var i=3D0;i<_400.length;i++){=0A=
if(_400[i]=3D=3D_399){=0A=
_400.splice(i,1);=0A=
self.setElementClass(obj,_400.join(" "));=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},swapElementClass:function(_401,_402,_403){=0A=
var obj=3DMochiKit.DOM.getElement(_401);=0A=
var res=3DMochiKit.DOM.removeElementClass(obj,_402);=0A=
if(res){=0A=
MochiKit.DOM.addElementClass(obj,_403);=0A=
}=0A=
return res;=0A=
},hasElementClass:function(_404,_405){=0A=
var obj=3DMochiKit.DOM.getElement(_404);=0A=
var _406=3Dobj.className.split(" ");=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
var good=3Dfalse;=0A=
for(var j=3D0;j<_406.length;j++){=0A=
if(_406[j]=3D=3Darguments[i]){=0A=
good=3Dtrue;=0A=
break;=0A=
}=0A=
}=0A=
if(!good){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
},escapeHTML:function(s){=0A=
return =
s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").repla=
ce(/>/g,"&gt;");=0A=
},toHTML:function(dom){=0A=
return MochiKit.DOM.emitHTML(dom).join("");=0A=
},emitHTML:function(dom,lst){=0A=
if(typeof (lst)=3D=3D"undefined"||lst=3D=3D=3Dnull){=0A=
lst=3D[];=0A=
}=0A=
var _409=3D[dom];=0A=
var self=3DMochiKit.DOM;=0A=
var _410=3Dself.escapeHTML;=0A=
var _411=3Dself.attributeArray;=0A=
while(_409.length){=0A=
dom=3D_409.pop();=0A=
if(typeof (dom)=3D=3D"string"){=0A=
lst.push(dom);=0A=
}else{=0A=
if(dom.nodeType=3D=3D1){=0A=
lst.push("<"+dom.nodeName.toLowerCase());=0A=
var _412=3D[];=0A=
var _413=3D_411(dom);=0A=
for(var i=3D0;i<_413.length;i++){=0A=
var a=3D_413[i];=0A=
_412.push([" ",a.name,"=3D\"",_410(a.value),"\""]);=0A=
}=0A=
_412.sort();=0A=
for(i=3D0;i<_412.length;i++){=0A=
var _414=3D_412[i];=0A=
for(var j=3D0;j<_414.length;j++){=0A=
lst.push(_414[j]);=0A=
}=0A=
}=0A=
if(dom.hasChildNodes()){=0A=
lst.push(">");=0A=
_409.push("</"+dom.nodeName.toLowerCase()+">");=0A=
var _415=3Ddom.childNodes;=0A=
for(i=3D_415.length-1;i>=3D0;i--){=0A=
_409.push(_415[i]);=0A=
}=0A=
}else{=0A=
lst.push("/>");=0A=
}=0A=
}else{=0A=
if(dom.nodeType=3D=3D3){=0A=
lst.push(_410(dom.nodeValue));=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return lst;=0A=
},setDisplayForElement:function(_416,_417){=0A=
var m=3DMochiKit.Base;=0A=
var _418=3Dm.extend(null,arguments,1);=0A=
MochiKit.Iter.forEach(m.filter(null,m.map(MochiKit.DOM.getElement,_418)),=
function(_417){=0A=
_417.style.display=3D_416;=0A=
});=0A=
},scrapeText:function(node,_419){=0A=
var rval=3D[];=0A=
(function(node){=0A=
var cn=3Dnode.childNodes;=0A=
if(cn){=0A=
for(var i=3D0;i<cn.length;i++){=0A=
arguments.callee.call(this,cn[i]);=0A=
}=0A=
}=0A=
var _421=3Dnode.nodeValue;=0A=
if(typeof (_421)=3D=3D"string"){=0A=
rval.push(_421);=0A=
}=0A=
})(MochiKit.DOM.getElement(node));=0A=
if(_419){=0A=
return rval;=0A=
}else{=0A=
return rval.join("");=0A=
}=0A=
},__new__:function(win){=0A=
var m=3DMochiKit.Base;=0A=
this._document=3Ddocument;=0A=
this._window=3Dwin;=0A=
this.domConverters=3Dnew m.AdapterRegistry();=0A=
var _422=3Dthis._document.createElement("span");=0A=
var _423;=0A=
if(_422&&_422.attributes&&_422.attributes.length>0){=0A=
var _424=3Dm.filter;=0A=
_423=3Dfunction(node){=0A=
return _424(_423.ignoreAttrFilter,node.attributes);=0A=
};=0A=
_423.ignoreAttr=3D{};=0A=
MochiKit.Iter.forEach(_422.attributes,function(a){=0A=
_423.ignoreAttr[a.name]=3Da.value;=0A=
});=0A=
_423.ignoreAttrFilter=3Dfunction(a){=0A=
return (_423.ignoreAttr[a.name]!=3Da.value);=0A=
};=0A=
_423.compliant=3Dfalse;=0A=
_423.renames=3D{"class":"className","checked":"defaultChecked","usemap":"=
useMap","for":"htmlFor"};=0A=
}else{=0A=
_423=3Dfunction(node){=0A=
return node.attributes;=0A=
};=0A=
_423.compliant=3Dtrue;=0A=
_423.renames=3D{};=0A=
}=0A=
this.attributeArray=3D_423;=0A=
var _425=3Dthis.createDOMFunc;=0A=
this.UL=3D_425("ul");=0A=
this.OL=3D_425("ol");=0A=
this.LI=3D_425("li");=0A=
this.TD=3D_425("td");=0A=
this.TR=3D_425("tr");=0A=
this.TBODY=3D_425("tbody");=0A=
this.THEAD=3D_425("thead");=0A=
this.TFOOT=3D_425("tfoot");=0A=
this.TABLE=3D_425("table");=0A=
this.TH=3D_425("th");=0A=
this.INPUT=3D_425("input");=0A=
this.SPAN=3D_425("span");=0A=
this.A=3D_425("a");=0A=
this.DIV=3D_425("div");=0A=
this.IMG=3D_425("img");=0A=
this.BUTTON=3D_425("button");=0A=
this.TT=3D_425("tt");=0A=
this.PRE=3D_425("pre");=0A=
this.H1=3D_425("h1");=0A=
this.H2=3D_425("h2");=0A=
this.H3=3D_425("h3");=0A=
this.BR=3D_425("br");=0A=
this.HR=3D_425("hr");=0A=
this.LABEL=3D_425("label");=0A=
this.TEXTAREA=3D_425("textarea");=0A=
this.FORM=3D_425("form");=0A=
this.P=3D_425("p");=0A=
this.SELECT=3D_425("select");=0A=
this.OPTION=3D_425("option");=0A=
this.OPTGROUP=3D_425("optgroup");=0A=
this.LEGEND=3D_425("legend");=0A=
this.FIELDSET=3D_425("fieldset");=0A=
this.STRONG=3D_425("strong");=0A=
this.CANVAS=3D_425("canvas");=0A=
this.hideElement=3Dm.partial(this.setDisplayForElement,"none");=0A=
this.showElement=3Dm.partial(this.setDisplayForElement,"block");=0A=
this.removeElement=3Dthis.swapDOM;=0A=
this.$=3Dthis.getElement;=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
}});=0A=
MochiKit.DOM.__new__(((typeof (window)=3D=3D"undefined")?this:window));=0A=
if(!MochiKit.__compat__){=0A=
withWindow=3DMochiKit.DOM.withWindow;=0A=
withDocument=3DMochiKit.DOM.withDocument;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.DOM);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.LoggingPane");=0A=
dojo.require("MochiKit.Logging");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Logging",[]);=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"||typeof =
(MochiKit.Logging)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.LoggingPane depends on MochiKit.Base and =
MochiKit.Logging!";=0A=
}=0A=
if(typeof (MochiKit.LoggingPane)=3D=3D"undefined"){=0A=
MochiKit.LoggingPane=3D{};=0A=
}=0A=
MochiKit.LoggingPane.NAME=3D"MochiKit.LoggingPane";=0A=
MochiKit.LoggingPane.VERSION=3D"1.3.1";=0A=
MochiKit.LoggingPane.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.LoggingPane.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.LoggingPane.createLoggingPane=3Dfunction(_426){=0A=
var m=3DMochiKit.LoggingPane;=0A=
_426=3D!(!_426);=0A=
if(m._loggingPane&&m._loggingPane.inline!=3D_426){=0A=
m._loggingPane.closePane();=0A=
m._loggingPane=3Dnull;=0A=
}=0A=
if(!m._loggingPane||m._loggingPane.closed){=0A=
m._loggingPane=3Dnew m.LoggingPane(_426,MochiKit.Logging.logger);=0A=
}=0A=
return m._loggingPane;=0A=
};=0A=
MochiKit.LoggingPane.LoggingPane=3Dfunction(_427,_428){=0A=
if(typeof (_428)=3D=3D"undefined"||_428=3D=3D=3Dnull){=0A=
_428=3DMochiKit.Logging.logger;=0A=
}=0A=
this.logger=3D_428;=0A=
var _429=3DMochiKit.Base.update;=0A=
var _430=3DMochiKit.Base.updatetree;=0A=
var bind=3DMochiKit.Base.bind;=0A=
var _431=3DMochiKit.Base.clone;=0A=
var win=3Dwindow;=0A=
var uid=3D"_MochiKit_LoggingPane";=0A=
if(typeof (MochiKit.DOM)!=3D"undefined"){=0A=
win=3DMochiKit.DOM.currentWindow();=0A=
}=0A=
if(!_427){=0A=
var url=3Dwin.location.href.split("?")[0].replace(/[:\/.><&]/g,"_");=0A=
var name=3Duid+"_"+url;=0A=
var nwin=3Dwin.open("",name,"dependent,resizable,height=3D200");=0A=
if(!nwin){=0A=
alert("Not able to open debugging window due to pop-up blocking.");=0A=
return undefined;=0A=
}=0A=
nwin.document.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 =
Transitional//EN\" =
"+"\"http://www.w3.org/TR/html4/loose.dtd\">"+"<html><head><title>[MochiK=
it.LoggingPane]</title></head>"+"<body></body></html>");=0A=
nwin.document.close();=0A=
nwin.document.title+=3D" "+win.document.title;=0A=
win=3Dnwin;=0A=
}=0A=
var doc=3Dwin.document;=0A=
this.doc=3Ddoc;=0A=
var _434=3Ddoc.getElementById(uid);=0A=
var _435=3D!!_434;=0A=
if(_434&&typeof (_434.loggingPane)!=3D"undefined"){=0A=
_434.loggingPane.logger=3Dthis.logger;=0A=
_434.loggingPane.buildAndApplyFilter();=0A=
return _434.loggingPane;=0A=
}=0A=
if(_435){=0A=
var _436;=0A=
while((_436=3D_434.firstChild)){=0A=
_434.removeChild(_436);=0A=
}=0A=
}else{=0A=
_434=3Ddoc.createElement("div");=0A=
_434.id=3Duid;=0A=
}=0A=
_434.loggingPane=3Dthis;=0A=
var _437=3Ddoc.createElement("input");=0A=
var _438=3Ddoc.createElement("input");=0A=
var _439=3Ddoc.createElement("button");=0A=
var _440=3Ddoc.createElement("button");=0A=
var _441=3Ddoc.createElement("button");=0A=
var _442=3Ddoc.createElement("button");=0A=
var _443=3Ddoc.createElement("div");=0A=
var _444=3Ddoc.createElement("div");=0A=
var _445=3Duid+"_Listener";=0A=
this.colorTable=3D_431(this.colorTable);=0A=
var _446=3D[];=0A=
var _447=3Dnull;=0A=
var _448=3Dfunction(msg){=0A=
var _449=3Dmsg.level;=0A=
if(typeof (_449)=3D=3D"number"){=0A=
_449=3DMochiKit.Logging.LogLevel[_449];=0A=
}=0A=
return _449;=0A=
};=0A=
var _450=3Dfunction(msg){=0A=
return msg.info.join(" ");=0A=
};=0A=
var _451=3Dbind(function(msg){=0A=
var _452=3D_448(msg);=0A=
var text=3D_450(msg);=0A=
var c=3Dthis.colorTable[_452];=0A=
var p=3Ddoc.createElement("span");=0A=
p.className=3D"MochiKit-LogMessage MochiKit-LogLevel-"+_452;=0A=
p.style.cssText=3D"margin: 0px; white-space: -moz-pre-wrap; white-space: =
-o-pre-wrap; white-space: pre-wrap; white-space: pre-line; word-wrap: =
break-word; wrap-option: emergency; color: "+c;=0A=
p.appendChild(doc.createTextNode(_452+": "+text));=0A=
_444.appendChild(p);=0A=
_444.appendChild(doc.createElement("br"));=0A=
if(_443.offsetHeight>_443.scrollHeight){=0A=
_443.scrollTop=3D0;=0A=
}else{=0A=
_443.scrollTop=3D_443.scrollHeight;=0A=
}=0A=
},this);=0A=
var _454=3Dfunction(msg){=0A=
_446[_446.length]=3Dmsg;=0A=
_451(msg);=0A=
};=0A=
var _455=3Dfunction(){=0A=
var _456,infore;=0A=
try{=0A=
_456=3Dnew RegExp(_437.value);=0A=
infore=3Dnew RegExp(_438.value);=0A=
}=0A=
catch(e){=0A=
logDebug("Error in filter regex: "+e.message);=0A=
return null;=0A=
}=0A=
return function(msg){=0A=
return (_456.test(_448(msg))&&infore.test(_450(msg)));=0A=
};=0A=
};=0A=
var _457=3Dfunction(){=0A=
while(_444.firstChild){=0A=
_444.removeChild(_444.firstChild);=0A=
}=0A=
};=0A=
var _458=3Dfunction(){=0A=
_446=3D[];=0A=
_457();=0A=
};=0A=
var _459=3Dbind(function(){=0A=
if(this.closed){=0A=
return;=0A=
}=0A=
this.closed=3Dtrue;=0A=
if(MochiKit.LoggingPane._loggingPane=3D=3Dthis){=0A=
MochiKit.LoggingPane._loggingPane=3Dnull;=0A=
}=0A=
this.logger.removeListener(_445);=0A=
_434.loggingPane=3Dnull;=0A=
if(_427){=0A=
_434.parentNode.removeChild(_434);=0A=
}else{=0A=
this.win.close();=0A=
}=0A=
},this);=0A=
var _460=3Dfunction(){=0A=
_457();=0A=
for(var i=3D0;i<_446.length;i++){=0A=
var msg=3D_446[i];=0A=
if(_447=3D=3D=3Dnull||_447(msg)){=0A=
_451(msg);=0A=
}=0A=
}=0A=
};=0A=
this.buildAndApplyFilter=3Dfunction(){=0A=
_447=3D_455();=0A=
_460();=0A=
this.logger.removeListener(_445);=0A=
this.logger.addListener(_445,_447,_454);=0A=
};=0A=
var _461=3Dbind(function(){=0A=
_446=3Dthis.logger.getMessages();=0A=
_460();=0A=
},this);=0A=
var _462=3Dbind(function(_463){=0A=
_463=3D_463||window.event;=0A=
key=3D_463.which||_463.keyCode;=0A=
if(key=3D=3D13){=0A=
this.buildAndApplyFilter();=0A=
}=0A=
},this);=0A=
var _464=3D"display: block; z-index: 1000; left: 0px; bottom: 0px; =
position: fixed; width: 100%; background-color: white; font: =
"+this.logFont;=0A=
if(_427){=0A=
_464+=3D"; height: 10em; border-top: 2px solid black";=0A=
}else{=0A=
_464+=3D"; height: 100%;";=0A=
}=0A=
_434.style.cssText=3D_464;=0A=
if(!_435){=0A=
doc.body.appendChild(_434);=0A=
}=0A=
_464=3D{"cssText":"width: 33%; display: inline; font: "+this.logFont};=0A=
_430(_437,{"value":"FATAL|ERROR|WARNING|INFO|DEBUG","onkeypress":_462,"st=
yle":_464});=0A=
_434.appendChild(_437);=0A=
_430(_438,{"value":".*","onkeypress":_462,"style":_464});=0A=
_434.appendChild(_438);=0A=
_464=3D"width: 8%; display:inline; font: "+this.logFont;=0A=
_439.appendChild(doc.createTextNode("Filter"));=0A=
_439.onclick=3Dbind("buildAndApplyFilter",this);=0A=
_439.style.cssText=3D_464;=0A=
_434.appendChild(_439);=0A=
_440.appendChild(doc.createTextNode("Load"));=0A=
_440.onclick=3D_461;=0A=
_440.style.cssText=3D_464;=0A=
_434.appendChild(_440);=0A=
_441.appendChild(doc.createTextNode("Clear"));=0A=
_441.onclick=3D_458;=0A=
_441.style.cssText=3D_464;=0A=
_434.appendChild(_441);=0A=
_442.appendChild(doc.createTextNode("Close"));=0A=
_442.onclick=3D_459;=0A=
_442.style.cssText=3D_464;=0A=
_434.appendChild(_442);=0A=
_443.style.cssText=3D"overflow: auto; width: 100%";=0A=
_444.style.cssText=3D"width: 100%; height: "+(_427?"8em":"100%");=0A=
_443.appendChild(_444);=0A=
_434.appendChild(_443);=0A=
this.buildAndApplyFilter();=0A=
_461();=0A=
if(_427){=0A=
this.win=3Dundefined;=0A=
}else{=0A=
this.win=3Dwin;=0A=
}=0A=
this.inline=3D_427;=0A=
this.closePane=3D_459;=0A=
this.closed=3Dfalse;=0A=
return this;=0A=
};=0A=
MochiKit.LoggingPane.LoggingPane.prototype=3D{"logFont":"8pt =
Verdana,sans-serif","colorTable":{"ERROR":"red","FATAL":"darkred","WARNIN=
G":"blue","INFO":"black","DEBUG":"green"}};=0A=
MochiKit.LoggingPane.EXPORT_OK=3D["LoggingPane"];=0A=
MochiKit.LoggingPane.EXPORT=3D["createLoggingPane"];=0A=
MochiKit.LoggingPane.__new__=3Dfunction(){=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":MochiKit.Base.concat(thi=
s.EXPORT,this.EXPORT_OK)};=0A=
MochiKit.Base.nameFunctions(this);=0A=
MochiKit.LoggingPane._loggingPane=3Dnull;=0A=
};=0A=
MochiKit.LoggingPane.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.LoggingPane);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Color");=0A=
dojo.require("MochiKit.Base");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Color depends on MochiKit.Base";=0A=
}=0A=
if(typeof (MochiKit.Color)=3D=3D"undefined"){=0A=
MochiKit.Color=3D{};=0A=
}=0A=
MochiKit.Color.NAME=3D"MochiKit.Color";=0A=
MochiKit.Color.VERSION=3D"1.3.1";=0A=
MochiKit.Color.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Color.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Color.Color=3Dfunction(red,_466,blue,_468){=0A=
if(typeof (_468)=3D=3D"undefined"||_468=3D=3D=3Dnull){=0A=
_468=3D1;=0A=
}=0A=
this.rgb=3D{r:red,g:_466,b:blue,a:_468};=0A=
};=0A=
MochiKit.Color.Color.prototype=3D{__class__:MochiKit.Color.Color,colorWit=
hAlpha:function(_469){=0A=
var rgb=3Dthis.rgb;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_469);=0A=
},colorWithHue:function(hue){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.h=3Dhue;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},colorWithSaturation:function(_473){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.s=3D_473;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},colorWithLightness:function(_474){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3D_474;=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},darkerColorWithLevel:function(_475){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3DMath.max(hsl.l-_475,0);=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},lighterColorWithLevel:function(_476){=0A=
var hsl=3Dthis.asHSL();=0A=
hsl.l=3DMath.min(hsl.l+_476,1);=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromHSL(hsl);=0A=
},blendedColor:function(_477,_478){=0A=
if(typeof (_478)=3D=3D"undefined"||_478=3D=3D=3Dnull){=0A=
_478=3D0.5;=0A=
}=0A=
var sf=3D1-_478;=0A=
var s=3Dthis.rgb;=0A=
var d=3D_477.rgb;=0A=
var df=3D_478;=0A=
return =
MochiKit.Color.Color.fromRGB((s.r*sf)+(d.r*df),(s.g*sf)+(d.g*df),(s.b*sf)=
+(d.b*df),(s.a*sf)+(d.a*df));=0A=
},compareRGB:function(_481){=0A=
var a=3Dthis.asRGB();=0A=
var b=3D_481.asRGB();=0A=
return MochiKit.Base.compare([a.r,a.g,a.b,a.a],[b.r,b.g,b.b,b.a]);=0A=
},isLight:function(){=0A=
return this.asHSL().b>0.5;=0A=
},isDark:function(){=0A=
return (!this.isLight());=0A=
},toHSLString:function(){=0A=
var c=3Dthis.asHSL();=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._hslString;=0A=
if(!rval){=0A=
var =
mid=3D(ccc(c.h,360).toFixed(0)+","+ccc(c.s,100).toPrecision(4)+"%"+","+cc=
c(c.l,100).toPrecision(4)+"%");=0A=
var a=3Dc.a;=0A=
if(a>=3D1){=0A=
a=3D1;=0A=
rval=3D"hsl("+mid+")";=0A=
}else{=0A=
if(a<=3D0){=0A=
a=3D0;=0A=
}=0A=
rval=3D"hsla("+mid+","+a+")";=0A=
}=0A=
this._hslString=3Drval;=0A=
}=0A=
return rval;=0A=
},toRGBString:function(){=0A=
var c=3Dthis.rgb;=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._rgbString;=0A=
if(!rval){=0A=
var =
mid=3D(ccc(c.r,255).toFixed(0)+","+ccc(c.g,255).toFixed(0)+","+ccc(c.b,25=
5).toFixed(0));=0A=
if(c.a!=3D1){=0A=
rval=3D"rgba("+mid+","+c.a+")";=0A=
}else{=0A=
rval=3D"rgb("+mid+")";=0A=
}=0A=
this._rgbString=3Drval;=0A=
}=0A=
return rval;=0A=
},asRGB:function(){=0A=
return MochiKit.Base.clone(this.rgb);=0A=
},toHexString:function(){=0A=
var m=3DMochiKit.Color;=0A=
var c=3Dthis.rgb;=0A=
var ccc=3DMochiKit.Color.clampColorComponent;=0A=
var rval=3Dthis._hexString;=0A=
if(!rval){=0A=
rval=3D("#"+m.toColorPart(ccc(c.r,255))+m.toColorPart(ccc(c.g,255))+m.toC=
olorPart(ccc(c.b,255)));=0A=
this._hexString=3Drval;=0A=
}=0A=
return rval;=0A=
},asHSV:function(){=0A=
var hsv=3Dthis.hsv;=0A=
var c=3Dthis.rgb;=0A=
if(typeof (hsv)=3D=3D"undefined"||hsv=3D=3D=3Dnull){=0A=
hsv=3DMochiKit.Color.rgbToHSV(this.rgb);=0A=
this.hsv=3Dhsv;=0A=
}=0A=
return MochiKit.Base.clone(hsv);=0A=
},asHSL:function(){=0A=
var hsl=3Dthis.hsl;=0A=
var c=3Dthis.rgb;=0A=
if(typeof (hsl)=3D=3D"undefined"||hsl=3D=3D=3Dnull){=0A=
hsl=3DMochiKit.Color.rgbToHSL(this.rgb);=0A=
this.hsl=3Dhsl;=0A=
}=0A=
return MochiKit.Base.clone(hsl);=0A=
},toString:function(){=0A=
return this.toRGBString();=0A=
},repr:function(){=0A=
var c=3Dthis.rgb;=0A=
var col=3D[c.r,c.g,c.b,c.a];=0A=
return this.__class__.NAME+"("+col.join(", ")+")";=0A=
}};=0A=
MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_486,blue=
,_487){=0A=
var _488=3DMochiKit.Color.Color;=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_486=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
if(typeof (rgb.a)=3D=3D"undefined"){=0A=
_487=3Dundefined;=0A=
}else{=0A=
_487=3Drgb.a;=0A=
}=0A=
}=0A=
return new _488(red,_486,blue,_487);=0A=
},fromHSL:function(hue,_489,_490,_491){=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(m.hslToRGB.apply(m,arguments));=0A=
},fromHSV:function(hue,_492,_493,_494){=0A=
var m=3DMochiKit.Color;=0A=
return m.Color.fromRGB(m.hsvToRGB.apply(m,arguments));=0A=
},fromName:function(name){=0A=
var _495=3DMochiKit.Color.Color;=0A=
if(name.charAt(0)=3D=3D"\""){=0A=
name=3Dname.substr(1,name.length-2);=0A=
}=0A=
var _496=3D_495._namedColors[name.toLowerCase()];=0A=
if(typeof (_496)=3D=3D"string"){=0A=
return _495.fromHexString(_496);=0A=
}else{=0A=
if(name=3D=3D"transparent"){=0A=
return _495.transparentColor();=0A=
}=0A=
}=0A=
return null;=0A=
},fromString:function(_497){=0A=
var self=3DMochiKit.Color.Color;=0A=
var _498=3D_497.substr(0,3);=0A=
if(_498=3D=3D"rgb"){=0A=
return self.fromRGBString(_497);=0A=
}else{=0A=
if(_498=3D=3D"hsl"){=0A=
return self.fromHSLString(_497);=0A=
}else{=0A=
if(_497.charAt(0)=3D=3D"#"){=0A=
return self.fromHexString(_497);=0A=
}=0A=
}=0A=
}=0A=
return self.fromName(_497);=0A=
},fromHexString:function(_499){=0A=
if(_499.charAt(0)=3D=3D"#"){=0A=
_499=3D_499.substring(1);=0A=
}=0A=
var _500=3D[];=0A=
var i,hex;=0A=
if(_499.length=3D=3D3){=0A=
for(i=3D0;i<3;i++){=0A=
hex=3D_499.substr(i,1);=0A=
_500.push(parseInt(hex+hex,16)/255);=0A=
}=0A=
}else{=0A=
for(i=3D0;i<6;i+=3D2){=0A=
hex=3D_499.substr(i,2);=0A=
_500.push(parseInt(hex,16)/255);=0A=
}=0A=
}=0A=
var _501=3DMochiKit.Color.Color;=0A=
return _501.fromRGB.apply(_501,_500);=0A=
},_fromColorString:function(pre,_503,_504,_505){=0A=
if(_505.indexOf(pre)=3D=3D=3D0){=0A=
_505=3D_505.substring(_505.indexOf("(",3)+1,_505.length-1);=0A=
}=0A=
var _506=3D_505.split(/\s*,\s*/);=0A=
var _507=3D[];=0A=
for(var i=3D0;i<_506.length;i++){=0A=
var c=3D_506[i];=0A=
var val;=0A=
var _508=3Dc.substring(c.length-3);=0A=
if(c.charAt(c.length-1)=3D=3D"%"){=0A=
val=3D0.01*parseFloat(c.substring(0,c.length-1));=0A=
}else{=0A=
if(_508=3D=3D"deg"){=0A=
val=3DparseFloat(c)/360;=0A=
}else{=0A=
if(_508=3D=3D"rad"){=0A=
val=3DparseFloat(c)/(Math.PI*2);=0A=
}else{=0A=
val=3D_504[i]*parseFloat(c);=0A=
}=0A=
}=0A=
}=0A=
_507.push(val);=0A=
}=0A=
return this[_503].apply(this,_507);=0A=
},fromComputedStyle:function(elem,_509,_510){=0A=
var d=3DMochiKit.DOM;=0A=
var cls=3DMochiKit.Color.Color;=0A=
for(elem=3Dd.getElement(elem);elem;elem=3Delem.parentNode){=0A=
var _511=3Dd.computedStyle.apply(d,arguments);=0A=
if(!_511){=0A=
continue;=0A=
}=0A=
var _512=3Dcls.fromString(_511);=0A=
if(!_512){=0A=
break;=0A=
}=0A=
if(_512.asRGB().a>0){=0A=
return _512;=0A=
}=0A=
}=0A=
return null;=0A=
},fromBackground:function(elem){=0A=
var cls=3DMochiKit.Color.Color;=0A=
return =
cls.fromComputedStyle(elem,"backgroundColor","background-color")||cls.whi=
teColor();=0A=
},fromText:function(elem){=0A=
var cls=3DMochiKit.Color.Color;=0A=
return cls.fromComputedStyle(elem,"color","color")||cls.blackColor();=0A=
},namedColors:function(){=0A=
return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);=0A=
}});=0A=
MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_513)=
{=0A=
v*=3D_513;=0A=
if(v<0){=0A=
return 0;=0A=
}else{=0A=
if(v>_513){=0A=
return _513;=0A=
}else{=0A=
return v;=0A=
}=0A=
}=0A=
},_hslValue:function(n1,n2,hue){=0A=
if(hue>6){=0A=
hue-=3D6;=0A=
}else{=0A=
if(hue<0){=0A=
hue+=3D6;=0A=
}=0A=
}=0A=
var val;=0A=
if(hue<1){=0A=
val=3Dn1+(n2-n1)*hue;=0A=
}else{=0A=
if(hue<3){=0A=
val=3Dn2;=0A=
}else{=0A=
if(hue<4){=0A=
val=3Dn1+(n2-n1)*(4-hue);=0A=
}else{=0A=
val=3Dn1;=0A=
}=0A=
}=0A=
}=0A=
return val;=0A=
},hsvToRGB:function(hue,_516,_517,_518){=0A=
if(arguments.length=3D=3D1){=0A=
var hsv=3Dhue;=0A=
hue=3Dhsv.h;=0A=
_516=3Dhsv.s;=0A=
_517=3Dhsv.v;=0A=
_518=3Dhsv.a;=0A=
}=0A=
var red;=0A=
var _519;=0A=
var blue;=0A=
if(_516=3D=3D=3D0){=0A=
red=3D0;=0A=
_519=3D0;=0A=
blue=3D0;=0A=
}else{=0A=
var i=3DMath.floor(hue*6);=0A=
var f=3D(hue*6)-i;=0A=
var p=3D_517*(1-_516);=0A=
var q=3D_517*(1-(_516*f));=0A=
var t=3D_517*(1-(_516*(1-f)));=0A=
switch(i){=0A=
case 1:=0A=
red=3Dq;=0A=
_519=3D_517;=0A=
blue=3Dp;=0A=
break;=0A=
case 2:=0A=
red=3Dp;=0A=
_519=3D_517;=0A=
blue=3Dt;=0A=
break;=0A=
case 3:=0A=
red=3Dp;=0A=
_519=3Dq;=0A=
blue=3D_517;=0A=
break;=0A=
case 4:=0A=
red=3Dt;=0A=
_519=3Dp;=0A=
blue=3D_517;=0A=
break;=0A=
case 5:=0A=
red=3D_517;=0A=
_519=3Dp;=0A=
blue=3Dq;=0A=
break;=0A=
case 6:=0A=
case 0:=0A=
red=3D_517;=0A=
_519=3Dt;=0A=
blue=3Dp;=0A=
break;=0A=
}=0A=
}=0A=
return {r:red,g:_519,b:blue,a:_518};=0A=
},hslToRGB:function(hue,_521,_522,_523){=0A=
if(arguments.length=3D=3D1){=0A=
var hsl=3Dhue;=0A=
hue=3Dhsl.h;=0A=
_521=3Dhsl.s;=0A=
_522=3Dhsl.l;=0A=
_523=3Dhsl.a;=0A=
}=0A=
var red;=0A=
var _524;=0A=
var blue;=0A=
if(_521=3D=3D=3D0){=0A=
red=3D_522;=0A=
_524=3D_522;=0A=
blue=3D_522;=0A=
}else{=0A=
var m2;=0A=
if(_522<=3D0.5){=0A=
m2=3D_522*(1+_521);=0A=
}else{=0A=
m2=3D_522+_521-(_522*_521);=0A=
}=0A=
var m1=3D(2*_522)-m2;=0A=
var f=3DMochiKit.Color._hslValue;=0A=
var h6=3Dhue*6;=0A=
red=3Df(m1,m2,h6+2);=0A=
_524=3Df(m1,m2,h6);=0A=
blue=3Df(m1,m2,h6-2);=0A=
}=0A=
return {r:red,g:_524,b:blue,a:_523};=0A=
},rgbToHSV:function(red,_528,blue,_529){=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_528=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
_529=3Drgb.a;=0A=
}=0A=
var max=3DMath.max(Math.max(red,_528),blue);=0A=
var min=3DMath.min(Math.min(red,_528),blue);=0A=
var hue;=0A=
var _532;=0A=
var _533=3Dmax;=0A=
if(min=3D=3Dmax){=0A=
hue=3D0;=0A=
_532=3D0;=0A=
}else{=0A=
var _534=3D(max-min);=0A=
_532=3D_534/max;=0A=
if(red=3D=3Dmax){=0A=
hue=3D(_528-blue)/_534;=0A=
}else{=0A=
if(_528=3D=3Dmax){=0A=
hue=3D2+((blue-red)/_534);=0A=
}else{=0A=
hue=3D4+((red-_528)/_534);=0A=
}=0A=
}=0A=
hue/=3D6;=0A=
if(hue<0){=0A=
hue+=3D1;=0A=
}=0A=
if(hue>1){=0A=
hue-=3D1;=0A=
}=0A=
}=0A=
return {h:hue,s:_532,v:_533,a:_529};=0A=
},rgbToHSL:function(red,_535,blue,_536){=0A=
if(arguments.length=3D=3D1){=0A=
var rgb=3Dred;=0A=
red=3Drgb.r;=0A=
_535=3Drgb.g;=0A=
blue=3Drgb.b;=0A=
_536=3Drgb.a;=0A=
}=0A=
var max=3DMath.max(red,Math.max(_535,blue));=0A=
var min=3DMath.min(red,Math.min(_535,blue));=0A=
var hue;=0A=
var _537;=0A=
var _538=3D(max+min)/2;=0A=
var _539=3Dmax-min;=0A=
if(_539=3D=3D=3D0){=0A=
hue=3D0;=0A=
_537=3D0;=0A=
}else{=0A=
if(_538<=3D0.5){=0A=
_537=3D_539/(max+min);=0A=
}else{=0A=
_537=3D_539/(2-max-min);=0A=
}=0A=
if(red=3D=3Dmax){=0A=
hue=3D(_535-blue)/_539;=0A=
}else{=0A=
if(_535=3D=3Dmax){=0A=
hue=3D2+((blue-red)/_539);=0A=
}else{=0A=
hue=3D4+((red-_535)/_539);=0A=
}=0A=
}=0A=
hue/=3D6;=0A=
if(hue<0){=0A=
hue+=3D1;=0A=
}=0A=
if(hue>1){=0A=
hue-=3D1;=0A=
}=0A=
}=0A=
return {h:hue,s:_537,l:_538,a:_536};=0A=
},toColorPart:function(num){=0A=
num=3DMath.round(num);=0A=
var _540=3Dnum.toString(16);=0A=
if(num<16){=0A=
return "0"+_540;=0A=
}=0A=
return _540;=0A=
},__new__:function(){=0A=
var m=3DMochiKit.Base;=0A=
this.Color.fromRGBString=3Dm.bind(this.Color._fromColorString,this.Color,=
"rgb","fromRGB",[1/255,1/255,1/255,1]);=0A=
this.Color.fromHSLString=3Dm.bind(this.Color._fromColorString,this.Color,=
"hsl","fromHSL",[1/360,0.01,0.01,1]);=0A=
var _541=3D1/3;=0A=
var =
_542=3D{black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkG=
ray:[_541,_541,_541],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_541,2=
*_541,2*_541],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,=
0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};=0A=
var _543=3Dfunction(name,r,g,b,a){=0A=
var rval=3Dthis.fromRGB(r,g,b,a);=0A=
this[name]=3Dfunction(){=0A=
return rval;=0A=
};=0A=
return rval;=0A=
};=0A=
for(var k in _542){=0A=
var name=3Dk+"Color";=0A=
var _545=3Dm.concat([_543,this.Color,name],_542[k]);=0A=
this.Color[name]=3Dm.bind.apply(null,_545);=0A=
}=0A=
var _546=3Dfunction(){=0A=
for(var i=3D0;i<arguments.length;i++){=0A=
if(!(arguments[i] instanceof Color)){=0A=
return false;=0A=
}=0A=
}=0A=
return true;=0A=
};=0A=
var _547=3Dfunction(a,b){=0A=
return a.compareRGB(b);=0A=
};=0A=
m.nameFunctions(this);=0A=
m.registerComparator(this.Color.NAME,_546,_547);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
}});=0A=
MochiKit.Color.EXPORT=3D["Color"];=0A=
MochiKit.Color.EXPORT_OK=3D["clampColorComponent","rgbToHSL","hslToRGB","=
rgbToHSV","hsvToRGB","toColorPart"];=0A=
MochiKit.Color.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Color);=0A=
MochiKit.Color.Color._namedColors=3D{aliceblue:"#f0f8ff",antiquewhite:"#f=
aebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc=
",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff=
",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f=
9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower=
blue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkbl=
ue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9=
",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:=
"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932=
cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darksla=
teblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturq=
uoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00b=
fff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"=
#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",ga=
insboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520"=
,gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",hone=
ydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivo=
ry:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",l=
awngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:=
"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#=
d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",ligh=
tsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightsla=
tegray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lighty=
ellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magent=
a:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000=
cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371=
",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"=
#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5f=
ffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#=
000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ff=
a500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegr=
een:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:=
"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd=
",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f"=
,royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#=
f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c=
0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategre=
y:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:=
"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#4=
0e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5=
f5",yellow:"#ffff00",yellowgreen:"#9acd32"};=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Signal");=0A=
dojo.require("MochiKit.Base");=0A=
dojo.require("MochiKit.DOM");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Signal depends on MochiKit.Base!";=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.DOM)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Signal depends on MochiKit.DOM!";=0A=
}=0A=
if(typeof (MochiKit.Signal)=3D=3D"undefined"){=0A=
MochiKit.Signal=3D{};=0A=
}=0A=
MochiKit.Signal.NAME=3D"MochiKit.Signal";=0A=
MochiKit.Signal.VERSION=3D"1.3.1";=0A=
MochiKit.Signal._observers=3D[];=0A=
MochiKit.Signal.Event=3Dfunction(src,e){=0A=
this._event=3De||window.event;=0A=
this._src=3Dsrc;=0A=
};=0A=
MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function()=
{=0A=
var repr=3DMochiKit.Base.repr;=0A=
var str=3D"{event(): "+repr(this.event())+", src(): =
"+repr(this.src())+", type(): "+repr(this.type())+", target(): =
"+repr(this.target())+", modifier(): "+"{alt: =
"+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", =
meta: "+repr(this.modifier().meta)+", shift: =
"+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";=0A=
if(this.type()&&this.type().indexOf("key")=3D=3D=3D0){=0A=
str+=3D", key(): {code: "+repr(this.key().code)+", string: =
"+repr(this.key().string)+"}";=0A=
}=0A=
if(this.type()&&(this.type().indexOf("mouse")=3D=3D=3D0||this.type().inde=
xOf("click")!=3D-1||this.type()=3D=3D"contextmenu")){=0A=
str+=3D", mouse(): {page: "+repr(this.mouse().page)+", client: =
"+repr(this.mouse().client);=0A=
if(this.type()!=3D"mousemove"){=0A=
str+=3D", button: {left: "+repr(this.mouse().button.left)+", middle: =
"+repr(this.mouse().button.middle)+", right: =
"+repr(this.mouse().button.right)+"}}";=0A=
}else{=0A=
str+=3D"}";=0A=
}=0A=
}=0A=
if(this.type()=3D=3D"mouseover"||this.type()=3D=3D"mouseout"){=0A=
str+=3D", relatedTarget(): "+repr(this.relatedTarget());=0A=
}=0A=
str+=3D"}";=0A=
return str;=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},src:function(){=0A=
return this._src;=0A=
},event:function(){=0A=
return this._event;=0A=
},type:function(){=0A=
return this._event.type||undefined;=0A=
},target:function(){=0A=
return this._event.target||this._event.srcElement;=0A=
},relatedTarget:function(){=0A=
if(this.type()=3D=3D"mouseover"){=0A=
return (this._event.relatedTarget||this._event.fromElement);=0A=
}else{=0A=
if(this.type()=3D=3D"mouseout"){=0A=
return (this._event.relatedTarget||this._event.toElement);=0A=
}=0A=
}=0A=
return undefined;=0A=
},modifier:function(){=0A=
var m=3D{};=0A=
m.alt=3Dthis._event.altKey;=0A=
m.ctrl=3Dthis._event.ctrlKey;=0A=
m.meta=3Dthis._event.metaKey||false;=0A=
m.shift=3Dthis._event.shiftKey;=0A=
m.any=3Dm.alt||m.ctrl||m.shift||m.meta;=0A=
return m;=0A=
},key:function(){=0A=
var k=3D{};=0A=
if(this.type()&&this.type().indexOf("key")=3D=3D=3D0){=0A=
if(this.type()=3D=3D"keydown"||this.type()=3D=3D"keyup"){=0A=
k.code=3Dthis._event.keyCode;=0A=
k.string=3D(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");=0A=
return k;=0A=
}else{=0A=
if(this.type()=3D=3D"keypress"){=0A=
k.code=3D0;=0A=
k.string=3D"";=0A=
if(typeof =
(this._event.charCode)!=3D"undefined"&&this._event.charCode!=3D=3D0&&!Moc=
hiKit.Signal._specialMacKeys[this._event.charCode]){=0A=
k.code=3Dthis._event.charCode;=0A=
k.string=3DString.fromCharCode(k.code);=0A=
}else{=0A=
if(this._event.keyCode&&typeof (this._event.charCode)=3D=3D"undefined"){=0A=
k.code=3Dthis._event.keyCode;=0A=
k.string=3DString.fromCharCode(k.code);=0A=
}=0A=
}=0A=
return k;=0A=
}=0A=
}=0A=
}=0A=
return undefined;=0A=
},mouse:function(){=0A=
var m=3D{};=0A=
var e=3Dthis._event;=0A=
if(this.type()&&(this.type().indexOf("mouse")=3D=3D=3D0||this.type().inde=
xOf("click")!=3D-1||this.type()=3D=3D"contextmenu")){=0A=
m.client=3Dnew MochiKit.DOM.Coordinates(0,0);=0A=
if(e.clientX||e.clientY){=0A=
m.client.x=3D(!e.clientX||e.clientX<0)?0:e.clientX;=0A=
m.client.y=3D(!e.clientY||e.clientY<0)?0:e.clientY;=0A=
}=0A=
m.page=3Dnew MochiKit.DOM.Coordinates(0,0);=0A=
if(e.pageX||e.pageY){=0A=
m.page.x=3D(!e.pageX||e.pageX<0)?0:e.pageX;=0A=
m.page.y=3D(!e.pageY||e.pageY<0)?0:e.pageY;=0A=
}else{=0A=
var de=3DMochiKit.DOM._document.documentElement;=0A=
var b=3DMochiKit.DOM._document.body;=0A=
m.page.x=3De.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clie=
ntLeft);=0A=
m.page.y=3De.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientT=
op);=0A=
}=0A=
if(this.type()!=3D"mousemove"){=0A=
m.button=3D{};=0A=
m.button.left=3Dfalse;=0A=
m.button.right=3Dfalse;=0A=
m.button.middle=3Dfalse;=0A=
if(e.which){=0A=
m.button.left=3D(e.which=3D=3D1);=0A=
m.button.middle=3D(e.which=3D=3D2);=0A=
m.button.right=3D(e.which=3D=3D3);=0A=
}else{=0A=
m.button.left=3D!!(e.button&1);=0A=
m.button.right=3D!!(e.button&2);=0A=
m.button.middle=3D!!(e.button&4);=0A=
}=0A=
}=0A=
return m;=0A=
}=0A=
return undefined;=0A=
},stop:function(){=0A=
this.stopPropagation();=0A=
this.preventDefault();=0A=
},stopPropagation:function(){=0A=
if(this._event.stopPropagation){=0A=
this._event.stopPropagation();=0A=
}else{=0A=
this._event.cancelBubble=3Dtrue;=0A=
}=0A=
},preventDefault:function(){=0A=
if(this._event.preventDefault){=0A=
this._event.preventDefault();=0A=
}else{=0A=
this._event.returnValue=3Dfalse;=0A=
}=0A=
}});=0A=
MochiKit.Signal._specialMacKeys=3D{3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR=
",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HO=
ME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",6=
3233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};=0A=
for(i=3D63236;i<=3D63242;i++){=0A=
MochiKit.Signal._specialMacKeys[i]=3D"KEY_F"+(i-63236+1);=0A=
}=0A=
MochiKit.Signal._specialKeys=3D{8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM=
_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"=
KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_P=
AGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT"=
,38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT=
_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDO=
WS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK=
",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM=
_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCR=
OLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"=
KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_AC=
CENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RI=
GHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};=0A=
for(var i=3D48;i<=3D57;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_"+(i-48);=0A=
}=0A=
for(i=3D65;i<=3D90;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_"+String.fromCharCode(i);=0A=
}=0A=
for(i=3D96;i<=3D105;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_NUM_PAD_"+(i-96);=0A=
}=0A=
for(i=3D112;i<=3D123;i++){=0A=
MochiKit.Signal._specialKeys[i]=3D"KEY_F"+(i-112+1);=0A=
}=0A=
MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
},toString:function(){=0A=
return this.__repr__();=0A=
},_unloadCache:function(){=0A=
var self=3DMochiKit.Signal;=0A=
var _548=3Dself._observers;=0A=
for(var i=3D0;i<_548.length;i++){=0A=
self._disconnect(_548[i]);=0A=
}=0A=
delete self._observers;=0A=
try{=0A=
window.onload=3Dundefined;=0A=
}=0A=
catch(e){=0A=
}=0A=
try{=0A=
window.onunload=3Dundefined;=0A=
}=0A=
catch(e){=0A=
}=0A=
},_listener:function(src,func,obj,_549){=0A=
var E=3DMochiKit.Signal.Event;=0A=
if(!_549){=0A=
return MochiKit.Base.bind(func,obj);=0A=
}=0A=
obj=3Dobj||src;=0A=
if(typeof (func)=3D=3D"string"){=0A=
return function(_551){=0A=
obj[func].apply(obj,[new E(src,_551)]);=0A=
};=0A=
}else{=0A=
return function(_552){=0A=
func.apply(obj,[new E(src,_552)]);=0A=
};=0A=
}=0A=
},connect:function(src,sig,_554,_555){=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var self=3DMochiKit.Signal;=0A=
if(typeof (sig)!=3D"string"){=0A=
throw new Error("'sig' must be a string");=0A=
}=0A=
var obj=3Dnull;=0A=
var func=3Dnull;=0A=
if(typeof (_555)!=3D"undefined"){=0A=
obj=3D_554;=0A=
func=3D_555;=0A=
if(typeof (_555)=3D=3D"string"){=0A=
if(typeof (_554[_555])!=3D"function"){=0A=
throw new Error("'funcOrStr' must be a function on 'objOrFunc'");=0A=
}=0A=
}else{=0A=
if(typeof (_555)!=3D"function"){=0A=
throw new Error("'funcOrStr' must be a function or string");=0A=
}=0A=
}=0A=
}else{=0A=
if(typeof (_554)!=3D"function"){=0A=
throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not =
given");=0A=
}else{=0A=
func=3D_554;=0A=
}=0A=
}=0A=
if(typeof (obj)=3D=3D"undefined"||obj=3D=3D=3Dnull){=0A=
obj=3Dsrc;=0A=
}=0A=
var _556=3D!!(src.addEventListener||src.attachEvent);=0A=
var _557=3Dself._listener(src,func,obj,_556);=0A=
if(src.addEventListener){=0A=
src.addEventListener(sig.substr(2),_557,false);=0A=
}else{=0A=
if(src.attachEvent){=0A=
src.attachEvent(sig,_557);=0A=
}=0A=
}=0A=
var _558=3D[src,sig,_557,_556,_554,_555];=0A=
self._observers.push(_558);=0A=
return _558;=0A=
},_disconnect:function(_559){=0A=
if(!_559[3]){=0A=
return;=0A=
}=0A=
var src=3D_559[0];=0A=
var sig=3D_559[1];=0A=
var _560=3D_559[2];=0A=
if(src.removeEventListener){=0A=
src.removeEventListener(sig.substr(2),_560,false);=0A=
}else{=0A=
if(src.detachEvent){=0A=
src.detachEvent(sig,_560);=0A=
}else{=0A=
throw new Error("'src' must be a DOM element");=0A=
}=0A=
}=0A=
},disconnect:function(_561){=0A=
var self=3DMochiKit.Signal;=0A=
var _562=3Dself._observers;=0A=
var m=3DMochiKit.Base;=0A=
if(arguments.length>1){=0A=
var src=3DMochiKit.DOM.getElement(arguments[0]);=0A=
var sig=3Darguments[1];=0A=
var obj=3Darguments[2];=0A=
var func=3Darguments[3];=0A=
for(var i=3D_562.length-1;i>=3D0;i--){=0A=
var o=3D_562[i];=0A=
if(o[0]=3D=3D=3Dsrc&&o[1]=3D=3D=3Dsig&&o[4]=3D=3D=3Dobj&&o[5]=3D=3D=3Dfun=
c){=0A=
self._disconnect(o);=0A=
_562.splice(i,1);=0A=
return true;=0A=
}=0A=
}=0A=
}else{=0A=
var idx=3Dm.findIdentical(_562,_561);=0A=
if(idx>=3D0){=0A=
self._disconnect(_561);=0A=
_562.splice(idx,1);=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},disconnectAll:function(src,sig){=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var m=3DMochiKit.Base;=0A=
var _563=3Dm.flattenArguments(m.extend(null,arguments,1));=0A=
var self=3DMochiKit.Signal;=0A=
var _564=3Dself._disconnect;=0A=
var _565=3Dself._observers;=0A=
if(_563.length=3D=3D=3D0){=0A=
for(var i=3D_565.length-1;i>=3D0;i--){=0A=
var _566=3D_565[i];=0A=
if(_566[0]=3D=3D=3Dsrc){=0A=
_564(_566);=0A=
_565.splice(i,1);=0A=
}=0A=
}=0A=
}else{=0A=
var sigs=3D{};=0A=
for(var i=3D0;i<_563.length;i++){=0A=
sigs[_563[i]]=3Dtrue;=0A=
}=0A=
for(var i=3D_565.length-1;i>=3D0;i--){=0A=
var _566=3D_565[i];=0A=
if(_566[0]=3D=3D=3Dsrc&&_566[1] in sigs){=0A=
_564(_566);=0A=
_565.splice(i,1);=0A=
}=0A=
}=0A=
}=0A=
},signal:function(src,sig){=0A=
var _568=3DMochiKit.Signal._observers;=0A=
src=3DMochiKit.DOM.getElement(src);=0A=
var args=3DMochiKit.Base.extend(null,arguments,2);=0A=
var _569=3D[];=0A=
for(var i=3D0;i<_568.length;i++){=0A=
var _570=3D_568[i];=0A=
if(_570[0]=3D=3D=3Dsrc&&_570[1]=3D=3D=3Dsig){=0A=
try{=0A=
_570[2].apply(src,args);=0A=
}=0A=
catch(e){=0A=
_569.push(e);=0A=
}=0A=
}=0A=
}=0A=
if(_569.length=3D=3D1){=0A=
throw _569[0];=0A=
}else{=0A=
if(_569.length>1){=0A=
var e=3Dnew Error("Multiple errors thrown in handling 'sig', see errors =
property");=0A=
e.errors=3D_569;=0A=
throw e;=0A=
}=0A=
}=0A=
}});=0A=
MochiKit.Signal.EXPORT_OK=3D[];=0A=
MochiKit.Signal.EXPORT=3D["connect","disconnect","signal","disconnectAll"=
];=0A=
MochiKit.Signal.__new__=3Dfunction(win){=0A=
var m=3DMochiKit.Base;=0A=
this._document=3Ddocument;=0A=
this._window=3Dwin;=0A=
try{=0A=
this.connect(window,"onunload",this._unloadCache);=0A=
}=0A=
catch(e){=0A=
}=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
m.nameFunctions(this);=0A=
};=0A=
MochiKit.Signal.__new__(this);=0A=
if(!MochiKit.__compat__){=0A=
connect=3DMochiKit.Signal.connect;=0A=
disconnect=3DMochiKit.Signal.disconnect;=0A=
disconnectAll=3DMochiKit.Signal.disconnectAll;=0A=
signal=3DMochiKit.Signal.signal;=0A=
}=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Signal);=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.Visual");=0A=
dojo.require("MochiKit.Base");=0A=
dojo.require("MochiKit.DOM");=0A=
dojo.require("MochiKit.Color");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
JSAN.use("MochiKit.Color",[]);=0A=
}=0A=
try{=0A=
if(typeof (MochiKit.Base)=3D=3D"undefined"||typeof =
(MochiKit.DOM)=3D=3D"undefined"||typeof =
(MochiKit.Color)=3D=3D"undefined"){=0A=
throw "";=0A=
}=0A=
}=0A=
catch(e){=0A=
throw "MochiKit.Visual depends on MochiKit.Base, MochiKit.DOM and =
MochiKit.Color!";=0A=
}=0A=
if(typeof (MochiKit.Visual)=3D=3D"undefined"){=0A=
MochiKit.Visual=3D{};=0A=
}=0A=
MochiKit.Visual.NAME=3D"MochiKit.Visual";=0A=
MochiKit.Visual.VERSION=3D"1.3.1";=0A=
MochiKit.Visual.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.Visual.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.Visual._RoundCorners=3Dfunction(e,_571){=0A=
e=3DMochiKit.DOM.getElement(e);=0A=
this._setOptions(_571);=0A=
if(this.options.__unstable__wrapElement){=0A=
e=3Dthis._doWrap(e);=0A=
}=0A=
var _572=3Dthis.options.color;=0A=
var C=3DMochiKit.Color.Color;=0A=
if(this.options.color=3D=3D"fromElement"){=0A=
_572=3DC.fromBackground(e);=0A=
}else{=0A=
if(!(_572 instanceof C)){=0A=
_572=3DC.fromString(_572);=0A=
}=0A=
}=0A=
this.isTransparent=3D(_572.asRGB().a<=3D0);=0A=
var _574=3Dthis.options.bgColor;=0A=
if(this.options.bgColor=3D=3D"fromParent"){=0A=
_574=3DC.fromBackground(e.offsetParent);=0A=
}else{=0A=
if(!(_574 instanceof C)){=0A=
_574=3DC.fromString(_574);=0A=
}=0A=
}=0A=
this._roundCornersImpl(e,_572,_574);=0A=
};=0A=
MochiKit.Visual._RoundCorners.prototype=3D{_doWrap:function(e){=0A=
var _575=3De.parentNode;=0A=
var doc=3DMochiKit.DOM.currentDocument();=0A=
if(typeof =
(doc.defaultView)=3D=3D"undefined"||doc.defaultView=3D=3D=3Dnull){=0A=
return e;=0A=
}=0A=
var _576=3Ddoc.defaultView.getComputedStyle(e,null);=0A=
if(typeof (_576)=3D=3D"undefined"||_576=3D=3D=3Dnull){=0A=
return e;=0A=
}=0A=
var =
_577=3DMochiKit.DOM.DIV({"style":{display:"block",marginTop:_576.getPrope=
rtyValue("padding-top"),marginRight:_576.getPropertyValue("padding-right"=
),marginBottom:_576.getPropertyValue("padding-bottom"),marginLeft:_576.ge=
tPropertyValue("padding-left"),padding:"0px"}});=0A=
_577.innerHTML=3De.innerHTML;=0A=
e.innerHTML=3D"";=0A=
e.appendChild(_577);=0A=
return e;=0A=
},_roundCornersImpl:function(e,_578,_579){=0A=
if(this.options.border){=0A=
this._renderBorder(e,_579);=0A=
}=0A=
if(this._isTopRounded()){=0A=
this._roundTopCorners(e,_578,_579);=0A=
}=0A=
if(this._isBottomRounded()){=0A=
this._roundBottomCorners(e,_578,_579);=0A=
}=0A=
},_renderBorder:function(el,_580){=0A=
var _581=3D"1px solid "+this._borderColor(_580);=0A=
var _582=3D"border-left: "+_581;=0A=
var _583=3D"border-right: "+_581;=0A=
var _584=3D"style=3D'"+_582+";"+_583+"'";=0A=
el.innerHTML=3D"<div "+_584+">"+el.innerHTML+"</div>";=0A=
},_roundTopCorners:function(el,_585,_586){=0A=
var _587=3Dthis._createCorner(_586);=0A=
for(var i=3D0;i<this.options.numSlices;i++){=0A=
_587.appendChild(this._createCornerSlice(_585,_586,i,"top"));=0A=
}=0A=
el.style.paddingTop=3D0;=0A=
el.insertBefore(_587,el.firstChild);=0A=
},_roundBottomCorners:function(el,_588,_589){=0A=
var _590=3Dthis._createCorner(_589);=0A=
for(var i=3D(this.options.numSlices-1);i>=3D0;i--){=0A=
_590.appendChild(this._createCornerSlice(_588,_589,i,"bottom"));=0A=
}=0A=
el.style.paddingBottom=3D0;=0A=
el.appendChild(_590);=0A=
},_createCorner:function(_591){=0A=
var dom=3DMochiKit.DOM;=0A=
return dom.DIV({style:{backgroundColor:_591.toString()}});=0A=
},_createCornerSlice:function(_592,_593,n,_594){=0A=
var _595=3DMochiKit.DOM.SPAN();=0A=
var _596=3D_595.style;=0A=
_596.backgroundColor=3D_592.toString();=0A=
_596.display=3D"block";=0A=
_596.height=3D"1px";=0A=
_596.overflow=3D"hidden";=0A=
_596.fontSize=3D"1px";=0A=
var _597=3Dthis._borderColor(_592,_593);=0A=
if(this.options.border&&n=3D=3D=3D0){=0A=
_596.borderTopStyle=3D"solid";=0A=
_596.borderTopWidth=3D"1px";=0A=
_596.borderLeftWidth=3D"0px";=0A=
_596.borderRightWidth=3D"0px";=0A=
_596.borderBottomWidth=3D"0px";=0A=
_596.height=3D"0px";=0A=
_596.borderColor=3D_597.toString();=0A=
}else{=0A=
if(_597){=0A=
_596.borderColor=3D_597.toString();=0A=
_596.borderStyle=3D"solid";=0A=
_596.borderWidth=3D"0px 1px";=0A=
}=0A=
}=0A=
if(!this.options.compact&&(n=3D=3D(this.options.numSlices-1))){=0A=
_596.height=3D"2px";=0A=
}=0A=
this._setMargin(_595,n,_594);=0A=
this._setBorder(_595,n,_594);=0A=
return _595;=0A=
},_setOptions:function(_598){=0A=
this.options=3D{corners:"all",color:"fromElement",bgColor:"fromParent",bl=
end:true,border:false,compact:false,__unstable__wrapElement:false};=0A=
MochiKit.Base.update(this.options,_598);=0A=
this.options.numSlices=3D(this.options.compact?2:4);=0A=
},_whichSideTop:function(){=0A=
var _599=3Dthis.options.corners;=0A=
if(this._hasString(_599,"all","top")){=0A=
return "";=0A=
}=0A=
var _600=3D(_599.indexOf("tl")!=3D-1);=0A=
var _601=3D(_599.indexOf("tr")!=3D-1);=0A=
if(_600&&_601){=0A=
return "";=0A=
}=0A=
if(_600){=0A=
return "left";=0A=
}=0A=
if(_601){=0A=
return "right";=0A=
}=0A=
return "";=0A=
},_whichSideBottom:function(){=0A=
var _602=3Dthis.options.corners;=0A=
if(this._hasString(_602,"all","bottom")){=0A=
return "";=0A=
}=0A=
var _603=3D(_602.indexOf("bl")!=3D-1);=0A=
var _604=3D(_602.indexOf("br")!=3D-1);=0A=
if(_603&&_604){=0A=
return "";=0A=
}=0A=
if(_603){=0A=
return "left";=0A=
}=0A=
if(_604){=0A=
return "right";=0A=
}=0A=
return "";=0A=
},_borderColor:function(_605,_606){=0A=
if(_605=3D=3D"transparent"){=0A=
return _606;=0A=
}else{=0A=
if(this.options.border){=0A=
return this.options.border;=0A=
}else{=0A=
if(this.options.blend){=0A=
return _606.blendedColor(_605);=0A=
}=0A=
}=0A=
}=0A=
return "";=0A=
},_setMargin:function(el,n,_607){=0A=
var _608=3Dthis._marginSize(n)+"px";=0A=
var =
_609=3D(_607=3D=3D"top"?this._whichSideTop():this._whichSideBottom());=0A=
var _610=3Del.style;=0A=
if(_609=3D=3D"left"){=0A=
_610.marginLeft=3D_608;=0A=
_610.marginRight=3D"0px";=0A=
}else{=0A=
if(_609=3D=3D"right"){=0A=
_610.marginRight=3D_608;=0A=
_610.marginLeft=3D"0px";=0A=
}else{=0A=
_610.marginLeft=3D_608;=0A=
_610.marginRight=3D_608;=0A=
}=0A=
}=0A=
},_setBorder:function(el,n,_611){=0A=
var _612=3Dthis._borderSize(n)+"px";=0A=
var =
_613=3D(_611=3D=3D"top"?this._whichSideTop():this._whichSideBottom());=0A=
var _614=3Del.style;=0A=
if(_613=3D=3D"left"){=0A=
_614.borderLeftWidth=3D_612;=0A=
_614.borderRightWidth=3D"0px";=0A=
}else{=0A=
if(_613=3D=3D"right"){=0A=
_614.borderRightWidth=3D_612;=0A=
_614.borderLeftWidth=3D"0px";=0A=
}else{=0A=
_614.borderLeftWidth=3D_612;=0A=
_614.borderRightWidth=3D_612;=0A=
}=0A=
}=0A=
},_marginSize:function(n){=0A=
if(this.isTransparent){=0A=
return 0;=0A=
}=0A=
var o=3Dthis.options;=0A=
if(o.compact&&o.blend){=0A=
var _615=3D[1,0];=0A=
return _615[n];=0A=
}else{=0A=
if(o.compact){=0A=
var _616=3D[2,1];=0A=
return _616[n];=0A=
}else{=0A=
if(o.blend){=0A=
var _617=3D[3,2,1,0];=0A=
return _617[n];=0A=
}else{=0A=
var _618=3D[5,3,2,1];=0A=
return _618[n];=0A=
}=0A=
}=0A=
}=0A=
},_borderSize:function(n){=0A=
var o=3Dthis.options;=0A=
var _619;=0A=
if(o.compact&&(o.blend||this.isTransparent)){=0A=
return 1;=0A=
}else{=0A=
if(o.compact){=0A=
_619=3D[1,0];=0A=
}else{=0A=
if(o.blend){=0A=
_619=3D[2,1,1,1];=0A=
}else{=0A=
if(o.border){=0A=
_619=3D[0,2,0,0];=0A=
}else{=0A=
if(this.isTransparent){=0A=
_619=3D[5,3,2,1];=0A=
}else{=0A=
return 0;=0A=
}=0A=
}=0A=
}=0A=
}=0A=
}=0A=
return _619[n];=0A=
},_hasString:function(str){=0A=
for(var i=3D1;i<arguments.length;i++){=0A=
if(str.indexOf(arguments[i])!=3D-1){=0A=
return true;=0A=
}=0A=
}=0A=
return false;=0A=
},_isTopRounded:function(){=0A=
return this._hasString(this.options.corners,"all","top","tl","tr");=0A=
},_isBottomRounded:function(){=0A=
return this._hasString(this.options.corners,"all","bottom","bl","br");=0A=
},_hasSingleTextChild:function(el){=0A=
return (el.childNodes.length=3D=3D1&&el.childNodes[0].nodeType=3D=3D3);=0A=
}};=0A=
MochiKit.Visual.roundElement=3Dfunction(e,_620){=0A=
new MochiKit.Visual._RoundCorners(e,_620);=0A=
};=0A=
MochiKit.Visual.roundClass=3Dfunction(_621,_622,_623){=0A=
var _624=3DMochiKit.DOM.getElementsByTagAndClassName(_621,_622);=0A=
for(var i=3D0;i<_624.length;i++){=0A=
MochiKit.Visual.roundElement(_624[i],_623);=0A=
}=0A=
};=0A=
MochiKit.Visual.Color=3DMochiKit.Color.Color;=0A=
MochiKit.Visual.getElementsComputedStyle=3DMochiKit.DOM.computedStyle;=0A=
MochiKit.Visual.__new__=3Dfunction(){=0A=
var m=3DMochiKit.Base;=0A=
m.nameFunctions(this);=0A=
this.EXPORT_TAGS=3D{":common":this.EXPORT,":all":m.concat(this.EXPORT,thi=
s.EXPORT_OK)};=0A=
};=0A=
MochiKit.Visual.EXPORT=3D["roundElement","roundClass"];=0A=
MochiKit.Visual.EXPORT_OK=3D[];=0A=
MochiKit.Visual.__new__();=0A=
MochiKit.Base._exportSymbols(this,MochiKit.Visual);=0A=
if(typeof (MochiKit)=3D=3D"undefined"){=0A=
MochiKit=3D{};=0A=
}=0A=
if(typeof (MochiKit.MochiKit)=3D=3D"undefined"){=0A=
MochiKit.MochiKit=3D{};=0A=
}=0A=
MochiKit.MochiKit.NAME=3D"MochiKit.MochiKit";=0A=
MochiKit.MochiKit.VERSION=3D"1.3.1";=0A=
MochiKit.MochiKit.__repr__=3Dfunction(){=0A=
return "["+this.NAME+" "+this.VERSION+"]";=0A=
};=0A=
MochiKit.MochiKit.toString=3Dfunction(){=0A=
return this.__repr__();=0A=
};=0A=
MochiKit.MochiKit.SUBMODULES=3D["Base","Iter","Logging","DateTime","Forma=
t","Async","DOM","LoggingPane","Color","Signal","Visual"];=0A=
if(typeof (JSAN)!=3D"undefined"||typeof (dojo)!=3D"undefined"){=0A=
if(typeof (dojo)!=3D"undefined"){=0A=
dojo.provide("MochiKit.MochiKit");=0A=
dojo.require("MochiKit.*");=0A=
}=0A=
if(typeof (JSAN)!=3D"undefined"){=0A=
JSAN.use("MochiKit.Base",[]);=0A=
JSAN.use("MochiKit.Iter",[]);=0A=
JSAN.use("MochiKit.Logging",[]);=0A=
JSAN.use("MochiKit.DateTime",[]);=0A=
JSAN.use("MochiKit.Format",[]);=0A=
JSAN.use("MochiKit.Async",[]);=0A=
JSAN.use("MochiKit.DOM",[]);=0A=
JSAN.use("MochiKit.LoggingPane",[]);=0A=
JSAN.use("MochiKit.Color",[]);=0A=
JSAN.use("MochiKit.Signal",[]);=0A=
JSAN.use("MochiKit.Visual",[]);=0A=
}=0A=
(function(){=0A=
var _625=3DMochiKit.Base.extend;=0A=
var self=3DMochiKit.MochiKit;=0A=
var _626=3Dself.SUBMODULES;=0A=
var _627=3D[];=0A=
var _628=3D[];=0A=
var _629=3D{};=0A=
var i,k,m,all;=0A=
for(i=3D0;i<_626.length;i++){=0A=
m=3DMochiKit[_626[i]];=0A=
_625(_627,m.EXPORT);=0A=
_625(_628,m.EXPORT_OK);=0A=
for(k in m.EXPORT_TAGS){=0A=
_629[k]=3D_625(_629[k],m.EXPORT_TAGS[k]);=0A=
}=0A=
all=3Dm.EXPORT_TAGS[":all"];=0A=
if(!all){=0A=
all=3D_625(null,m.EXPORT,m.EXPORT_OK);=0A=
}=0A=
var j;=0A=
for(j=3D0;j<all.length;j++){=0A=
k=3Dall[j];=0A=
self[k]=3Dm[k];=0A=
}=0A=
}=0A=
self.EXPORT=3D_627;=0A=
self.EXPORT_OK=3D_628;=0A=
self.EXPORT_TAGS=3D_629;=0A=
}());=0A=
}else{=0A=
if(typeof (MochiKit.__compat__)=3D=3D"undefined"){=0A=
MochiKit.__compat__=3Dtrue;=0A=
}=0A=
(function(){=0A=
var _630=3Ddocument.getElementsByTagName("script");=0A=
var =
_631=3D"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";=0A=
var base=3Dnull;=0A=
var _632=3Dnull;=0A=
var _633=3D{};=0A=
var i;=0A=
for(i=3D0;i<_630.length;i++){=0A=
var src=3D_630[i].getAttribute("src");=0A=
if(!src){=0A=
continue;=0A=
}=0A=
_633[src]=3Dtrue;=0A=
if(src.match(/MochiKit.js$/)){=0A=
base=3Dsrc.substring(0,src.lastIndexOf("MochiKit.js"));=0A=
_632=3D_630[i];=0A=
}=0A=
}=0A=
if(base=3D=3D=3Dnull){=0A=
return;=0A=
}=0A=
var _634=3DMochiKit.MochiKit.SUBMODULES;=0A=
for(var i=3D0;i<_634.length;i++){=0A=
if(MochiKit[_634[i]]){=0A=
continue;=0A=
}=0A=
var uri=3Dbase+_634[i]+".js";=0A=
if(uri in _633){=0A=
continue;=0A=
}=0A=
if(document.documentElement&&document.documentElement.namespaceURI=3D=3D_=
631){=0A=
var s=3Ddocument.createElementNS(_631,"script");=0A=
s.setAttribute("id","MochiKit_"+base+_634[i]);=0A=
s.setAttribute("src",uri);=0A=
s.setAttribute("type","application/x-javascript");=0A=
_632.parentNode.appendChild(s);=0A=
}else{=0A=
document.write("<script src=3D\""+uri+"\" =
type=3D\"text/javascript\"></script>");=0A=
}=0A=
}=0A=
})();=0A=
}=0A=
=0A=
=0A=

------=_NextPart_000_0007_01C6F7DF.78FC5BD0--
