<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XimuraBase</name>
    </assembly>
    <members>
        <member name="T:Ximura.XimuraServiceStatusAction">
            <summary>
            This enumerations is used to signal an action for the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Start">
            <summary>
            Start the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Stop">
            <summary>
            Stop the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Pause">
            <summary>
            Pause the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Continue">
            <summary>
            Continue the collection
            </summary>
        </member>
        <member name="T:Ximura.IXimuraServiceParentSettings">
            <summary>
            This interface is implemented by commands that can be nested in other commands.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraServiceParentSettings.ParentCommandName">
            <summary>
            The parent command service name.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPerformanceAgent">
            <summary>
            The IXimuraPerformanceAgent interface is implemented by class that recieve 
            performance information from the performance counters.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraFolder">
            <summary>
            IXimuraFolder is the facade interface that extends the content class and allows it to 
            include additional content and parameters.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraParameter">
            <summary>
            The IXimuraParameter interface is used by the parameter element. 
            The interface is defined from IDictionary and is based on a the Composite design pattern.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Add(System.String,System.Object)">
            <summary>
            This method will add a new parameter based on the key and the value.
            </summary>
            <param name="key">The key of the new parameter</param>
            <param name="Value">The value of the new parameter</param>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Add(System.String,Ximura.Data.IXimuraParameter)">
            <summary>
            This method will append an existing parameter to the parameter collection.
            </summary>
            <param name="key">The key you wish to use for this parameter in the collection</param>
            <param name="Value">The parameter.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Contains(System.String)">
            <summary>
            This method checks whether a key exists in the parameter collection.
            </summary>
            <param name="key">The key to check</param>
            <returns>Returns true if the key exist in the folder collection</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Contains(Ximura.Data.IXimuraParameter)">
            <summary>
            This method checks whether a parameter exists within the parameter collection.
            </summary>
            <param name="childParameter">The child parameter.</param>
            <returns>Returns true if the parameter exists</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Remove(System.String)">
            <summary>
            This method removes a parameter from the collection based on the key passed.
            </summary>
            <param name="key">The key of the parameter to remove</param>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.Remove(Ximura.Data.IXimuraParameter)">
            <summary>
            This method removes a parameter from the collection based on the parameter passed.
            </summary>
            <param name="childParameter">The child parameter to be removed.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.AddParameter(System.String,System.Object)">
            <summary>
            This method creates a new parameter and adds it to the collection.
            </summary>
            <param name="Key">The parameter key.</param>
            <param name="Value">The parameter value.</param>
            <returns>This method returns the newly created parameter.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.SetAsRootParameter">
            <summary>
            This method sets the parameter as the root parameter within a collection.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.IsRootParameter">
            <summary>
            This method checks whether the parameter is the root parameter within the collection.
            </summary>
            <returns>Returns true if the parameter is the root parameter.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.HasChildParameters">
            <summary>
            This method checks whether the parameter has any children.
            </summary>
            <returns>Returns true if the parameter has children.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraParameter.ParameterValue(System.String)">
            <summary>
            This helper method retieves a parameter value from the collection.
            </summary>
            <param name="key">The key to retrieve.</param>
            <returns>Returns the valus of the parameter.</returns>
        </member>
        <member name="P:Ximura.Data.IXimuraParameter.Key">
            <summary>
            This is the root key of the parameter.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraParameter.Value">
            <summary>
            This is the root value of the paramter. A parameter can contain any type of object.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraParameter.Item(System.String)">
            <summary>
            This is the default enumerator for the parameter and will return the value of the 
            sub-paramters based on the key supplied.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraFolder.ContentCount">
            <summary>
            This property returns the count of the folder content objects.
            </summary>
            <returns>The number of Content object.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraFolder.ParameterCount">
            <summary>
            This property returns the count of the child parameter object.
            </summary>
            <returns>The number of child parameter objects.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraFolder.Add(System.String,Ximura.Data.IXimuraContent)">
            <summary>
            This method add a content object to the Folder collection.
            </summary>
            <param name="Key">The content key.</param>
            <param name="theContent">The content object to add.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraFolder.Contains(Ximura.Data.IXimuraContent)">
            <summary>
            This method checks whether the Folder contains this Content object.
            </summary>
            <param name="theContent">The content object to check</param>
            <returns>Returns true is the content object is in the Folder</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraFolder.Remove(Ximura.Data.IXimuraContent)">
            <summary>
            This method removes a content object from the Folder collection.
            </summary>
            <param name="theContent">The content object to remove.</param>
        </member>
        <member name="P:Ximura.Data.IXimuraFolder.ContentKeys">
            <summary>
            This property returns a collection of Content keys.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraFolder.ContentValues">
            <summary>
            This property returns a collection of Content values.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraFolder.ParameterKeys">
            <summary>
            This property returns a collection of Parameters keys.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraFolder.ParameterValues">
            <summary>
            This property returns a collection of Parameters values.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraCommandScheduleProcessConfigSH">
            <summary>
            This is the default interface for a scheduler config section handler
            </summary>
        </member>
        <member name="M:Ximura.IXimuraCommandScheduleProcessConfigSH.GetNextSchedules(System.Double)">
            <summary>
            Get Next Schedules within interval(in minutes)
            </summary>
            <param name="interval">interval in minutes</param>
            <returns>return all upcoming schedules in time/schedule pairs</returns>
        </member>
        <member name="T:Ximura.IXimuraCommandProcessConfigSH">
            <summary>
            This is the default interface for an application config section handler
            </summary>
        </member>
        <member name="T:Ximura.IXimuraConfigSH">
            <summary>
            This is the default interface for an application config section handler
            </summary>
        </member>
        <member name="M:Ximura.IXimuraConfigSH.GetSetting(System.String)">
            <summary>
            Get the config setting by specific Type
            </summary>
            <param name="Type">setting type</param>
            <returns>setting value</returns>
        </member>
        <member name="M:Ximura.IXimuraConfigSH.GetSettingExtended(System.String,System.String)">
            <summary>
            This method returns the extended setting object or null if the type 
            specified does not exist.
            </summary>
            <param name="Type">The name of the type.</param>
            <param name="subType">The name of the subtype.</param>
            <returns>The settings object containing the specific settings or null if the object can not be found.</returns>
        </member>
        <member name="P:Ximura.IXimuraConfigSH.Enabled">
            <summary>
            This property determines whether the command is enabled.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraCommandProcessConfigSH.getPasswordHash(System.Byte[])">
            <summary>
            Returns the hash of the password based on the session seed value
            </summary>
            <param name="seed">The session seed.</param>
            <returns>The hash of the password.</returns>
        </member>
        <member name="P:Ximura.IXimuraCommandProcessConfigSH.UserName">
            <summary>
            The username of the process.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommandProcessConfigSH.UserRealm">
            <summary>
            This is the realm for the user to connect to.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommandProcessConfigSH.UserSessionRealm">
            <summary>
            This is the realm for the user to connect to.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommandProcessConfigSH.RequiresProcessSession">
            <summary>
            This method determines whether the process command requires a process session.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommandProcessConfigSH.SecurityData">
            <summary>
            Returns the security data.
            </summary>
        </member>
        <member name="T:Ximura.Command.RQRSEnvelopeHelper">
            <summary>
            The RQRSEnvelopeHelper is used to centralize pooling for the RQRSContract objects.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.#cctor">
            <summary>
            This is the static constuctor for the class.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Start(Ximura.IXimuraPoolManager)">
            <summary>
            This method starts the pooling.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Stop">
            <summary>
            This method stops the pooling and clears any remaining objects..
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get(Ximura.Command.EnvelopeAddress)">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract, and the request id is set to new ID.
            </summary>
            <param name="address">The envelope address. 
            This will be set to the EnvelopeAddress property in the envelope.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetCallback(Ximura.Command.EnvelopeAddress)">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract, and the request id is set to new ID.
            </summary>
            <param name="address">The envelope address. 
            This will be set to the EnvelopeAddress property in the envelope.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get(Ximura.Command.EnvelopeAddress,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract.
            </summary>
            <param name="address">The envelope address. This will be set to the EnvelopeAddress property in the envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetCallback(Ximura.Command.EnvelopeAddress,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract.
            </summary>
            <param name="address">The envelope address. This will be set to the EnvelopeAddress property in the envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get(Ximura.Command.EnvelopeAddress,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address.
            </summary>
            <param name="address">The envelope address.</param>
            <param name="setAddress">If this parameter is set to true the addess will be set to the Envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetCallback(Ximura.Command.EnvelopeAddress,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address.
            </summary>
            <param name="address">The envelope address.</param>
            <param name="setAddress">If this parameter is set to true the addess will be set to the Envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get(System.Guid)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            command type.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetCallback(System.Guid)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            command type.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get(System.Type)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            object type.
            </summary>
            <param name="objectType">The envelope type.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.Get``2">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            object type.
            </summary>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.ResolveType(System.Guid)">
            <summary>
            This method returns the envelope request type for registered commands.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns the type, or null if the command cannot be found.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.ResolveTypeCallback(System.Guid)">
            <summary>
            This method resolves the envelope callback type for registered commands.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns the type, or null if the command cannot be found.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetPoolManager(System.Guid)">
            <summary>
            This method returns the pool manager based on the command ID type.
            </summary>
            <param name="commandID">The command ID to resolve.</param>
            <returns>Returns the pool, or null if the pool cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetPoolManagerCallback(System.Guid)">
            <summary>
            This method returns the callback pool manager based on the command ID type.
            </summary>
            <param name="commandID">The command ID to resolve.</param>
            <returns>Returns the pool, or null if the pool cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetPoolManager(System.Type)">
            <summary>
            This method returns the pool manager based on the object type of the envelope.
            </summary>
            <param name="objectType">The envelope object type.</param>
            <returns>Returns a pool manager object or null if the type is null or cannot be resolved..</returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetPoolManagerInternal(System.Type,System.Boolean)">
            <summary>
            This method returns a unbuffered pool manager for the type specified.
            </summary>
            <param name="objectType">The envelope type required.</param>
            <param name="buffered">This parameter specifies whether the pool should be wrapped
            around a buffered wrapper to disable the Clear() method.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.GetPoolManagerInternal``2(System.Boolean)">
            <summary>
            This method returns a unbuffered pool manager for the type specified.
            </summary>
            <param name="objectType">The envelope type required.</param>
            <param name="buffered">This parameter specifies whether the pool should be wrapped
            around a buffered wrapper to disable the Clear() method.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Command.RQRSEnvelopeHelper.RegisterCommand(System.Guid,System.String,System.Type,System.Type)">
            <summary>
            This method registers the command in the object pool. If the object pool type does not exist the command
            creates a new pool.
            </summary>
            <param name="commandID">The command ID to register.</param>
            <param name="commandName">This is the name of the command which is used by the performance counters.</param>
            <param name="objectType">The envelope type to register.</param>
            <param name="objectCallbackType">The envelope callback type to register.</param>
        </member>
        <member name="T:Ximura.PoolBase`1">
            <summary>
            The pool object is used to hold a collection of object that can be used for re-use.
            </summary>
            <typeparam name="T">The object pool type.</typeparam>
        </member>
        <member name="T:Ximura.IXimuraPool`1">
            <summary>
            This interface is implemented by the generic object pool
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPool">
            <summary>
            This interface is implemented by the object pool
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPool.Get">
            <summary>
            This method returns an object of the specified type.
            </summary>
            <returns>An object of the pool type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object of the specified type, with the deserialized data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the pool type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool.Return(System.Object)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.IXimuraPool.Clear">
            <summary>
            This method is used to clear the pool of all objects.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.IsBuffered">
            <summary>
            This property indicates whether the pool is buffered. Buffered pools are shared amongst multiple 
            clients and do not implement the clear method.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.PoolManager">
            <summary>
            This property is used to set the pool manager for the specific pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.IXimuraPoolInitialize`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolInitialize`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="F:Ximura.PoolBase`1.mAvailable">
            <summary>
            This queue contains a list of available object waiting to be assigned.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor sets the pool create parameters.
            </summary>
            <param name="min">The initial set of objects.</param>
            <param name="max">The maximum set of object for the pool. Set this to -1 is you do not 
            wish to set a maximum value.</param>
            <param name="prefer">The prefered number of object for the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.InitializePool">
            <summary>
            This method initiates the object pool with the required number of objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.Dispose(System.Boolean)">
            <summary>
            This is the component model Dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ximura.PoolBase`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.ResetPoolObject(`0)">
            <summary>
            This method is used to reset the pool object. You should override this method if
            you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.ResetPoolObject(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is used to reset the pool object from the serialization information.
            You should override this method if you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.Ximura#IXimuraPool#Get">
            <summary>
            This is the default get() accessor.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Return(System.Object)">
            <summary>
            This method returns an object to the pool as an object and not being of a specific type.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.InternalAvailable">
            <summary>
            This method returns the internal available property.
            </summary>
            <returns>Returns true if the pool can return objects.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.Clear">
            <summary>
            This method is used to clear the pool of all objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.ClearInternal">
            <summary>
            This method removes all waiting objects in the pool. If the objects support IDisposable
            the objects will be disposed.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.StatisticsUpdate">
            <summary>
            This method will update any performance counters.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.StatisticsInitialize">
            <summary>
            This method will initialize any performance counters.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.IsBuffered">
            <summary>
            This property indicates whether the pool is buffered. Buffered pools are shared amongst multiple 
            clients and do not implement the clear method.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.PoolManager">
            <summary>
            If this property is set, it will be passed on to objects that implement the IXimuraPoolManagerDirectAccess
            interface to allow them to get additional pool objects of different types for their own internal use.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Stats">
            <summary>
            This property returns a summary of the stats for the collection.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.StatsInternalNoLock">
            <summary>
            This method returns a string
            </summary>
        </member>
        <member name="T:Ximura.Pool`1">
            <summary>
            This is the base object pool.
            </summary>
            <typeparam name="T">The pool type.</typeparam>
        </member>
        <member name="T:Ximura.PoolInvocator`1">
            <summary>
            This is the base object pool. 
            </summary>
            <typeparam name="T">The pool type.</typeparam>
        </member>
        <member name="F:Ximura.PoolInvocator`1.mRemoteInvocator">
            <summary>
            This is the pool invocator that can be used to invoke a new object.
            </summary>
        </member>
        <member name="M:Ximura.PoolInvocator`1.#ctor(System.Func{`0})">
            <summary>
            The default constructor.
            </summary>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.PoolInvocator`1.#ctor(System.Func{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.PoolInvocator`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="M:Ximura.Pool`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Func{`0})">
            <summary>
            The default constructor.
            </summary>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Func{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.Pool`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="T:Ximura.Helper.ServiceEvent">
            <summary>
            This delegate is used by the Services to report back progress
            </summary>
        </member>
        <member name="T:Ximura.Helper.IXimuraServiceWithEvent">
            <summary>
            This interface is used by Ximura Service based component that wish to fire events for 
            service actions
            </summary>
        </member>
        <member name="T:Ximura.IXimuraService">
            <summary>
            This interface is used by Ximura Service based components.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Start">
            <summary>
            This method starts the service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Pause">
            <summary>
            This method pauses the service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Continue">
            <summary>
            This method continues a paused service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Stop">
            <summary>
            This method stops a running service
            </summary>
        </member>
        <member name="P:Ximura.IXimuraService.ServiceStatus">
            <summary>
            This method will return the current service status
            </summary>
        </member>
        <member name="P:Ximura.IXimuraService.ServiceEnabled">
            <summary>
            This property determines whether the component is enable and can start.
            </summary>
        </member>
        <member name="E:Ximura.Helper.IXimuraServiceWithEvent.ServiceStarted">
            <summary>
            This event will be fired when the service starts
            </summary>
        </member>
        <member name="E:Ximura.Helper.IXimuraServiceWithEvent.ServicePaused">
            <summary>
            This event will be fired when the service pauses
            </summary>
        </member>
        <member name="E:Ximura.Helper.IXimuraServiceWithEvent.ServiceResumed">
            <summary>
            This event will be fired when the service is resumed from a paused state
            </summary>
        </member>
        <member name="E:Ximura.Helper.IXimuraServiceWithEvent.ServiceStopped">
            <summary>
            This event will be fired when the service is stopped
            </summary>
        </member>
        <member name="T:Ximura.IXimuraComponentService">
            <summary>
            Summary description for IXimuraComponentService.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraComponentBase">
            <summary>
            This is the base interface supported by components that support the Ximura component architecture.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraServiceContainer">
            <summary>
            This interface provides extended functionality for the service based architecture.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraServiceContainer.AddService(System.Type,System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth the service should be promoted. Set this value to -1 if you require it to be unlimited.</param>
        </member>
        <member name="M:Ximura.IXimuraServiceContainer.GetService(System.Type,System.Int32)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="depth">The service depth. If this is set to -1 the depth is unlimited.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="T:Ximura.Data.DataContentLinkType">
            <summary>
            This is the linkage option for the DataContent
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentLinkType.NoLinkage">
            <summary>
            This object is not linked to any other object.
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentLinkType.MergeIfPresent">
            <summary>
            The data content is copied from another object in the model folder. Changes made to the
            data in this object will not be passed on to the linked object.
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentLinkType.Link">
            <summary>
            The entity is directly linked to another object in the model folder. Changes made to this
            object will be directly syncronised with the parent object.
            </summary>
        </member>
        <member name="T:Ximura.DJobType">
            <summary>
            This enumeration is the Dispatcher Job Types
            </summary>
        </member>
        <member name="F:Ximura.DJobType.Command">
            <summary>
            The job type is a command.
            </summary>
        </member>
        <member name="F:Ximura.DJobType.Callback">
            <summary>
            The job type is a straight call back.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraDataEntity">
            <summary>
            This interface is retired and is currently only used by old data
            entities.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraContent">
            <summary>
            IXimuraContent is the default interface for the content object.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraContentEntityPersistence">
            <summary>
            This interface implements the basic entity properties for persistence storage.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContentEntityPersistence.EntityType">
            <summary>
            This is the entity type used for searching.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContentEntityPersistence.EntitySubtype">
            <summary>
            This is the entity subtype used for searching
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContentEntityPersistence.EntityAQN">
            <summary>
            This is the assembly qualified name used for seaching. This
            may differ from the actual name as it will not have the specific
            version number to enable consistency across multiple version.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContentEntityPersistence.EntityName">
            <summary>
            This is the entity name used for search display.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContentEntityPersistence.EntityDescription">
            <summary>
            This is the entity description used for search display.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolableObjectDeserializable">
            <summary>
            This interface is implemented by poolable object that also support deserialization.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolableObject">
            <summary>
            This interface is implemented by poolable objects.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolableObject.Reset">
            <summary>
            This method resets the object in to its default state.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolableObject.CanPool">
            <summary>
            This property returns true if the object can pool. This allows inherited objects to turn
            off the ability to be pooled. By default, objects that implement this interface should
            return true if they wish to pool.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolableObject.TrackID">
            <summary>
            This property is used by the object pool for statistical tracking
            of the object through the system. This Guid should be created when the object
            is first created and should not change. The ID is independent of any data actually 
            stored in the object.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolableObjectDeserializable.Reset(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method resets the object in to the deserialized state specified in the info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Ximura.IXimuraPoolableObjectDeserializable.CanResetWithDeserialization">
            <summary>
            This propoerty indicates whether the object support a deserialization reset.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolReturnable">
            <summary>
            This interface is implemented by objects that are poolable, and in addition 
            can return themselves to the pool without the need for child objects to have a reference
            to the pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolReturnable.ObjectPoolReturn">
            <summary>
            This method returns the object to the pool
            </summary>
            <returns>Returns true if the object has been successfully returned to the pool.</returns>
        </member>
        <member name="P:Ximura.IXimuraPoolReturnable.ObjectPool">
            <summary>
            This property sets or gets the object pool for the object.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolReturnable.ObjectPoolCanReturn">
            <summary>
            This boolean property determines whether the object can be returned to the pool
            for reuse.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraContent.IsDirty">
            <summary>
            This is a public function that indicated whether the object
            internal data has been changed since it was created or last saved.
            </summary>
            <returns>A boolean value - true indicates the object has been changed.</returns>
        </member>
        <member name="P:Ximura.Data.IXimuraContent.TypeID">
            <summary>
            This is the Content Type ID.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContent.ID">
            <summary>
            This is the Content Instance ID.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContent.Version">
            <summary>
            This is the Content Version ID.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraContent.Dirty">
            <summary>
            This boolean property indicates whether the object has been changed.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraDataEntity.SatelliteEntity">
            <summary>
            This property returns true if the content is a satelite entity.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraDataEntity.GetDataSet">
            <summary>
            This method returns the internal dataset for the Data Entity
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraDataContentLoad.Load(System.Data.DataSet)">
            <summary> 
            This method loads the DataContent from a DataSet.
            </summary>
            <param name="data">The DataSet this content should hold.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraDataContentLoad.Load">
            <summary>
            This method is used to create a new entity.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraDataContentLoad.Load(System.Boolean)">
            <summary>
            This method is used to create a new entity.
            </summary>
            <param name="force">if this property is set to true the entity will discard any changes if set to true.</param>
            <returns>Returns true if a new entity was created.</returns>
        </member>
        <member name="T:Ximura.Data.DataContentSummaryType">
            <summary>
            The data content summary type.
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentSummaryType.Text">
            <summary>
            Summary should be in text format.
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentSummaryType.Html">
            <summary>
            Sumary should be in HTML format.
            </summary>
        </member>
        <member name="F:Ximura.Data.DataContentSummaryType.Custom">
            <summary>
            Summary is custom.
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppModuleAttribute">
            <summary>
            This attribute is used to define command properties.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppModuleAttribute.#ctor(System.String)">
            <summary>
            The XimuraAppCommandIDAttribute is used to uniquely identify a command within the Ximura system.
            </summary>
            <param name="ID">A string representation of a GUID, i.e. in the form 6364755B-97B9-4799-B8BC-3D98EB786C92</param>
        </member>
        <member name="M:Ximura.XimuraAppModuleAttribute.#ctor(System.String,System.String)">
            <summary>
            The XimuraAppCommandIDAttribute is used to uniquely identify a command within the Ximura system.
            </summary>
            <param name="ID">A string representation of a GUID, i.e. in the form 
            6364755B-97B9-4799-B8BC-3D98EB786C92</param>
            <param name="name">The friendly name of the command. 
            This will be used in the config file when parsing command set up paramters.</param>
        </member>
        <member name="M:Ximura.XimuraAppModuleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            The XimuraAppCommandIDAttribute is used to uniquely identify a command within the Ximura system.
            </summary>
            <param name="ID">A string representation of a GUID, i.e. in the form 
            6364755B-97B9-4799-B8BC-3D98EB786C92</param>
            <param name="name">The friendly name of the command. 
            This will be used in the config file when parsing command set up paramters.</param>
            <param name="configClass">The config class for the command.</param>
        </member>
        <member name="M:Ximura.XimuraAppModuleAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            The XimuraAppCommandIDAttribute is used to uniquely identify a command within the Ximura system.
            </summary>
            <param name="ID">A string representation of a GUID, i.e. in the form 
            6364755B-97B9-4799-B8BC-3D98EB786C92</param>
            <param name="name">The friendly name of the command. 
            This will be used in the config file when parsing command set up paramters.</param>
            <param name="configClass">The config class for the command.</param>
            <param name="description">The description for the command.</param>
        </member>
        <member name="P:Ximura.XimuraAppModuleAttribute.ID">
            <summary>
            The Guid of the module
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppModuleAttribute.Name">
            <summary>
            The name of the module. This is used to retrieve app settings.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppModuleAttribute.ConfigClass">
            <summary>
            This class returns the class type for the config settings class for the command.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppModuleAttribute.ForceConfigClass">
            <summary>
            This class returns the class type for the config settings class for the command.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppModuleAttribute.Description">
            <summary>
            The friendly description of the module.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraMessageStream">
            <summary>
            This interface is used to interface between the protocol and the message
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraMessageStreamLoad">
            <summary>
            This interface is used to load the message with its initial data.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraMessageLoad.CanLoad">
            <summary>
            This boolean property determines whether the message can be loaded.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraMessage.Direction">
            <summary>
            This property indicates the message direction.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraMessage.IsTerminator">
            <summary>
            This property indicates whether this section signals the end of the message.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraCommandPermissions">
            <summary>
            This interface determines the specific permissions that the command presents to the application.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraCommand">
            <summary>
            IXimuraCommand is the base interface for the command object.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommand.CommandID">
            <summary>
            The command unique identifier.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommand.CommandName">
            <summary>
            The command name. This is used in to the config file to retrieve the
            settings.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraCommand.CommandDescription">
            <summary>
            The command friendly description
            </summary>
        </member>
        <member name="T:Ximura.IXimuraCommandNotification">
            <summary>
            This interface is implemented by commands that support notification.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraCommandNotification.Notify(System.Type,System.Object)">
            <summary>
            This method is called when there is a system notification.
            </summary>
            <param name="notificationType">The notification object type.</param>
            <param name="notification">The notification object.</param>
        </member>
        <member name="P:Ximura.IXimuraCommandNotification.SupportsNotifications">
            <summary>
            This boolean property specifies that the object supports system notification.
            </summary>
        </member>
        <member name="T:Ximura.Helper.DateTimeHelper">
            <summary>
            Provide special functionality to deal with DateTime
            </summary>
        </member>
        <member name="M:Ximura.Helper.DateTimeHelper.GetWeekNumberInMonth(System.DateTime)">
            <summary>
            Obtain the week number of the date in the current month.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.DateTimeHelper.GetWeekOccuranceInMonth(System.DateTime)">
            <summary>
            Obtain the week occurance number in current month.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.DateTimeHelper.GetLastWeekNumberInMonth(System.DateTime)">
            <summary>
            Obtain the last week number of the current day of week in the current month
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.DateTimeHelper.GetLastWeekOccuranceInMonth(System.DateTime)">
            <summary>
            Obtain the last week occurance number of the current day of week in current month
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.DateTimeHelper.InBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Check if the verify date is equal or in between the interval start and end date.
            </summary>
            <param name="comparer"></param>
            <param name="intervalStart"></param>
            <param name="internalEnd"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.XimuraException">
            <summary>
            XimuraException is the root exception object for the Ximura system.
            </summary>
        </member>
        <member name="M:Ximura.XimuraException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Ximura.XimuraException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provides serialization functionality.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Ximura.XimuraException.LogException(Ximura.IXimuraLogging)">
            <summary>
            This is a shortcut to log the exception message to the Ximura Logging provider. 
            This may be overriden in derived classes to provide a more detailed breakdown.
            </summary>
            <param name="provider">The Ximura logging provider to log to.</param>
            <returns>A boolean value. True indicated that the message was successfully logged.</returns>
        </member>
        <member name="T:Ximura.ElementSite">
            <summary>
            ElementSite is used by the Ximura.Data component model to link elements
            within an aggreagate Content/Element object.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraAppSite">
            <summary>
            IXimuraAppSite is an interface that inherits from ISite and provides 
            specific component model method for the Ximura Application framework.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraAppSite.parent">
            <summary>
            An additional property which is the parent of the component
            </summary>
        </member>
        <member name="P:Ximura.IXimuraAppSite.ServiceContainer">
            <summary>
            The service container.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Component">
            <summary>
            This is the component.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Container">
            <summary>
            This is the container
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_bDesignMode">
            <summary>
            This is the internal variable that determines whether the 
            system is in design mode.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Name">
            <summary>
            This is the site instance name
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_theServices">
            <summary>
            This is the document service container.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_parent">
            <summary>
            This is the parent object that created collection
            </summary>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent)">
            <summary>
            This is a default constructor for the ElementSite
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer)">
            <summary>
            This constructor allows a service container to be set for the site
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer,System.String,System.Boolean)">
            <summary>
            This constructor
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
            <param name="Name">The name of the site</param>
            <param name="bDesignMode">
            A boolean value which specifies whether the 
            system is in design mode
            </param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer,System.String,System.Boolean,System.Object)">
            <summary>
            This constructor
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
            <param name="Name">The name of the site</param>
            <param name="bDesignMode"></param>
            <param name="parent">The parent object that created this component</param>
        </member>
        <member name="M:Ximura.ElementSite.GetService(System.Type)">
            <summary>
            This method returns an object that represents the service specified
            in the serviceType parameter.
            </summary>
            <param name="serviceType">The service type to retrieve.</param>
            <returns>An object that represents the service or null is the service
            cannot be found.</returns>
        </member>
        <member name="P:Ximura.ElementSite.Component">
            <summary>
            The component
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.Container">
            <summary>
            The container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.DesignMode">
            <summary>
            The design mode of the container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.Name">
            <summary>
            The name of the container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.parent">
            <summary>
            An additional property which is the parent of the component
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.ServiceContainer">
            <summary>
            The service container.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPerformanceCounterCollection">
            <summary>
            This interface is used by classes that provide performance counter consolidation.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPerformanceCounterCollection.CommandID">
            <summary>
            The command id.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPerformanceCounterCollection.PCID">
            <summary>
            The parent command id.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPerformanceCounterCollection.Name">
            <summary>
            The counter name.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPerformanceCounterCollection.Category">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraMessageStreamFeedback">
            <summary>
            This message provides immediate feedback when characters are received.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraContentEntityFragment">
            <summary>
            This interface is used to identify the fragmentation options for the entity.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.IsFragment">
            <summary>
            This property identifies whether the content is a fragment type.
            </summary>
            <returns>Returns true if the object is a fragment, or supports fragmentation.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.FragmentBaseType">
            <summary>
            This is the fragment base type. If this property is supported the persistence manager 
            will store this property in the serialization blob. Should the original type be unavailable 
            the content will be deserialized using this type.
            </summary>
            <returns>Return the base content type if supported.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.SupportsFragmentBaseType">
            <summary>
            This method identifies whether the content supports the base type content.
            </summary>
            <returns>Returns true if this property is supported.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.CanConvertToPrimaryEntity">
            <summary>
            This boolean property identifies whether a fragment can convert to a primary entity.
            </summary>
            <returns>Returns true if the entity can convert.</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.ConvertFragmentToPrimaryEntity">
            <summary>
            This method converts the fragment entity to the primary entity.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.MergeContent(Ximura.Data.IXimuraContent)">
            <summary>
            This method is implemented by the fragment content and will be used to merge any
            changes back in to the root content.
            </summary>
            <param name="baseContent">The base content to merge in to.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.AddBaseContent">
            <summary>
            This method is implemented by the fragment content and will be used to convert any
            changes back in to the root content.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.UpdateBaseContent(Ximura.Data.IXimuraContent)">
            <summary>
            This method is implemented by the fragment content and will be used to update any
            changes back in to the root content.
            </summary>
            <param name="baseContent">The base content to merge in to.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.DeleteBaseContent(Ximura.Data.IXimuraContent)">
            <summary>
            This method is implemented by the fragment content and will be used to
            delete the root content.
            </summary>
            <param name="baseContent">The base content to merge in to.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.FragmentIDIsByReference">
            <summary>
            this method tells whether the fragment id is a by-reference id or not
            </summary>
            <returns>Returns turs if the fragment id is by-reference</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.FragmentReferenceType">
            <summary>
            this method returns the fragment reference type
            </summary>
            <returns>fragment reference type</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.SetFragmentReferenceType(System.String)">
            <summary>
            this method set the fragment reference type 
            </summary>
            <param name="referenceType"></param>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.FragmentReferenceID">
            <summary>
            this method returns the fragment reference id
            </summary>
            <returns>fragment reference id</returns>
        </member>
        <member name="M:Ximura.Data.IXimuraContentEntityFragment.SetFragmentReferenceID(System.String)">
            <summary>
            this method set the fragment reference id 
            </summary>
            <param name="referenceID"></param>
        </member>
        <member name="T:Ximura.XimuraAppModuleConfigAttribute">
            <summary>
            This attribute is used to set the default command configurations setting.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppModuleConfigAttribute.#ctor(System.String,System.String)">
            <summary>
            This attribute is used to specify the default XML for the parent configuration settings.
            </summary>
            <param name="ResourceFile">The name of the resource file that contains the base XML fragment.</param>
            <param name="ConfigHelperType">This is the .NET type name of the command config section handler.</param>
        </member>
        <member name="P:Ximura.XimuraAppModuleConfigAttribute.ResourceFile">
            <summary>
            The name of the resource file that contains the base XML fragment.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppModuleConfigAttribute.ConfigHelperType">
            <summary>
            The >NET type name of the command config section handler.
            </summary>
        </member>
        <member name="T:Ximura.PoolManager">
            <summary>
            The pool manager is a static class which controls system wide object pooling within the 
            current AppDomain.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolManager">
            <summary>
            The pool manager interface is used to provide an interface that allows multiple
            pool objects to be created around a base object type.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolManager.GetPoolManager(System.Type)">
            <summary>
            This method retrieve a pool manage object based on
            </summary>
            <param name="objectType">The object type for the pool.</param>
            <returns>Returns a pool manager for the type specified.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManager.GetPoolManager(System.Type,System.Boolean)">
            <summary>
            This method retrieve a pool manage object based on
            </summary>
            <param name="objectType">The object type for the pool.</param>
            <param name="buffered">A boolean value that specifies whether the pool manager should
            be buffered. A buffered pool cannot be reset by the receiving party.</param>
            <returns>Returns a pool manager for the type specified.</returns>
        </member>
        <member name="F:Ximura.PoolManager.mPoolManagers">
            <summary>
            This collection contains the specific pool managers that hold a collection of poolable object.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.#ctor">
            <summary>
            This is the default static constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.#ctor(System.Boolean)">
            <summary>
            This is the buffered output option for the pool manager. With a buffered output the pool object is abstracted
            using a buffer object which does not allow the calling party to clear the pool.
            </summary>
            <param name="useBuffer">Set this to true if you wish the pool manager to output a buffered output.</param>
        </member>
        <member name="M:Ximura.PoolManager.CheckDisposed">
            <summary>
            This method checks whether the pool manager has been disposed, and if so throws an exception.
            </summary>
        </member>
        <member name="T:Ximura.PoolManager.PoolManagerContainer">
            <summary>
            The PoolManagerContainer is a private class that is used to hold the pool and the buffered pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.#ctor(System.Type,Ximura.IXimuraPoolManager)">
            <summary>
            This is the default constructor for the the PoolManagerContainer.
            </summary>
            <param name="poolManager">The pool manager to contain.</param>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.CreatePool(System.Type,Ximura.IXimuraPoolManager)">
            <summary>
            This method uses generics to create the specific type of context pool.
            </summary>
            <param name="objectType">The context type.</param>
            <returns>Returns the pool.</returns>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.CheckDisposed">
            <summary>
            This method checks whether the pool manager has been disposed, and if so throws an exception.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.Dispose">
            <summary>
            This is the dispose method for the class.
            </summary>
        </member>
        <member name="P:Ximura.PoolManager.PoolManagerContainer.Pool">
            <summary>
            The pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolManager.PoolManagerContainer.PoolBuffered">
            <summary>
            The buffered pool.
            </summary>
        </member>
        <member name="T:Ximura.PoolBuffer`1">
            <summary>
            The pool buffer allow multiple clients to connect to the same underlying pool, but removes direct
            access to the underlying pool allowing more stable support.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolBuffer">
            <summary>
            This is the pool buffer interface. This interface is used by the pool managers 
            to reset the references when closing down.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolBuffer.ResetBuffer">
            <summary>
            This method resets the buffer and it's connection to the underlying object pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolBuffer`1.#ctor(Ximura.IXimuraPool)">
            <summary>
            This is the internal constructor. The pool buffer can only be accessed by the pool manager.
            </summary>
            <param name="pool">The internal pool.</param>
        </member>
        <member name="M:Ximura.PoolBuffer`1.Dispose">
            <summary>
            This method disposes the pool buffer class.
            </summary>
        </member>
        <member name="P:Ximura.PoolBuffer`1.PoolManager">
            <summary>
            This method is not implemented in the buffer.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionClient">
            <summary>
            This interface is used to identify a session.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSessionClient.SessionID">
            <summary>
            This is the session ID
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSessionClient.SessionCulture">
            <summary>
            The session culture.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSessionClient.State">
            <summary>
            this is the current session state
            </summary>
        </member>
        <member name="T:Ximura.XimuraServiceStatus">
            <summary>
            The CatalogProcessStatus shows the current status of the Catalog Process.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Undefined">
            <summary>
            The status is undefined.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.NotStarted">
            <summary>
            The process has not started.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Starting">
            <summary>
            The process is starting up.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Started">
            <summary>
            The process is processing.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Pausing">
            <summary>
            The process is pausing.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Paused">
            <summary>
            The process is paused.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Resuming">
            <summary>
            The process is resuming.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Stopping">
            <summary>
            The process is stopping.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Stopped">
            <summary>
            The process has stopped.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Completed">
            <summary>
            The process has completed.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Resumed">
            <summary>
            The process has resumed.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraMessageTermination.IsTerminator">
            <summary>
            This property specifies whether the fragment byte array has reached the termination requirements
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppContainer">
            <summary>
            AppContainer is the base container for the Ximura Application framework. 
            The container is used to share services between the components within an application.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor">
            <summary>
            This is the default container constructor
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            This is container constructor with a service provider
            </summary>
            <param name="theProvider"></param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor(System.ComponentModel.Design.IServiceContainer,System.Object)">
            <summary>
            This is the expanded constructor including the parent object for the 
            expanded ElementSite item.
            </summary>
            <param name="theProvider"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
            <summary>
            This method creates a new ElementSite compoent
            </summary>
            <param name="component">The component</param>
            <param name="name">The name</param>
            <returns>The ElementSite object.</returns>
        </member>
        <member name="M:Ximura.XimuraAppContainer.Add(System.ComponentModel.IComponent,System.String)">
            <summary>
            This overriden method adds event support to the Add event
            </summary>
            <param name="component">The component to add.</param>
            <param name="name">The name of the component 
            or null if this is not set</param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.Remove(System.ComponentModel.IComponent)">
            <summary>
            This overriden method adds event support to the Remove method.
            </summary>
            <param name="component">The component to remove.</param>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentAdding">
            <summary>
            This event will be fired when a component is added to the collection.
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentAdded">
            <summary>
            This event will be fired when a component is added.
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentRemoving">
            <summary>
            This event will be fired when a component is removed from the
            collection
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentRemoved">
            <summary>
            This event will be fired when a component is removed.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainer.ServiceProvider">
            <summary>
            This is the service provider.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainer.ServiceContainer">
            <summary>
            This is the service container.
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppContainer.AppContainerEventHandler">
            <summary>
            This is the event delegate used to monitor component addition/deletion
            for the XimuraAppContainer object.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPerformanceManager">
            <summary>
            This interface should be used by all services providing performance services
            </summary>
        </member>
        <member name="T:Ximura.Server.IXimuraConfigurationManager">
            <summary>
            This is the configuration manager.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraCommandKnownService">
            <summary>
            This interface is used to identify known services.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraApplication">
            <summary>
            Summary description for IXimuraApplication.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraApplication.ApplicationID">
            <summary>
            This is the application ID.
            </summary>
        </member>
        <member name="T:Ximura.Helper.XMLHelper">
            <summary>
            The XML Helper library is used to provide a set of reusable methods for manipulation XML Document information.
            </summary>
        </member>
        <member name="T:Ximura.Helper.Common">
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
        </member>
        <member name="M:Ximura.Helper.Common.ASCByt(System.String)">
            <summary>
            This converts a string in to an ASCII byte array. This method
            adds a CRLF at the end of the string by default.
            </summary>
            <param name="strData">The string you wish to convert.</param>
            <returns>A byte array containing an ASCII representation of the string.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ASCByt(System.String,System.Boolean)">
            <summary>
            This converts a string in to an ASCII byte array.
            </summary>
            <param name="strData">The string you wish to convert.</param>
            <param name="blnAddCRLF">Select true if you want a new line appended at the end.</param>
            <returns>A byte array containing an ASCII representation of the string.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.Enc_EncodeByteToHex(System.Byte[])">
            <summary>
            This function converts a binary array in to a hexadecimal string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>A string that represents the byte array as hexadecimal</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception 
            is thrown if the offset and the length and greater than the 
            binary array length.</exception>
        </member>
        <member name="M:Ximura.Helper.Common.Enc_EncodeByteToHex(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function converts a binary array in to a hexadecimal string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <param name="offset">The starting point in the byte array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>A string that represents the byte array as hexadecimal</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception 
            is thrown if the offset and the length and greater than the 
            binary array length.</exception>
        </member>
        <member name="M:Ximura.Helper.Common.Enc_DecodeHexAsByte(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method decodes a hex string and inserts it into a byte array.
            </summary>
            <param name="HexString">The hex string that you wish to parse.</param>
            <param name="data">The byte array that you wish to be updated</param>
            <param name="offset">The point within the byte array that the method should start inserting encoded data.</param>
            <param name="length">The number of decoded bytes that the method should insert in the byte array.</param>
            <exception cref="T:System.ArgumentException">This exception is thrown if the hex 
            string is not divisible by 2. All strings should be left padded with 0 to ensure
            that they are divisible by 2.</exception>
        </member>
        <member name="M:Ximura.Helper.Common.Enc_DecodeHexString(System.String)">
            <summary>
            This method decodes a hex string and returns it as a byte array.
            </summary>
            <param name="HexString">The hex string to decode.</param>
            <returns>A byte array containing the bytes corresponding to the decoded string.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown if the hex 
            string is not divisible by 2. All strings should be left padded with 0 to ensure
            that they are divisible by 2.</exception>
        </member>
        <member name="M:Ximura.Helper.Common.ConvertHexStringToBase64(System.String)">
            <summary>
            Converting a hex string to base 64 string
            </summary>
            <param name="HexString"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.ConvertBase64ToHexString(System.String)">
            <summary>
            Converts a Base64 string in to a hex string.
            </summary>
            <param name="base64String">The base64 string.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ConvertStringToByte(System.String)">
            <summary>
            Converting a string to byte[] using UTF8 encoding
            </summary>
            <param name="stringToHash"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.ComputeHash(System.String)">
            <summary>
            Function to hash a string by default hash algorithm (MD5)
            </summary>
            <param name="stringToHash">String to hash</param>
            <returns>Hashed string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ComputeHash(System.String,Ximura.Helper.Common.HashAlgorithmType)">
            <summary>
            Function to hash a string by specific hash algorithm
            </summary>
            <param name="stringToHash">String to hash</param>
            <param name="hashType">Hash Algorithm Type</param>
            <returns>Hashed string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ComputeHash(System.Byte[])">
            <summary>
            Function to hash a byte[] by default hash algorithm (MD5) 
            </summary>
            <param name="HashValue">Byte[] to hash</param>
            <returns>Hashed byte[]</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ComputeHash(System.Byte[],Ximura.Helper.Common.HashAlgorithmType)">
            <summary>
            Function to hash a byte[] by specific hash algorithm
            </summary>
            <param name="HashValue">Byte[] to hash</param>
            <param name="hashType">Hash Algorithm Type</param>
            <returns>Hashed byte[]</returns>
        </member>
        <member name="M:Ximura.Helper.Common.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            This method compares two byte arrays and returns true is the two are equal.
            </summary>
            <param name="Array1"></param>
            <param name="Array2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.ConcatenateByteArray(System.Byte[],System.Byte[])">
            <summary>
            This method concatenates two byte arrays and returns the concatenation.
            </summary>
            <param name="Array1"></param>
            <param name="Array2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.CreateSeedHash(System.String,System.String)">
            <summary>
            Create a salted password given the salt value.
            </summary>
            <param name="seedValue">The seed as a byte array</param>
            <param name="unsaltedPassword">The password as a string</param>
            <returns>A hash byte array</returns>
        </member>
        <member name="M:Ximura.Helper.Common.CreateSeedHash(System.Byte[],System.Byte[])">
            <summary>
            Create a salted password given the salt value.
            </summary>
            <param name="seedValue">The seed as a byte array</param>
            <param name="unsaltedPassword">The password as a UTF-8 byte array</param>
            <returns>A hash byte array</returns>
        </member>
        <member name="M:Ximura.Helper.Common.SelectHashAlgorithm(System.String)">
            <summary>
            This method selects the appropriate hash algorithm based on the value submitted.
            </summary>
            <param name="hashType">The hash algorithm identifier.</param>
            <returns>Returns the selected hash algorithm.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.GetCardNoObsured(System.String)">
            <summary>
            Card Number is obsured in the manner 41124342******33.
            </summary>
            <param name="strCardNO"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.GetCardHash(System.String)">
            <summary>
            This function hash the card number 
            </summary>
            <param name="strCardNO">Card Number</param>
            <returns>card hashed number as string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.GetCardHash(System.Collections.Hashtable,System.String)">
            <summary>
            This function hash the card number according to the Card Encoding Attribute
            </summary>
            <param name="htCardEncodingAttribute">Card Encoding Attribute</param>
            <param name="strCardNO">Card Number</param>
            <returns>card hashed number as string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.GetCardHash(System.String,System.String,System.String)">
            <summary>
            This function hash the card number according to the Card Encoding Attribute
            </summary>
            <param name="strCardImportType">Card Import Type</param>
            <param name="strCardEncodingType">Card Encoding Type</param>
            <param name="strCardNO">Card Number</param>
            <returns>card hashed number as string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ConvertToISO8601DateString(System.String)">
            <summary>
            Function to convert string to ISO8601 datetime string yyyy-MM-ddTHH:mm:ss
            </summary>
            <param name="strDateTime">string in special format ( yyyyMMdd | yyyyMMddHH | yyyyMMddHHmm | yyyyMMddHHmmss</param>		
            <returns>ISO8601 datetime string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.ConvertToISO8601DateString(System.DateTime)">
            <summary>
            Function to convert datetime to ISO8601 datetime string yyyy-MM-ddTHH:mm:ss
            </summary>
            <param name="dtDateTime">datetime</param>		
            <returns>ISO8601 datetime string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.AdjustCentury(System.String)">
            <summary>
            This method adjusts the incoming 6 digit date to a 8 digit date with the century included.
            </summary>
            <param name="strDate">date</param>		
            <returns>8-digit string</returns>
        </member>
        <member name="M:Ximura.Helper.Common.GuessYear(System.Int32)">
            <summary>
            Guess the Year based on the Month and the Current Year
            </summary>
            <param name="Month">Month</param>
            <returns>Year</returns>
        </member>
        <member name="M:Ximura.Helper.Common.GuessCentury(System.Int32)">
            <summary>
            Guess the Century of the 2-digit Year, calculated based on the current century +/- 50 years
            </summary>
            <param name="Year">Year</param>
            <returns>Century</returns>
        </member>
        <member name="M:Ximura.Helper.Common.IsNumeric(System.String)">
            <summary>
            This method tests whether a string is numeric.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.IsDateTime(System.String)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.IsDateTime(System.String,System.String)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <param name="timeValue">The time value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.IsDateTime(System.String,System.String,System.Nullable{System.DateTime}@)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <param name="timeValue">The time value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Helper.Common.CreatePasswordHash(System.String,System.String)">
            <summary>
            This method creates a password hash from a byte64 encoded text seed and plain text password
            </summary>
            <param name="Seed"></param>
            <param name="Pass"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.SplitOnChars``2(System.String,System.Converter{System.String,``0},System.Converter{System.String,``1},System.Char[],System.Char[])">
            <summary>
            This method is used to split string pairs.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="toSplit"></param>
            <param name="convertT"></param>
            <param name="convertU"></param>
            <param name="split1"></param>
            <param name="split2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Common.SplitOnCharsUnique``2(System.String,System.Converter{System.String,``0},System.Converter{System.String,``1},System.Char[],System.Char[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="toSplit"></param>
            <param name="convertT"></param>
            <param name="convertU"></param>
            <param name="split1"></param>
            <param name="split2"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.Helper.Common.HashAlgorithmType">
            <summary>
            Enumeration list for hash algorithms
            </summary>
        </member>
        <member name="T:Ximura.Helper.Common.DataGridValueMapper">
            <summary>
            This class provide common data grid value mapper.
            </summary>
        </member>
        <member name="T:Ximura.Helper.Common.HTTPCodes">
            <summary>
            This class provides shortcuts to the HTTP codes.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionSCM">
            <summary>
            The IXimuraSessionSM interface is the primary interface implemented
            by the session object, and is refernced by the Security Manager
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSession">
            <summary>
            The IXimuraSession interface is exposed to the user.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionRQ">
            <summary>
            This interface is used by the session object to support requests.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionRQAsync">
            <summary>
            This is the async interface
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.CancelRequest(System.Guid)">
            <summary>
            This method cancels a pending request.
            </summary>
            <param name="jobID">The job id.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.JobPriority)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="priority">The request priority.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.CommandProgressCallback)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="ProgressCallback">The progress calback delegate. 
            This can be used to report progress during long running processes.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.JobPriority,Ximura.CommandProgressCallback)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="priority">The request priority.</param>
            <param name="ProgressCallback">The progress calback delegate. 
            This can be used to report progress during long running processes.</param>
        </member>
        <member name="M:Ximura.IXimuraSession.Close">
            <summary>
            This method closes the session and cancals any pending job requests.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSession.AuthenticationTypes">
            <summary>
            This enumeration returns the supported authentication interfaces.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSessionSCM.SetSCMPublicKey">
            <summary>
            This property allows the Security Manager to pass the session it's
            public key.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSessionSCM.GetSessionPublicKey">
            <summary>
            This method allows the Session Token to get the session's
            public key.
            </summary>
        </member>
        <member name="T:Ximura.Data.MessageDirection">
            <summary>
            This enumeration defines the messaging charteristics.
            </summary>
        </member>
        <member name="F:Ximura.Data.MessageDirection.Undefined">
            <summary>
            This is the default value that the message is set to 
            </summary>
        </member>
        <member name="F:Ximura.Data.MessageDirection.Read">
            <summary>
            Message can be read from.
            </summary>
        </member>
        <member name="F:Ximura.Data.MessageDirection.Write">
            <summary>
            Message can be written to.
            </summary>
        </member>
        <member name="F:Ximura.Data.MessageDirection.Bidirectional">
            <summary>
            Message supports both reading and writing.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraLogging">
            <summary>
            The IXimuraLogging interface provides the necessary methods to enable logging.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.AcceptCategory(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            This method inform the Logging Manager whether it will accept the 
            category for logging.
            </summary>
            <param name="category">The logging category.</param>
            <returns>A boolean value. True indicated the category is accepted.</returns>
        </member>
        <member name="M:Ximura.IXimuraLogging.Close">
            <summary>
            Flushes the output buffer and then closes the Listeners.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Flush">
            <summary>
            Flushes the output buffer and causes buffered data to write to the Listeners
            collection.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Fail(System.String)">
            <summary>
            Emits the specified error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Indent">
            <summary>
            Increases the current IndentLevel by one.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Unindent">
            <summary>
            Decreases the current IndentLevel by one.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's ToString method to 
            the trace listeners in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners
             collection.
            </summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners
             collection.
            </summary>
            <param name="message">A message to write. </param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.Object)">
            <summary>
            Writes the value of the object's ToString method to the trace listeners
            in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's ToString method to the trace 
            listeners in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's ToString method to the trace listeners
            in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners. </param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the
            Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="P:Ximura.IXimuraLogging.Name">
            <summary>
            Gets or sets a name for this LoggingProvider.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.AutoFlush">
            <summary>
            Gets or sets a value indicating whether Flush should be called on the 
            Listeners after every write.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.IndentLevel">
            <summary>
            Gets or sets the indent level.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.IndentSize">
            <summary>
            Gets or sets the number of spaces in an indent.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionNegotiatePlainText">
            <summary>
            This method is used to authenticate a user using plain text.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionNegotiate">
            <summary>
            This interface is used to negotiate an authenticated session.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiate.PasswordChangeSupported">
            <summary>
            This method specifies whether the user is able to change their password.
            </summary>
            <returns>Returns true is the user is able to change their password.</returns>
        </member>
        <member name="P:Ximura.IXimuraSessionNegotiate.Realm">
            <summary>
            The session realm.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiatePlainText.Authenticate(System.String)">
            <summary>
            This method extends the basic session functionality and
            authenticates a user based on their plain text username and
            password.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiatePlainText.Authenticate(System.String,System.String)">
            <summary>
            This method extends the basic session functionality and
            authenticates a user based on their plain text username and
            password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:Ximura.IXimuraLoggingManagerConfigSH">
            <summary>
            This interface is used by the logging config section handler.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLoggingManagerConfigSH.Loggers">
            <summary>
            This method returns an ArrayList containing a collection of strings with the name of the 
            logging providers.
            </summary>
            <returns>An ArrayList containing a collection of strings.</returns>
        </member>
        <member name="M:Ximura.IXimuraLoggingManagerConfigSH.LoggerType(System.String)">
            <summary>
            This method returns the specific logger type.
            </summary>
            <param name="provider">The provider.</param>
            <returns>An ArrayList containing the list of loggers.</returns>
        </member>
        <member name="M:Ximura.IXimuraLoggingManagerConfigSH.getLoggerSettings(System.String)">
            <summary>
            This method returns the specific logger settings object.
            </summary>
            <param name="provider">The provider to return the settings for.</param>
            <returns>The logging object.</returns>
        </member>
        <member name="T:Ximura.Data.IXimuraDataContentLinkage">
            <summary>
            This interface specifically identifies the linkage behaviour of the data content.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraDataContentLinkage.LinkType">
            <summary>
            This property defines the DataContent linkage type.
            </summary>
        </member>
        <member name="P:Ximura.Data.IXimuraDataContentLinkage.LinkTypeIdentifier">
            <summary>
            This property identifies the specific object to link to, when the LinkType property
            is set to Link.
            </summary>
        </member>
        <member name="T:Ximura.Data.ITextSummary">
            <summary>
            This interface is used to provide a content summary of the content
            </summary>
        </member>
        <member name="P:Ximura.Data.ITextSummary.TextSummary">
            <summary>
            The text summary of the content.
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppConfigurationAttribute">
            <summary>
            This attribute is used to define command properties.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppConfigurationAttribute.#ctor(Ximura.ConfigurationLocation,System.String)">
            <summary>
            This attribute is used to specify where a command should get their settings from.
            </summary>
            <param name="configType">The configuration type.</param>
            <param name="configLocation">The configuration location.</param>
        </member>
        <member name="P:Ximura.XimuraAppConfigurationAttribute.ConfigType">
            <summary>
            This is the configuration type.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppConfigurationAttribute.ConfigLocation">
            <summary>
            The configuration location.
            </summary>
        </member>
        <member name="T:Ximura.ConfigurationLocation">
            <summary>
            This enumeration specifies the action the command should take to load the configuration.
            </summary>
        </member>
        <member name="F:Ximura.ConfigurationLocation.None">
            <summary>
            The command uses the legacy config setting handler system.
            </summary>
        </member>
        <member name="F:Ximura.ConfigurationLocation.Resource">
            <summary>
            The configuration file is a resource embedded in the application.
            </summary>
        </member>
        <member name="F:Ximura.ConfigurationLocation.ConfigurationManager">
            <summary>
            The configuration should be retrieved from the configuration manager.
            </summary>
        </member>
        <member name="F:Ximura.ConfigurationLocation.Hybrid">
            <summary>
            The configuration file is a resource embedded by the system, but should be updated using the settings class.
            </summary>
        </member>
        <member name="T:Ximura.SessionState">
            <summary>
            The XimuraSessionState enumeration identifies the current state of a session.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Undefined">
            <summary>
            The session is undefined.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.NotInitialized">
            <summary>
            The session is not initialized.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Initialized">
            <summary>
            The session is initialized.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Authenticating">
            <summary>
            The session is currently authenticating.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Authenticated">
            <summary>
            The session is authenticated with the security manager.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Closing">
            <summary>
            The session is closing.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Closed">
            <summary>
            The session is closed.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.NotAuthorized">
            <summary>
            The session is not authorized.
            </summary>
        </member>
        <member name="F:Ximura.SessionState.Rejected">
            <summary>
            The session was rejected by the security manager.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionNegotiateMD5Hash">
            <summary>
            This interface is used for MD5 authentication.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiateMD5Hash.GetSeed">
            <summary>
            This method returns the seed for the current username.
            </summary>
            <returns>The seed as a byte array</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiateMD5Hash.GetSeed(System.String)">
            <summary>
            This method returns the seed for the specified username.
            </summary>
            <param name="Username">The username required</param>
            <returns>The seed as a byte array</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiateMD5Hash.GetSeed(System.String,System.Globalization.CultureInfo)">
            <summary>
            This method returns the seed for the specified username.
            </summary>
            <param name="Username">The username required</param>
            <param name="newCulture">The culture for the session.</param>
            <returns>The seed as a byte array</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiateMD5Hash.Authenticate(System.Byte[])">
            <summary>
            This method will attempt to authenticate the session.
            </summary>
            <param name="hash">The MD5 hash of the username and the seed</param>
            <returns>The session state after the authtication attempt</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionNegotiateMD5Hash.Authenticate(System.Byte[],System.Globalization.CultureInfo)">
            <summary>
            This method will attempt to authenticate the session.
            </summary>
            <param name="hash">The MD5 hash of the username and the seed</param>
            <param name="sessionCulture">The session culture</param>
            <returns>The session state after the authtication attempt</returns>
        </member>
        <member name="T:Ximura.SCMJobCompletionType">
            <summary>
            This is the completion behaviour of the security manager job.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.OnExit">
            <summary>
            The job will complete when the job leaves the main calling method.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.ManualSignal">
            <summary>
            The job will complete when the SignalCompletion method is called.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.SignalOrTimeout">
            <summary>
            This property specifies 
            </summary>
        </member>
        <member name="T:Ximura.JobPriority">
            <summary>
            Thread pool priority is used to assign the job position within the 
            Priority Job queue.
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Realtime">
            <summary>
            This is the highest priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.High">
            <summary>
            This is high priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.AboveNormal">
            <summary>
            This is above normal priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Normal">
            <summary>
            This is the default priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.BelowNormal">
            <summary>
            This is below normal priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Low">
            <summary>
            This is the lowest priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.NotSet">
            <summary>
            This is the not set state.
            </summary>
        </member>
        <member name="T:Ximura.Server.CompletionJobStatus">
            <summary>
            This enumeration is used to indicate the completion job status.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Unset">
            <summary>
            The job is unset.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Submitting">
            <summary>
            This property is used when manual signaling is required for the completion job.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Complete">
            <summary>
            The job is complete.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Processing">
            <summary>
            The job is currently processing.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.TimeOut">
            <summary>
            The job has timed out.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Cancelled">
            <summary>
            The parent job has been cancelled.
            </summary>
        </member>
        <member name="F:Ximura.Server.CompletionJobStatus.Aborted">
            <summary>
            The completion job has been aborted.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraLoggerConfigSH">
            <summary>
            This interface is used by the logging config section handlers
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLoggerSettings.GetSwitchValue(System.String)">
            <summary>
            This method returns a specific switch value for the type of message.
            </summary>
            <param name="Type">The switch type.</param>
            <returns>An integer value with the switch value.</returns>
        </member>
        <member name="M:Ximura.IXimuraLoggerSettings.GetSetting(System.String)">
            <summary>
            Get the config setting by specific Type
            </summary>
            <param name="Type">setting type</param>
            <returns>setting value</returns>
        </member>
        <member name="P:Ximura.IXimuraLoggerSettings.LoggerID">
            <summary>
            This is the logger identifier.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLoggerSettings.LoggerName">
            <summary>
            This is the logger public name.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLoggerSettings.LogLevel">
            <summary>
            This is the default log level
            </summary>
        </member>
        <member name="T:Ximura.Server.JobSignature">
            <summary>
            This structure is used hold the job signature.
            </summary>
        </member>
        <member name="F:Ximura.Server.JobSignature.encryptHeader">
            <summary>
            The header
            </summary>
        </member>
        <member name="F:Ximura.Server.JobSignature.encryptBuffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="F:Ximura.Server.JobSignature.encryptedHash">
            <summary>
            The hash.
            </summary>
        </member>
        <member name="M:Ximura.Server.JobSignature.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This creates the signature. You may pass null as a parameter.
            </summary>
            <param name="encryptHeader">The header.</param>
            <param name="encryptBuffer">The buffer.</param>
            <param name="encryptedHash">The hash.</param>
        </member>
        <member name="F:Ximura.Server.JobSignature.Empty">
            <summary>
            This is the empty job signature.
            </summary>
        </member>
        <member name="M:Ximura.Server.JobSignature.#cctor">
            <summary>
            This is the static constructor.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolManagerDirectAccess">
            <summary>
            This method is for poolable objects that require access to the base pool manager, so that they can retrieve
            additional internal objects from the pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGet(System.Type)">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGetObject(System.Type)">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGetReturn(System.Object)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="P:Ximura.IXimuraPoolManagerDirectAccess.PoolManager">
            <summary>
            This is the pool manager for the object.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolDeserializable">
            <summary>
            This interface is used to retrieve an object that support the deserializable interface.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolDeserializable.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object from the pool and deserializes this information in the serialization
            objects.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
            <returns>Returns the object specified from the pool.</returns>
        </member>
        <member name="P:Ximura.IXimuraPoolDeserializable.SupportsDeserialization">
            <summary>
            This boolean property returns true if the object type for the pool supports deserialization.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolDeserializable`1">
            <summary>
            This is the generic interface for poolable deserializable objects.
            </summary>
            <typeparam name="T">The poolable object type.</typeparam>
        </member>
        <member name="M:Ximura.IXimuraPoolDeserializable`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object of type T from the pool and deserializes this 
            information in the serialization objects.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
            <returns>Returns the object specified from the pool.</returns>
        </member>
        <member name="T:Ximura.IXimuraLoggingProvider">
            <summary>
            The logging provider interface is used by implemented by loggers and is used 
            by the logging manager to initialize logger in preperation for being inserted
            in the application logging collection.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLoggingProvider.Initialize(Ximura.IXimuraLoggerSettings)">
            <summary>
            This method initializes a logger
            </summary>
            <param name="settings">The logger settings.</param>
        </member>
        <member name="M:Ximura.IXimuraLoggingProvider.Deinitialize">
            <summary>
            This method should be used to free up any resources used by the logger.
            </summary>
        </member>
        <member name="T:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities">
            <summary>
            Summary description for IXimuraContentFormatterCapabilities.
            </summary>
        </member>
        <member name="M:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.Load(System.IO.Stream)">
            <summary>
            This method loads the header from the stream.
            </summary>
            <param name="inStream">The stream to read from.</param>
        </member>
        <member name="M:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.Output(System.IO.Stream,Ximura.Data.IXimuraContent,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            This method outputs the header for the stream.
            </summary>
            <param name="outStream">The stream to write to.</param>
            <param name="entity">The entity specified.</param>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.Max">
            <summary>
            The maximum version value up to a maximum of 63.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.Min">
            <summary>
            The minimum version number, between 0 and 63.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.Revision">
            <summary>
            The revision number between 0 and 63.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.TypeID">
            <summary>
            The Type ID
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.ContentID">
            <summary>
            The Content ID
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.VersionID">
            <summary>
            The Version ID
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.ContentType">
            <summary>
            The content type specified.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.ContentBaseType">
            <summary>
            The content base type specified.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.AllowRelativeType">
            <summary>
            This specifies whether the deserializer can use the best match for creating
            the object from the type.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.SupportsBaseType">
            <summary>
            This method identifies whether the content supports a base type.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.RWHelper">
            <summary>
            This is the helper used to read and write objects to the stream.
            </summary>
        </member>
        <member name="P:Ximura.Data.Serialization.IXimuraContentFormatterCapabilities.StreamCompressed">
            <summary>
            This property indicates whether the body data is compressed.
            </summary>
        </member>
        <member name="T:Ximura.Data.IDataContentSummary">
            <summary>
            Entities that implement this interface provide a summary of the content
            </summary>
        </member>
        <member name="M:Ximura.Data.IDataContentSummary.GetSummary(Ximura.Data.DataContentSummaryType)">
            <summary>
            This method retrieves a summary based on the summary type.
            </summary>
            <param name="type">The summary type.</param>
            <returns>An object containing the summary.</returns>
        </member>
        <member name="M:Ximura.Data.IDataContentSummary.GetSummary(Ximura.Data.DataContentSummaryType,System.String)">
            <summary>
            This method retrieves a summary based on the summary type.
            </summary>
            <param name="type">The summary type.</param>
            <param name="id">An identifier.</param>
            <returns>An object containing the summary.</returns>
        </member>
        <member name="T:Ximura.Server.IXimuraAppServer">
            <summary>
            Summary description for IXimuraAppServer.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraApplicationDefinition">
            <summary>
            This interface is used to provide application based configuration settings.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraApplicationDefinition.ApplicationName">
            <summary>
            This is the application name.
            </summary>
        </member>
        <member name="T:Ximura.Helper.StringHelper">
            <summary>
            Provide special functionality to deal with string
            </summary>
        </member>
        <member name="M:Ximura.Helper.StringHelper.XmlDecode(System.String)">
            <summary>
            Handle the special xml decode.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.StringHelper.StringToTypedValue(System.String,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Turns a string into a typed value. Useful for auto-conversion routines
            like form variable or XML parsers.
            <seealso>Class wwUtils</seealso>
            </summary>
            <param name="SourceString">
            The string to convert from
            </param>
            <param name="TargetType">
            The type to convert to
            </param>
            <param name="Culture">
            Culture used for numeric and datetime values.
            </param>
            <returns>object. Throws exception if it cannot be converted.</returns>
        </member>
        <member name="M:Ximura.Helper.StringHelper.StringToTypedValue(System.String,System.Type)">
            <summary>
            Turns a string into a typed value. Useful for auto-conversion routines
            like form variable or XML parsers.
            </summary>
            <param name="SourceString">The input string to convert</param>
            <param name="TargetType">The Type to convert it to</param>
            <returns>object reference. Throws Exception if type can not be converted</returns>
        </member>
        <member name="T:Ximura.Helper.Reflection">
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
        </member>
        <member name="F:Ximura.Helper.Reflection.MemberAccess">
            <summary>
            Binding Flags constant to be reused for all Reflection access methods.
            </summary>
        </member>
        <member name="M:Ximura.Helper.Reflection.#cctor">
            <summary>
            This static constructor creates the Type/string lookup cache.
            </summary>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.String)">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.String,System.Object[])">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.String,System.Object[],System.Type)">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <param name="callingType">The calling type. This is used to search referenced assemblies.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateTypeFromString(System.String)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <returns>The type or null if the name cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateTypeFromString(System.String,System.Type)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <param name="callingType">The type of the calling object.</param>
            <returns>The type or null if the name cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateTypeFromString(System.String,System.Type,System.Boolean)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <param name="callingType">The type of the calling object.</param>
            <param name="allowRelative">Set this to true if you allow relative paths to the type, i.e. less specific references.</param>
            <returns>The Type for the object or null if the type cannot be found.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateTypeFromStringNoCache(System.String,System.Type)">
            <summary>
            This method creates an object from the type name passed.
            </summary>
            <param name="typeName">The tpye name.</param>
            <param name="callingType">The calling type used as a reference.</param>
            <returns>Returns a new object of the required type 
            or null if the object cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.Type)">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.Type,System.Object[])">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CreateObjectFromType(System.Type,System.Object[],System.Type[])">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <param name="types">The types collection.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.getTypesfromObjectArray(System.Object[])">
            <summary>
            This method returns a array of System types corresponsing to the object passed
            </summary>
            <param name="theObjects">An array of objects</param>
            <returns>An array of ooject types</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.ValidateInterface(System.Type,System.Type)">
            <summary>
            This public static method caches interface implementation for type checking. This is 
            used to boost performance when checking large amounts of types.
            </summary>
            <param name="objectType">The type for the object you wish to check.</param>
            <param name="interfaceType">The type for the interface you wish to check.</param>
            <returns>Returns true if the interface is implemented.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.GetProperty(System.Object,System.String)">
            <summary>
            Retrieve a property value from an object dynamically. This is a simple version
            that uses Reflection calls directly. It doesn't support indexers.
            </summary>
            <param name="Object">Object to make the call on</param>
            <param name="Property">Property to retrieve</param>
            <returns>Object - cast to proper type</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property on an object. This is a simple method that uses straight Reflection 
            and doesn't support indexers.
            </summary>
            <param name="Object">Object to set property on</param>
            <param name="Property">Name of the property to set</param>
            <param name="Value">value to set it to</param>
        </member>
        <member name="M:Ximura.Helper.Reflection.GetPropertyEx(System.Object,System.String)">
            <summary>
            Returns a property or field value using a base object and sub members including . syntax.
            For example, you can access: this.oCustomer.oData.Company with (this,"oCustomer.oData.Company")
            This method also supports indexers in the Property value such as:
            Customer.DataSet.Tables["Customers"].Rows[0]
            </summary>
            <param name="Parent">Parent object to 'start' parsing from. Typically this will be the Page.</param>
            <param name="Property">The property to retrieve. Example: 'Customer.Entity.Company'</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.SetPropertyEx(System.Object,System.String,System.Object)">
            <summary>
            Sets a value on an object. Supports . syntax for named properties
            (ie. Customer.Entity.Company) as well as indexers.
            </summary>
            <param name="Object Parent">
            Object to set the property on.
            </param>
            <param name="String Property">
            Property to set. Can be an object hierarchy with . syntax and can 
            include indexers. Examples: Customer.Entity.Company, 
            Customer.DataSet.Tables["Customers"].Rows[0]
            </param>
            <param name="Object Value">
            Value to set the property to
            </param>
        </member>
        <member name="M:Ximura.Helper.Reflection.GetPropertyInternal(System.Object,System.String)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            Used internally for the 'Ex' Reflection methods.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.SetPropertyInternal(System.Object,System.String,System.Object)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object dynamically.
            </summary>
            <param name="Params"></param>
            1st - Method name, 2nd - 1st parameter, 3rd - 2nd parm etc.
            <returns></returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.ResourceLoadFromUri(System.Uri)">
            <summary>
            This method loads a resource from the xmrres resource location specified.
            </summary>
            <param name="location">The location.</param>
            <returns>Returns a byte array containing the resource.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown when the resource cannot be resolved.</exception>
        </member>
        <member name="M:Ximura.Helper.Reflection.ResourceResolveType(System.Uri)">
            <summary>
            This method will return the type specified in the xmrres resource string.
            </summary>
            <param name="location">The resource location.</param>
            <returns>Returns the type specified.</returns>
        </member>
        <member name="M:Ximura.Helper.Reflection.ResourceCheck(System.Uri)">
            <summary>
            This method checks whether the xmrres resource uri is correctly formatted.
            </summary>
            <param name="location">The xmrres resource location.</param>
        </member>
        <member name="M:Ximura.Helper.Reflection.ResourceResolve(System.Type,System.String)">
            <summary>
            This method resolves an embedded resource as a byte array.
            </summary>
            <param name="locationType">The type</param>
            <param name="resource">The resource to resolve.</param>
            <returns>Returns a byte array.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown when the resource cannot be resolved.</exception>
        </member>
        <member name="T:Ximura.IXimuraRQRSEnvelope">
            <summary>
            This interface implements the public methods and properties for the IXimuraRQRSEnvelope
            and contract definitions.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraRQRSEnvelope.PrepareResponse(System.String,System.String)">
            <summary>
            This shortcut is used to prepare the response status and substatus.
            </summary>
            <param name="status">The status.</param>
            <param name="subStatus">The substatus.</param>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.DestinationAddress">
            <summary>
            The destination address for the envelope/contract.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Sender">
            <summary>
            The originator/owner of the request.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.SenderReference">
            <summary>
            The internal reference for the sender.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobUserID">
            <summary>
            This is the job user ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobUserReferenceID">
            <summary>
            This is the job user plain text reference ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobSecurityIdentifier">
            <summary>
            This is the unique job security reference ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Request">
            <summary>
            The Request property
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Response">
            <summary>
            The Response property
            </summary>
        </member>
        <member name="T:Ximura.PoolableObjectBase">
            <summary>
            This is the base class for object that can be used by the pool. Although you do not need to inherit 
            from this class, this class simplifies the construction of poolable objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.#ctor">
            <summary>
            This is the default constructor. It is called when the object is created by the pool.
            Poolable objects must implement a public default constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Reset">
            <summary>
            This method is called when the object is first created or when the object is 
            returned to the pool. You should override this method and use it to reset all
            poolable object values to their default value and remeove any reference to external
            objects and/or data.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Dispose">
            <summary>
            The dispose method.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Dispose(System.Boolean)">
            <summary>
            The overrided dispose method
            </summary>
            <param name="disposing">True if this is called by dispose, false if this
            is called by the finalizer.</param>
        </member>
        <member name="P:Ximura.PoolableObjectBase.CanPool">
            <summary>
            This method returns true when the object can be pooled. 
            Override this property if you require more finegrained control.
            </summary>
        </member>
        <member name="P:Ximura.PoolableObjectBase.TrackID">
            <summary>
            This is the track ID for the poolable object. This value will not change between the various
            uses of the object through the application.
            </summary>
        </member>
        <member name="T:Ximura.PoolableReturnableObjectBase">
            <summary>
            This the base class for the returnable pool object. These objects retain a 
            reference to the pool manager that created them, allowing them to be returned to 
            the pool without a need for the application to keep an external reference of the pool
            manager.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.#ctor">
            <summary>
            This is the default constructor. 
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.Reset">
            <summary>
            This is the reset override which removes the reference to the object pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.ObjectPoolReturn">
            <summary>
            This method returns the object to the pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGet(System.Type)">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGet``1">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetObject(System.Type)">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetObject``1">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetReturn(System.Object)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetReturn``1(``0)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.ObjectPool">
            <summary>
            This is the object pool that the message belongs to.
            </summary>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.ObjectPoolCanReturn">
            <summary>
            This property specifices whether the object can be returns to the pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.PoolManager">
            <summary>
            This is the pool manager that can be used by the IXimuraPoolManagerDirectAccess interface.
            Although the methods and properties are implemented in the base class the actual interface is
            not implemented.
            </summary>
        </member>
        <member name="T:Ximura.PoolableObjectPoolManagerDirectAccess">
            <summary>
            This object is an example of an object that implements the IXimuraPoolManagerDirectAccess interface.
            This interface allows a poolable object to use other object from the base pool manager. This
            is useful for poolable object that need to create a large number of child objects. The functionality
            for this is implemented in the base class, but is only activated if the pool manager detects 
            that the object implements this interface.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectPoolManagerDirectAccess.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSchedulerCommandRegister">
            <summary>
            The IXimuraSchedulerCommandRegister interface provides an interaction between the scheduler and the 
            application commands.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSchedulerCommandRegister.RegisterCommand(System.Guid)">
            <summary>
            This method is used by a command to register with the scheduler, a valid Guid identifies that the 
            scheduler is able to process the schedules.
            </summary>
            <param name="CommandID">Returns true if the command was registered successfully.</param>
        </member>
        <member name="M:Ximura.IXimuraSchedulerCommandRegister.RegisterSubCommand(System.Guid,System.String,System.String,System.String,System.Object,Ximura.JobPriority)">
            <summary>
            This method is used to register a subcommand. The scheduler will then call the command based
            on the schedule set in entity.
            </summary>
            <param name="registerID">The register ID.</param>
            <param name="subCommandID">The sub command id, this can be null if it is the default command.</param>
            <param name="description">The sub command description.</param>
            <param name="subCommand">The subcommand object that will be sent to the command as a subcommand parameter.</param>
            <param name="priority">The priority set for the request.</param>
            <returns>Returns true if the command is registered correctly.</returns>
        </member>
        <member name="M:Ximura.IXimuraSchedulerCommandRegister.RegisterSubCommand(System.Guid,System.String,System.String,System.String,System.Object,Ximura.JobPriority,System.Boolean)">
            <summary>
            This method is used to register a subcommand. The scheduler will then call the command based
            on the schedule set in entity.
            </summary>
            <param name="registerID">The register ID.</param>
            <param name="subCommandID">The sub command id, this can be null if it is the default command.</param>
            <param name="description">The sub command description.</param>
            <param name="subCommand">The subcommand object that will be sent to the command as a subcommand parameter.</param>
            <param name="priority">The priority set for the request.</param>
            <param name="active">This method specifies whether the subcommand is active. This property can be used to remove a subcommand
            that has been depreciated in a new version of a command. If this is set to false
            the Scheduler will remove all references to this command if they exist in the schedule.</param>
            <returns>Returns true if the command is registered correctly.</returns>
        </member>
        <member name="M:Ximura.IXimuraSchedulerCommandRegister.UnregisterSubCommand(System.Guid,System.String)">
            <summary>
            This method is used to specifically disable/unregister a subcommand that has already been registered.
            </summary>
            <param name="registerID">The registerID previously passed back from the scheduler.</param>
            <param name="subCommandID">The subcommand id.</param>
            <returns>Returns true if the command was successfully unregistered.</returns>
        </member>
        <member name="M:Ximura.IXimuraSchedulerCommandRegister.UnregisterCommand(System.Guid)">
            <summary>
            This method is used by the command to signal that it is completed/stopped and no longer wishes
            to receive shedule requests.
            </summary>
            <param name="schedulerID"></param>
        </member>
        <member name="T:Ximura.Helper.XimuraServiceException">
            <summary>
            XimuraException is the root exception object for the Ximura system.
            </summary>
        </member>
        <member name="M:Ximura.Helper.XimuraServiceException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.Helper.XimuraServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ximura.Helper.XimuraServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Ximura.XimuraRemotingException">
            <summary>
            This class is used to signal an exception when using Ximura remoting
            </summary>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor">
            <summary>Initializes a new instance of the SecureRemotingException class with default properties.</summary>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.String)">
            <summary>Initializes a new instance of the SecureRemotingException class with the given message.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the SecureRemotingException class with the specified properties.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes the exception with serialized information.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provides serialization functionality.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Ximura.XimuraServiceContainer">
            <summary>
            Summary description for ServiceContainer.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.#ctor(System.IServiceProvider)">
            <summary>
            The parent provider constructor.
            </summary>
            <param name="parentProvider">The parent service provider.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.GetService(System.Type)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="P:Ximura.XimuraServiceContainer.ParentProvider">
            <summary>
            This property sets the parent provider.
            </summary>
        </member>
        <member name="T:Ximura.Server.JobBase">
            <summary>
            This is an abstract class that all job based implementations inherit from.
            </summary>
        </member>
        <member name="M:Ximura.Server.JobBase.IDBuffer(System.Guid,System.Guid,System.Guid)">
            <summary>
            This static method is use to create the byte buffer
            containing the three ids.
            </summary>
            <param name="id1">The Session ID</param>
            <param name="id2">The Job ID.</param>
            <param name="id3">The Request ID.</param>
            <returns>A byte buffer</returns>
        </member>
        <member name="M:Ximura.Server.JobBase.IDBuffer">
            <summary>
            The ID buffer
            </summary>
            <returns>The byte array containing the buffer.</returns>
        </member>
        <member name="M:Ximura.Server.JobBase.Dispose">
            <summary>
            This is the dispose method for the job.
            </summary>
        </member>
        <member name="M:Ximura.Server.JobBase.Dispose(System.Boolean)">
            <summary>
            This method should be overriden to provide specific clean up code.
            Specifically, any delegates references in the object should be set to null;
            </summary>
            <param name="disposing">This parameter is true if the call is from the disposable interface.</param>
        </member>
        <member name="M:Ximura.Server.JobBase.Reset">
            <summary>
            This virtual empty method should be implemented when resources may not be 
            automatically cleaned up when using garbage collection, i.e. when using delegates.
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.Priority">
            <summary>
            This is the job priority.
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.SessionID">
            <summary>
            The Session ID
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.ID">
            <summary>
            The job ID
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.Data">
            <summary>
            The envelope containing the request
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.Signature">
            <summary>
            The job signature
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.IsDisposed">
            <summary>
            This property can be used to identify whether the object has been disposed.
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.Server.JobBase.TrackID">
            <summary>
            This property is used to track the object through the object pool.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionRQAsyncWithDependency">
            <summary>
            This is the async interface
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgressCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="T:Ximura.IXimuraLoggingAudit">
            <summary>
            This 
            </summary>
        </member>
        <member name="T:Ximura.Helper.AttributeHelper">
            <summary>
            Provide special functionality to deal with Attribute.
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppContainerEventArgs">
            <summary>
            This object contains the argument passed when a component id added or removed.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainerEventArgs.#ctor(System.ComponentModel.IComponent,System.String)">
            <summary>
            This is the event argument constructor.
            </summary>
            <param name="component"></param>
            <param name="name"></param>
        </member>
        <member name="P:Ximura.XimuraAppContainerEventArgs.Component">
            <summary>
            This is the component that is added or removed from the collection.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainerEventArgs.Name">
            <summary>
            This is the component name. This is only used when a component
            is added to the collection. If the name is not set this value 
            is null.
            </summary>
        </member>
        <member name="T:Ximura.Command.RQRSFolder">
            <summary>
            RQRSFolder is a composite content object that can contain multiple entity object along with numerous other
            named parameters.
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSFolder.mStatus">
            <summary>
            This is the internal HTTP status code.
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSFolder.mSubstatus">
            <summary>
            This is the internal substatus code/description
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSFolder.mCulture">
            <summary>
            The culture for the request.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSFolder.#ctor">
            <summary>
            This is the default constuctor.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSFolder.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This is the component model constructor.
            </summary>
            <param name="container">The base container.</param>
        </member>
        <member name="M:Ximura.Command.RQRSFolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.Command.RQRSFolder.Reset">
            <summary>
            This method resets the object.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSFolder.Status">
            <summary>
            The Status is the HTTP status code that is used to define the object's status.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSFolder.Substatus">
            <summary>
            This is the response substatus. This can be used to return a substatus
            field or a text description.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSFolder.Culture">
            <summary>
            The culture for the request/response.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSFolder.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSFolder.ID">
            <summary>
            This is the request ID.
            </summary>
        </member>
        <member name="T:Ximura.Server.SessionCreateRemote">
            <summary>
            The session create remote delegate.
            </summary>
        </member>
        <member name="T:Ximura.Server.IXimuraSessionManager">
            <summary>
            The IXimuraSessionManager interface is the public face of the session manager and is registered
            in the components collection of the Application.
            </summary>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManager.SessionCreate">
            <summary>
            This method creates a blank session.
            </summary>
            <returns>A IXimuraSession object is returned.</returns>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManager.SessionCreate(System.String)">
            <summary>
            This method creates a session object for the named user.
            </summary>
            <param name="username">The user ID of the user.</param>
            <returns>A IXimuraSession object is returned.</returns>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManager.SessionCreate(System.String,System.String)">
            <summary>
            This method creates a session object for the named user.
            </summary>
            <param name="domain">The domain for the session or null if the default is to be used.</param>
            <param name="username">The user ID of the user.</param>
            <returns>A IXimuraSession object is returned.</returns>
        </member>
        <member name="T:Ximura.IXimuraPerformanceCounter">
            <summary>
            This interface is used by performance counter classes.
            </summary>
        </member>
        <member name="T:Ximura.Helper.StreamCounter">
            <summary>
            This wrapper stream is used to count the number of bytes being written to the underlying stream.
            </summary>
        </member>
        <member name="T:Ximura.Server.IXimuraSessionManagerAuth">
            <summary>
            IXimuraSessionManagerAuth
            </summary>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManagerAuth.Logout(Ximura.IXimuraSessionSCM)">
            <summary>
            This method logs out a session and resets its permission to an
            unathorized user.
            </summary>
            <param name="theSession">The session to logout.</param>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManagerAuth.Close(Ximura.IXimuraSessionSCM)">
            <summary>
            This method closes a session and removes it from the session collection.
            </summary>
            <param name="theSession">The session object to close.</param>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManagerAuth.GetSeed(Ximura.IXimuraSessionSCM)">
            <summary>
            This method gets the seed for the user.
            </summary>
            <param name="theSession">The session.</param>
            <returns>Returns a byte array containing the seed.</returns>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManagerAuth.GetNonce(Ximura.IXimuraSessionSCM)">
            <summary>
            This is the one time parameter used to prevent replay attacks. This method
            is not currently implemented.
            </summary>
            <param name="theSession">The session to generate the nonce for.</param>
            <returns>A byte array containing the nonce.</returns>
        </member>
        <member name="M:Ximura.Server.IXimuraSessionManagerAuth.Authenticate(Ximura.IXimuraSessionSCM,System.Byte[])">
            <summary>
            This method will authenticate the user.
            </summary>
            <param name="theSession">The session.</param>
            <param name="hash">The hash.</param>
            <returns>The session state after the authentication request.</returns>
        </member>
        <member name="T:Ximura.ServiceEventArgs">
            <summary>
            The ServiceEventArgs class is used by the component to pass notification 
            of the service status
            </summary>
        </member>
        <member name="M:Ximura.ServiceEventArgs.#ctor">
            <summary>
            The default constructor. The service is defined as Undefined
            </summary>
        </member>
        <member name="M:Ximura.ServiceEventArgs.#ctor(Ximura.XimuraServiceStatus)">
            <summary>
            The main constructor.
            </summary>
            <param name="status">The status of the service.</param>
        </member>
        <member name="P:Ximura.ServiceEventArgs.Status">
            <summary>
            The status of the service
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPerformanceItem">
            <summary>
            This method is 
            </summary>
        </member>
        <member name="T:Ximura.IXimuraLoggingExtended">
            <summary>
            This interface provides extended functionality to enable the EventLogEntryType parameter
            to be passed to the write methods
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLoggingExtended.Write(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners
             collection.
            </summary>
            <param name="message">A message to write. </param>
            <param name="category">A category name used to organize the output.</param>
            <param name="type">The event log type.</param>
        </member>
        <member name="M:Ximura.IXimuraLoggingExtended.WriteLine(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
            <param name="type">The event log type.</param>
        </member>
        <member name="T:Ximura.Data.IXimuraElement">
            <summary>
            IXimuraElement is the base interface for the Element object.
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraElementLeaf">
            <summary>
            This interface is used as the default intreface of the Data Element Composite pattern.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraElementLeaf.IsDirty">
            <summary>
            This is a public function that indicated whether the object
            internal data has been changed since it was created or last saved.
            </summary>
            <returns>A boolean value - true indicates the object has been changed.</returns>
        </member>
        <member name="P:Ximura.Data.IXimuraElementLeaf.Dirty">
            <summary>
            This boolean property indicates whether the object has been changed.
            </summary>
        </member>
        <member name="T:Ximura.Command.RQRSEnvTypes">
            <summary>
            EnvelopeKnownTypes are used by IXimuraRQRSEnvelope to specify special folders 
            within the Envelope
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSEnvTypes.Request">
            <summary>
            This specifies a request
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSEnvTypes.Response">
            <summary>
            This specifies a response
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSEnvTypes.Custom">
            <summary>
            This is for custom folders
            </summary>
        </member>
        <member name="T:Ximura.Command.RQRSContract`2">
            <summary>
            IXimuraRQRSEnvelope is used to hold the information needed for a system request, and is the 
            primary object used to transmit information arounds the Ximura system.
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSContract`2.mPoolTrackingID">
            <summary>
            This ID is used to track the lifecycle of the poolable object, and does not change throughout
            the lifetime of the object.
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSContract`2.mTTL">
            <summary>
            This variable determines the maximum number of hops that the Envelope
            can pass through before it expires.
            </summary>
        </member>
        <member name="F:Ximura.Command.RQRSContract`2.destination">
            <summary>
            This is the destination for the Request
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.#ctor(Ximura.Command.EnvelopeAddress)">
            <summary>
            The constructor that specifies the destination for the request.
            </summary>
            <param name="destination"></param>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.Reset">
            <summary>
            This method resets the object.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.PrepareResponse(System.String,System.String)">
            <summary>
            This shortcut is used to prepare the response status and substatus.
            </summary>
            <param name="status"></param>
            <param name="subStatus"></param>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.Reset(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization reset method.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.ObjectPoolReturn">
            <summary>
            This method returns the IXimuraRQRSEnvelope to the pool.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.Dispose">
            <summary>
            The dispose method.
            </summary>
        </member>
        <member name="M:Ximura.Command.RQRSContract`2.Dispose(System.Boolean)">
            <summary>
            The overrided dispose method
            </summary>
            <param name="disposing">True if this is called by dispose, false if this
            is called by the finalizer.</param>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.DestinationAddress">
            <summary>
            The destination address for the envelope.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.Sender">
            <summary>
            The original sender
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.SenderReference">
            <summary>
            The original sender internal reference 
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.ContractRequest">
            <summary>
            The Contract Request property
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.Request">
            <summary>
            The Request property
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.ContractResponse">
            <summary>
            The Response property
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.Response">
            <summary>
            The backwards compatible response property
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.JobUserID">
            <summary>
            This is the job user ID.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.JobUserReferenceID">
            <summary>
            This is the job user plain text reference ID.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.JobSecurityIdentifier">
            <summary>
            This is the unique job security reference ID.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.CanResetWithDeserialization">
            <summary>
            This propoerty indicates whether the object support a deserialization reset.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.ObjectPool">
            <summary>
            This property contains a reference to the object pool for the IXimuraRQRSEnvelope.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.ObjectPoolCanReturn">
            <summary>
            This property returns true if the object can be returns to the pool.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.Command.RQRSContract`2.TrackID">
            <summary>
            This property is the pool tracking ID.
            </summary>
        </member>
        <member name="T:Ximura.CommandRSCallback">
            <summary>
            The command call back delegate is used for asynchronous command calls.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments including the envelope.</param>
        </member>
        <member name="T:Ximura.DependencyValidateRSCallback">
            <summary>
            The command call back delegate is used for asynchronous command calls.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments including the envelope.</param>
            <returns>Returns the true if the response can be deemed a success, otherwise if this returns false
            any further jobs using this validation ID will be ignored.</returns>
        </member>
        <member name="T:Ximura.CommandProgressCallback">
            <summary>
            This delegate is used to provide feedback for long running jobs.
            </summary>
        </member>
        <member name="T:Ximura.DependencyValidateRSStatus">
            <summary>
            This enumeration is used to signal the job status.
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Failure">
            <summary>
            The job has failed; all further jobs using this dependency key will be ignored, and any queued jobs
            will be cancelled.
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Success">
            <summary>
            The job executed successfully
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Abort">
            <summary>
            The entire completion job will be aborted.
            </summary>
            <remarks>This is not currently implemented and will be treated as a failure.</remarks>
        </member>
        <member name="T:Ximura.CommandRSEventArgs">
            <summary>
            This class is used to send information when a command request completes.
            </summary>
        </member>
        <member name="M:Ximura.CommandRSEventArgs.#ctor(Ximura.Server.JobBase)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:Ximura.CommandRSEventArgs.Reset">
            <summary>
            This method is used for pooling resets.
            </summary>
        </member>
        <member name="P:Ximura.CommandRSEventArgs.Data">
            <summary>
            This is the returning job data.
            </summary>
        </member>
        <member name="P:Ximura.CommandRSEventArgs.ID">
            <summary>
            This is the returning job id.
            </summary>
        </member>
        <member name="T:Ximura.CommandProgressEventArgs">
            <summary>
            This class is used to report progress during a command request.
            </summary>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor">
            <summary>
            This is the empty constructor.
            </summary>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor(System.Int32)">
            <summary>
            This method can be used to return a straight progress indicator.
            </summary>
            <param name="progress">The command progress.</param>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            This method can be used to return a straight progress indicator.
            </summary>
            <param name="progress">The command progress.</param>
            <param name="description">The command progress description.</param>
        </member>
        <member name="P:Ximura.CommandProgressEventArgs.Progress">
            <summary>
            The command progress.
            </summary>
        </member>
        <member name="P:Ximura.CommandProgressEventArgs.Description">
            <summary>
            The progress description.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionThread">
            <summary>
            This interface is used by an app process to request a thread from the thread pool.
            </summary>
        </member>
        <member name="T:Ximura.Command.EnvelopeAddress">
            <summary>
            EnvelopeAddress is used to route a request to the relevant destination within
            the Ximura Application framework.
            </summary>
        </member>
        <member name="F:Ximura.Command.EnvelopeAddress.NullDestination">
            <summary>
            This is the null destination property.
            </summary>
        </member>
        <member name="F:Ximura.Command.EnvelopeAddress.command">
            <summary>
            The destination command ID
            </summary>
        </member>
        <member name="F:Ximura.Command.EnvelopeAddress.SubCommand">
            <summary>
            The subcommand.
            </summary>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.#cctor">
            <summary>
            This is the default static constructor that creates the Null destination address.
            </summary>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.#ctor(System.Guid)">
            <summary>
            This is the default constructor for the address command.
            </summary>
            <param name="command">The destination command ID.</param>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.#ctor(System.Guid,System.Object)">
            <summary>
            This is the default constructor for the Envelope address where a sub command is specified..
            </summary>
            <param name="command">The destination id of the command this message should be sent to.</param>
            <param name="subcommand">The sub address for the command. 
            Set this to Null if you do not require a subcommand.</param>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.Equals(System.Object)">
            <summary>
            This is the equals override.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Returns true if the object is the same as this EnvelopeAddress.</returns>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.GetHashCode">
            <summary>
            This is the hash code of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.Equals(Ximura.Command.EnvelopeAddress)">
            <summary>
            This the equateble interface implementation.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>Returns true if the address is equal.</returns>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.op_Equality(Ximura.Command.EnvelopeAddress,Ximura.Command.EnvelopeAddress)">
            <summary>
            This static operator is the equals operator.
            </summary>
            <param name="a">Op A</param>
            <param name="b">Op B</param>
            <returns>Returns true if the two addresses are the same.</returns>
        </member>
        <member name="M:Ximura.Command.EnvelopeAddress.op_Inequality(Ximura.Command.EnvelopeAddress,Ximura.Command.EnvelopeAddress)">
            <summary>
            This is the not equals operator.
            </summary>
            <param name="a">Op A</param>
            <param name="b">Op B</param>
            <returns>Returns true if the two addresses are not the same.</returns>
        </member>
    </members>
</doc>
