<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ximura</name>
    </assembly>
    <members>
        <member name="T:Ximura.MessageTerminatorCRLFNoFolding">
            <summary>
            This is the default terminator for the MessageCRLFFragment message class.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorCRLFFolding">
            <summary>
            This is the default terminator for the MessageCRLFFragment message class.
            </summary>
        </member>
        <member name="T:Ximura.MessageGenericTerminatorBase`1">
            <summary>
            This class is the base class used for matching message fragment termination in byte based arrays.
            </summary>
            <typeparam name="STATE">The state used for matching termination.</typeparam>
        </member>
        <member name="T:Ximura.PoolableReturnableObjectBase">
            <summary>
            This the base class for the returnable pool object. These objects retain a 
            reference to the pool manager that created them, allowing them to be returned to 
            the pool without a need for the application to keep an external reference of the pool
            manager.
            </summary>
        </member>
        <member name="T:Ximura.PoolableObjectBase">
            <summary>
            This is the base class for object that can be used by the pool. Although you do not need to inherit 
            from this class, this class simplifies the construction of poolable objects.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolableObject">
            <summary>
            This interface is implemented by poolable objects.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolableObject.Reset">
            <summary>
            This method resets the object in to its default state.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolableObject.CanPool">
            <summary>
            This property returns true if the object can pool. This allows inherited objects to turn
            off the ability to be pooled. By default, objects that implement this interface should
            return true if they wish to pool.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolableObject.TrackID">
            <summary>
            This property is used by the object pool for statistical tracking
            of the object through the system. This Guid should be created when the object
            is first created and should not change. The ID is independent of any data actually 
            stored in the object.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.#ctor">
            <summary>
            This is the default constructor. It is called when the object is created by the pool.
            Poolable objects must implement a public default constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Reset">
            <summary>
            This method is called when the object is first created or when the object is 
            returned to the pool. You should override this method and use it to reset all
            poolable object values to their default value and remeove any reference to external
            objects and/or data.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Dispose">
            <summary>
            The dispose method.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectBase.Dispose(System.Boolean)">
            <summary>
            The overrided dispose method
            </summary>
            <param name="disposing">True if this is called by dispose, false if this
            is called by the finalizer.</param>
        </member>
        <member name="P:Ximura.PoolableObjectBase.CanPool">
            <summary>
            This method returns true when the object can be pooled. 
            Override this property if you require more finegrained control.
            </summary>
        </member>
        <member name="P:Ximura.PoolableObjectBase.TrackID">
            <summary>
            This is the track ID for the poolable object. This value will not change between the various
            uses of the object through the application.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolReturnable">
            <summary>
            This interface is implemented by objects that are poolable, and in addition 
            can return themselves to the pool without the need for child objects to have a reference
            to the pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolReturnable.ObjectPoolReturn">
            <summary>
            This method returns the object to the pool
            </summary>
            <returns>Returns true if the object has been successfully returned to the pool.</returns>
        </member>
        <member name="P:Ximura.IXimuraPoolReturnable.ObjectPool">
            <summary>
            This property sets or gets the object pool for the object.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPoolReturnable.ObjectPoolCanReturn">
            <summary>
            This boolean property determines whether the object can be returned to the pool
            for reuse.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.#ctor">
            <summary>
            This is the default constructor. 
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.Reset">
            <summary>
            This is the reset override which removes the reference to the object pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.ObjectPoolReturn">
            <summary>
            This method returns the object to the pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGet(System.Type)">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGet``1">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetObject(System.Type)">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetObject``1">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetReturn(System.Object)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="M:Ximura.PoolableReturnableObjectBase.PoolGetReturn``1(``0)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.ObjectPool">
            <summary>
            This is the object pool that the message belongs to.
            </summary>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.ObjectPoolCanReturn">
            <summary>
            This property specifices whether the object can be returns to the pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolableReturnableObjectBase.PoolManager">
            <summary>
            This is the pool manager that can be used by the IXimuraPoolManagerDirectAccess interface.
            Although the methods and properties are implemented in the base class the actual interface is
            not implemented.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraMessageTermination.IsTerminator">
            <summary>
            This property specifies whether the fragment byte array has reached the termination requirements
            </summary>
        </member>
        <member name="F:Ximura.MessageGenericTerminatorBase`1.mState">
            <summary>
            This is the match state.
            </summary>
        </member>
        <member name="M:Ximura.MessageGenericTerminatorBase`1.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageGenericTerminatorBase`1.Reset">
            <summary>
            This method resets the state.
            </summary>
        </member>
        <member name="M:Ximura.MessageGenericTerminatorBase`1.Match(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64}@)">
            <summary>
            This is the match method. This method maps the incoming buffer to the match parameters.
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="offset">The byte offset/</param>
            <param name="count">The number of bytes that can be read.</param>
            <param name="length">The length of the bytes read.</param>
            <returns>Returns true if a match has been found.</returns>
        </member>
        <member name="P:Ximura.MessageGenericTerminatorBase`1.Initialized">
            <summary>
            This property identifies whether the terminator has been initialized with the boundary.
            </summary>
        </member>
        <member name="P:Ximura.MessageGenericTerminatorBase`1.IsTerminator">
            <summary>
            Returns true if the fragment is a termination setting.
            </summary>
        </member>
        <member name="P:Ximura.MessageGenericTerminatorBase`1.CarryOver">
            <summary>
            The number of carry over bytes in the buffer.
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorCRLFFolding.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorCRLFFolding.Reset">
            <summary>
            This method resets the terminator.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorCRLFFolding.AllowFolding">
            <summary>
            This property specifies whether the message allows folding, that is a CRLF followed by a TAB or SPC character
            is not a termination. Otherwise the terminator will signal a match on CRLF.
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorCRLFNoFolding.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorCRLFNoFolding.AllowFolding">
            <summary>
            This property specifies whether the message allows folding, that is a CRLF followed by a TAB or SPC character
            is not a termination. Otherwise the terminator will signal a match on CRLF.
            </summary>
        </member>
        <member name="T:Ximura.MessageFragment">
            <summary>
            The message fragment class is the base class for message based communication.
            </summary>
        </member>
        <member name="T:Ximura.MessageFragment`1">
            <summary>
            This is the base fragment class that implements fragment functionality.
            </summary>
            <typeparam name="TERM">The termination class.</typeparam>
        </member>
        <member name="T:Ximura.MessageStreamBase">
            <summary>
            The MessageStreamBase is for messages that implement a streaming functionality 
            </summary>
        </member>
        <member name="T:Ximura.MessageBase">
            <summary>
            This is the base class for the various message derivations.
            </summary>
        </member>
        <member name="M:Ximura.MessageBase.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.MessageBase.Reset">
            <summary>
            This is the reset method to set the content.
            </summary>
        </member>
        <member name="P:Ximura.MessageBase.CanLoad">
            <summary>
            This property identifies whether the message can be loaded.
            </summary>
        </member>
        <member name="P:Ximura.MessageBase.Loaded">
            <summary>
            This method returns true if the message has been loaded.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraMessage">
            <summary>
            This interface is used by objects that support the messaging format.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraMessageStreamLoad">
            <summary>
            This interface is used to load the message with its initial data.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraMessageLoad">
            <summary>
            This interface specifies whether the entity can be loaded.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraMessageLoad.CanLoad">
            <summary>
            This boolean property that specifies whether the message can be loaded.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraMessageLoad.Loaded">
            <summary>
            This boolean property specifies whether the entity has been loaded.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraMessageLoadData">
            <summary>
            This interface is used to provide a consistent interface for initializing an entity from a byte stream or array.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraMessage.Direction">
            <summary>
            This property indicates the message direction.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraMessage.IsTerminator">
            <summary>
            This property indicates whether this section signals the end of the message.
            </summary>
        </member>
        <member name="F:Ximura.MessageStreamBase.mCanRead">
            <summary>
            This protected variable defines whether the message can be read.
            </summary>
        </member>
        <member name="F:Ximura.MessageStreamBase.mCanWrite">
            <summary>
            This protected variable defines whether the message can be written to.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.Reset">
            <summary>
            This is the reset method to set the content.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method reads bytes from the buffer in to the message.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The data length.</param>
            <returns>Returns the number of bytes that have been copied tothe buffer.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.MessageStreamBase.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:Ximura.MessageStreamBase.WriteByte(System.Byte)">
            <summary>
            This method writes 1 byte to the message
            </summary>
            <param name="value">The byte value to write</param>
            <returns>Returns the number of bytes actually read by the message.</returns>
        </member>
        <member name="M:Ximura.MessageStreamBase.WriteComplete">
            <summary>
            This method is called when the write status is changed to false and was previously true.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.Close">
            <summary>
            Close returns this object to the pool. You should not reference this object after you have closed it.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.Flush">
            <summary>
            Flush does nothing in the default message.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.ByteBufferChecks(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method does a set of buffer checks for the incoming data.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Ximura.MessageStreamBase.Load">
            <summary>
            This creates a message with the maximum permissible size.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.Load(System.Int64)">
            <summary>
            This method initializes the message for writing to the maximum default size.
            </summary>
            <param name="maxSize">The amximum permissible size for the message base.</param>
        </member>
        <member name="M:Ximura.MessageStreamBase.Load(System.IO.Stream)">
            <summary>
            This method loads the message from a stream.
            </summary>
            <param name="data">The data stream to read from.</param>
            <returns>Returns the number of bytes read from the stream.</returns>
        </member>
        <member name="M:Ximura.MessageStreamBase.Load(System.String)">
            <summary>
            This method initializes the fragment with the default string data.
            </summary>
            <param name="data">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.MessageStreamBase.BeginInit">
            <summary>
            This method begin the load process for the message. During the initialization phase, fragments can be
            added and removed from the collection. Initialization cannot be started once the message has completed
            loading.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.EndInit">
            <summary>
            This method completes the initialization phase and completes the loading process.
            </summary>
        </member>
        <member name="M:Ximura.MessageStreamBase.EndInitCustom">
            <summary>
            This method should be overriden to provide any custom initialization completion code.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.Direction">
            <summary>
            This is the message direction
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.Position">
            <summary>
            This is the data position for the stream.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.Length">
            <summary>
            This method returns the length of the current message.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.BodyLength">
            <summary>
            This is the length of the body. This may be less than the length 
            if there are termination bytes at the end of the message
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.MaxLength">
            <summary>
            This is the maximum length for the message.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.CanRead">
            <summary>
            Then this value is set to true the message stream can be read from.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.CanWrite">
            <summary>
            When this property is set to true, the message stream can be written to.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.DebugString">
            <summary>
            This string provides a ASCII representation of the byte buffer.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.IsTerminator">
            <summary>
            This method returns true if the fragment has completed and is exactly equal to the termination string.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.BufferSizeInitial">
            <summary>
            This property determines in initial incoming buffer size.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.BufferSizeGrow">
            <summary>
            This property determines the incremental growth size when the buffer needs to grow.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.BufferSizePrefer">
            <summary>
            This property determines the prefered size for the buffer. Should the buffer exceed this value, the
            byte array will be recycled once the object returns to the pool.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.BufferSizeMax">
            <summary>
            This property determines the incremental growth size when the buffer needs to grow.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.Initializing">
            <summary>
            This property indicates whether the message is in an initialization phase.
            </summary>
        </member>
        <member name="P:Ximura.MessageStreamBase.SupportsInitialization">
            <summary>
            This property indicates whether the fragment supports initialization.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolManagerDirectAccess">
            <summary>
            This method is for poolable objects that require access to the base pool manager, so that they can retrieve
            additional internal objects from the pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGet(System.Type)">
            <summary>
            This method returns the specific pool manager for the type.
            </summary>
            <param name="objectType"></param>
            <returns>Returns the pool for the object type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGetObject(System.Type)">
            <summary>
            Returns a new object of the type specified.
            </summary>
            <param name="objectType">The object type required.</param>
            <returns>Returns a poolable object of the type defined.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManagerDirectAccess.PoolGetReturn(System.Object)">
            <summary>
            This method returns the object to the appropriate pool.
            </summary>
            <param name="poolObject">The object to return.</param>
        </member>
        <member name="P:Ximura.IXimuraPoolManagerDirectAccess.PoolManager">
            <summary>
            This is the pool manager for the object.
            </summary>
        </member>
        <member name="F:Ximura.MessageFragment`1.mTerminator">
            <summary>
            This is terminator for the fragment.
            </summary>
        </member>
        <member name="F:Ximura.MessageFragment`1.mBuffer">
            <summary>
            This is the byte buffer for the fragment.
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment`1.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment`1.Reset">
            <summary>
            This is the reset method to set the content.
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment`1.ResetBuffer">
            <summary>
            This method resets the buffer to its default size.
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment`1.EnsureCapacity(System.Int32)">
            <summary>
            This method ensures that the internal buffer has the necessary write capacity.
            </summary>
            <param name="length">The length of bytes to write.</param>
        </member>
        <member name="M:Ximura.MessageFragment`1.CalculateCapacity(System.Int32)">
            <summary>
            This method calculates the new size of the buffer.
            </summary>
            <param name="length">The full length.</param>
            <returns>Returns the length rounded up to the nearest growth factor.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.ShrinkCapacityToFit">
            <summary>
            This method shrinks the buffer size to the actual size of the data.
            This can be useful when the message is not shortlived and does not live in a pool.
            </summary>
            <returns>Returns true if the buffer has been shrunk.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.ResetTerminator">
            <summary>
            This method resets the terminator and returns it to the object pool. For messages that have a fixed terminator, 
            this method should be overrided and should create the default terminator if the terminator is null, or reset the terminator.
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment`1.ResetTerminator(`0)">
            <summary>
            This method resets the terminator with a new terminator.
            </summary>
            <param name="newTerminator">The new terminator.</param>
        </member>
        <member name="M:Ximura.MessageFragment`1.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method reads from the fragment.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The data length.</param>
            <returns>The number of byte written in to the buffer.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.MessageFragment`1.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:Ximura.MessageFragment`1.WriteProcessTerminator(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method searches writes the incoming stream to the buffer, but terminates when it reaches 
            the termination characters.
            </summary>
            <param name="buffer">The incoming buffer.</param>
            <param name="offset">The offset</param>
            <param name="count">The number of bytes available.</param>
            <returns>Returns the number of bytes read from the incoming buffer.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.Load(System.IO.Stream)">
            <summary>
            This method loads the fragment with the initial data from a stream.
            </summary>
            <param name="strmData">THe stream to read from.</param>
            <returns>Returns the number of bytes read from the stream.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.Load(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method loads the fragment with the initial data.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count of the number of bytes.</param>
            <returns>Returns the number of bytes read from the buffer.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.ToArray">
            <summary>
            This method outputs a copy of the current byte array.
            </summary>
            <returns>Returns a copy of the internal byte array.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.ToArray(System.Boolean)">
            <summary>
            This method outputs the current byte array.
            </summary>
            <param name="copy">The boolean value should be set to true if you require a copy 
            of the internal array, or the actual array.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:Ximura.MessageFragment`1.Dispose(System.Boolean)">
            <summary>
            This is the dispose override.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Ximura.MessageFragment`1.Terminator">
            <summary>
            This is the fragment terminator used to close off the fragment.
            </summary>
        </member>
        <member name="P:Ximura.MessageFragment`1.IsTerminator">
            <summary>
            This method returns true if the fragment has completed and is exactly equal to the termination string.
            </summary>
        </member>
        <member name="P:Ximura.MessageFragment`1.TerminationType">
            <summary>
            This method specifiies the termination logic for the fragment.
            </summary>
        </member>
        <member name="P:Ximura.MessageFragment`1.DebugString">
            <summary>
            This string provides a ASCII representation of the byte buffer.
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageFragment.ResetTerminator">
            <summary>
            The method resets the terminator and returns it to the pool.
            </summary>
        </member>
        <member name="T:Ximura.CSVDataFragment">
            <summary>
            This class holds the data items for the collection.
            </summary>
        </member>
        <member name="T:Ximura.CSVBaseFragment">
            <summary>
            This fragment holds the individual line items from the CSV file.
            </summary>
        </member>
        <member name="M:Ximura.CSVBaseFragment.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.CSVBaseFragment.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This override writes the data and also shrinks the buffer to fit the actual size of the data
            as this will generally not be participating as part of a pool.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The byte offset.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Returns the number of bytes read from the incoming buffer.</returns>
        </member>
        <member name="M:Ximura.CSVBaseFragment.Reset">
            <summary>
            This override resets the default encoding.
            </summary>
        </member>
        <member name="P:Ximura.CSVBaseFragment.Items">
            <summary>
            This enumeration returns the items in the CSV line.
            </summary>
        </member>
        <member name="P:Ximura.CSVBaseFragment.DataString">
            <summary>
            This is the string representation of the data using the default encoding.
            </summary>
        </member>
        <member name="P:Ximura.CSVBaseFragment.DefaultEncoding">
            <summary>
            This is the default encoding for the message
            </summary>
        </member>
        <member name="M:Ximura.CSVDataFragment.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="T:Ximura.Reflection">
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
            <summary>
            The reflection helper provides help on creating objects using reflection.
            </summary>
        </member>
        <member name="F:Ximura.Reflection.MemberAccess">
            <summary>
            Binding Flags constant to be reused for all Reflection access methods.
            </summary>
        </member>
        <member name="M:Ximura.Reflection.GetProperty(System.Object,System.String)">
            <summary>
            Retrieve a property value from an object dynamically. This is a simple version
            that uses Reflection calls directly. It doesn't support indexers.
            </summary>
            <param name="Object">Object to make the call on</param>
            <param name="Property">Property to retrieve</param>
            <returns>Object - cast to proper type</returns>
        </member>
        <member name="M:Ximura.Reflection.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property on an object. This is a simple method that uses straight Reflection 
            and doesn't support indexers.
            </summary>
            <param name="Object">Object to set property on</param>
            <param name="Property">Name of the property to set</param>
            <param name="Value">value to set it to</param>
        </member>
        <member name="M:Ximura.Reflection.GetPropertyEx(System.Object,System.String)">
            <summary>
            Returns a property or field value using a base object and sub members including . syntax.
            For example, you can access: this.oCustomer.oData.Company with (this,"oCustomer.oData.Company")
            This method also supports indexers in the Property value such as:
            Customer.DataSet.Tables["Customers"].Rows[0]
            </summary>
            <param name="Parent">Parent object to 'start' parsing from. Typically this will be the Page.</param>
            <param name="Property">The property to retrieve. Example: 'Customer.Entity.Company'</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.SetPropertyEx(System.Object,System.String,System.Object)">
            <summary>
            Sets a value on an object. Supports . syntax for named properties
            (ie. Customer.Entity.Company) as well as indexers.
            </summary>
            <param name="Object Parent">
            Object to set the property on.
            </param>
            <param name="String Property">
            Property to set. Can be an object hierarchy with . syntax and can 
            include indexers. Examples: Customer.Entity.Company, 
            Customer.DataSet.Tables["Customers"].Rows[0]
            </param>
            <param name="Object Value">
            Value to set the property to
            </param>
        </member>
        <member name="M:Ximura.Reflection.GetPropertyInternal(System.Object,System.String)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            Used internally for the 'Ex' Reflection methods.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.SetPropertyInternal(System.Object,System.String,System.Object)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object dynamically.
            </summary>
            <param name="Params"></param>
            1st - Method name, 2nd - 1st parameter, 3rd - 2nd parm etc.
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.String)">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.String,System.Object[])">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.String,System.Object[],System.Type)">
            <summary>
            This method will create an instance of a class object from the typeName.
            </summary>
            <param name="typeName">The typeName to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <param name="callingType">The calling type. This is used to search referenced assemblies.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.Type)">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.Type,System.Object[])">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateObjectFromType(System.Type,System.Object[],System.Type[])">
            <summary>
            This method will create an instance of a class object from the class type.
            </summary>
            <param name="classType">The class type to create an instance of.</param>
            <param name="parameters">A parameter array of object type for the class constructor</param>
            <param name="types">The types collection.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Ximura.Reflection.#cctor">
            <summary>
            This static constructor creates the Type/string lookup cache.
            </summary>
        </member>
        <member name="M:Ximura.Reflection.getTypesfromObjectArray(System.Object[])">
            <summary>
            This method returns a array of System types corresponsing to the object passed
            </summary>
            <param name="theObjects">An array of objects</param>
            <returns>An array of ooject types</returns>
        </member>
        <member name="M:Ximura.Reflection.ValidateInterface(System.Type,System.Type)">
            <summary>
            This public static method caches interface implementation for type checking. This is 
            used to boost performance when checking large amounts of types.
            </summary>
            <param name="objectType">The type for the object you wish to check.</param>
            <param name="interfaceType">The type for the interface you wish to check.</param>
            <returns>Returns true if the interface is implemented.</returns>
        </member>
        <member name="M:Ximura.Reflection.ResourceLoadStream(System.String)">
            <summary>
            This method reads a binary definition from an assembly based on the resource name.
            Note: this method will attempt to load the assembly if it is not loaded.
            </summary>
            <param name="resourceName">The resource name.</param>
            <returns>Returns an unmanaged stream containing the data.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateTypeFromString(System.String)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <returns>The type or null if the name cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateTypeFromString(System.String,System.Type)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <param name="callingType">The type of the calling object.</param>
            <returns>The type or null if the name cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateTypeFromString(System.String,System.Type,System.Boolean)">
            <summary>
            This method returns the relevant type resolved from the nale
            </summary>
            <param name="typeName">The type name to resolve.</param>
            <param name="callingType">The type of the calling object.</param>
            <param name="allowRelative">Set this to true if you allow relative paths to the type, i.e. less specific references.</param>
            <returns>The Type for the object or null if the type cannot be found.</returns>
        </member>
        <member name="M:Ximura.Reflection.CreateTypeFromStringNoCache(System.String,System.Type)">
            <summary>
            This method creates an object from the type name passed.
            </summary>
            <param name="typeName">The tpye name.</param>
            <param name="callingType">The calling type used as a reference.</param>
            <returns>Returns a new object of the required type 
            or null if the object cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.Reflection.ResourceLoadFromUri(System.Uri)">
            <summary>
            This method loads a resource from the xmrres resource location specified.
            </summary>
            <param name="location">The location.</param>
            <returns>Returns a byte array containing the resource.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown when the resource cannot be resolved.</exception>
        </member>
        <member name="M:Ximura.Reflection.ResourceResolveType(System.Uri)">
            <summary>
            This method will return the type specified in the xmrres resource string.
            </summary>
            <param name="location">The resource location.</param>
            <returns>Returns the type specified.</returns>
        </member>
        <member name="M:Ximura.Reflection.ResourceCheck(System.Uri)">
            <summary>
            This method checks whether the xmrres resource uri is correctly formatted.
            </summary>
            <param name="location">The xmrres resource location.</param>
        </member>
        <member name="M:Ximura.Reflection.ResourceResolve(System.Type,System.String)">
            <summary>
            This method resolves an embedded resource as a byte array.
            </summary>
            <param name="locationType">The type</param>
            <param name="resource">The resource to resolve.</param>
            <returns>Returns a byte array.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown when the resource cannot be resolved.</exception>
        </member>
        <member name="M:Ximura.Reflection.ResourceAsStream(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="locationType"></param>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.ResourceResolveAsStream(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="locationType"></param>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Reflection.ResolveResourceFromName(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.ILockable">
            <summary>
            This interface is implemented by items that are individually lockable.
            </summary>
        </member>
        <member name="M:Ximura.ILockable.Lock">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.ILockable.LockWait">
            <summary>
            This method halts any threads if the item is locked.
            </summary>
        </member>
        <member name="M:Ximura.ILockable.TryLock">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.ILockable.Unlock">
            <summary>
            This method unlocks the item.
            </summary>
        </member>
        <member name="P:Ximura.ILockable.IsLocked">
            <summary>
            Returns true if the item is locked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="T:Ximura.UnicodeCharEnumerator">
            <summary>
            This class is used to convert a byte stream in to a set of unicode characters.
            </summary>
        </member>
        <member name="T:Ximura.ObjectEnumerator`2">
            <summary>
            This generic class is used to convert a data source (D) in to a set of discrete data items (O).
            </summary>
            <typeparam name="D">The source data type, i.e. stream</typeparam>
            <typeparam name="O">The output record data type, i.e. int</typeparam>
        </member>
        <member name="F:Ximura.ObjectEnumerator`2.mData">
            <summary>
            This is the data source.
            </summary>
        </member>
        <member name="F:Ximura.ObjectEnumerator`2.mParse">
            <summary>
            This is the parsing function that converts the data collection in to a record.
            </summary>
        </member>
        <member name="M:Ximura.ObjectEnumerator`2.#ctor(`0,System.Func{`0,System.Nullable{Ximura.Tuple{`1,`0}}})">
            <summary>
            This is the protected constructor.
            </summary>
            <param name="data">The data source.</param>
            <param name="parse">The parsing function.</param>
        </member>
        <member name="M:Ximura.ObjectEnumerator`2.Parse(`0)">
            <summary>
            This method can be used to parse the data instead of using a function.
            </summary>
            <param name="data">The data.</param>
            <returns>Returns an individual record.</returns>
        </member>
        <member name="M:Ximura.ObjectEnumerator`2.GetEnumerator">
            <summary>
            This is the default object enumerator.
            </summary>
            <returns>Returns the object collection.</returns>
        </member>
        <member name="M:Ximura.UnicodeCharEnumerator.#ctor(System.IO.Stream)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="data">The stream to read from.</param>
        </member>
        <member name="M:Ximura.UnicodeCharEnumerator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="data">The stream to read from.</param>
            <param name="enc">The encoding type for the file.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.UnicodeCharEnumerator.Parse(System.IO.Stream)" -->
        <member name="M:Ximura.UnicodeCharEnumerator.SkipPreamble(System.IO.Stream,System.Int32@)">
            <summary>
            This method skips any encoding preamble bytes at the start of the stream.
            </summary>
            <param name="data">The data stream.</param>
            <param name="item">The first character after the preamble.</param>
            <returns>Returns true if the enumeration can proceed. False if the end of the stream has been reached.</returns>
        </member>
        <member name="P:Ximura.UnicodeCharEnumerator.Enc">
            <summary>
            This is the encoding used for the char enumerator.
            </summary>
        </member>
        <member name="T:Ximura.Common">
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
            <summary>
            The <b>Common</b> class includes a number of useful utilities.
            </summary>
        </member>
        <member name="M:Ximura.Common.Enc_EncodeByteToHex(System.Byte[])">
            <summary>
            This function converts a binary array in to a hexadecimal string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>A string that represents the byte array as hexadecimal</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception 
            is thrown if the offset and the length and greater than the 
            binary array length.</exception>
        </member>
        <member name="M:Ximura.Common.Enc_EncodeByteToHex(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function converts a binary array in to a hexadecimal string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <param name="offset">The starting point in the byte array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>A string that represents the byte array as hexadecimal</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception 
            is thrown if the offset and the length and greater than the 
            binary array length.</exception>
        </member>
        <member name="M:Ximura.Common.Enc_DecodeHexAsByte(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method decodes a hex string and inserts it into a byte array.
            </summary>
            <param name="HexString">The hex string that you wish to parse.</param>
            <param name="data">The byte array that you wish to be updated</param>
            <param name="offset">The point within the byte array that the method should start inserting encoded data.</param>
            <param name="length">The number of decoded bytes that the method should insert in the byte array.</param>
            <exception cref="T:System.ArgumentException">This exception is thrown if the hex 
            string is not divisible by 2. All strings should be left padded with 0 to ensure
            that they are divisible by 2.</exception>
        </member>
        <member name="M:Ximura.Common.Enc_DecodeHexString(System.String)">
            <summary>
            This method decodes a hex string and returns it as a byte array.
            </summary>
            <param name="HexString">The hex string to decode.</param>
            <returns>A byte array containing the bytes corresponding to the decoded string.</returns>
            <exception cref="T:System.ArgumentException">This exception is thrown if the hex 
            string is not divisible by 2. All strings should be left padded with 0 to ensure
            that they are divisible by 2.</exception>
        </member>
        <member name="M:Ximura.Common.IsDateTime(System.String)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Common.IsDateTime(System.String,System.String)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <param name="timeValue">The time value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Common.IsDateTime(System.String,System.String,System.Nullable{System.DateTime}@)">
            <summary>
            This method tests whether a string is a DateTime.
            </summary>
            <param name="dateValue">The date value.</param>
            <param name="timeValue">The time value.</param>
            <returns>Returns true if the string is a date.</returns>
        </member>
        <member name="M:Ximura.Common.ConvertToRFC1123DateString(System.DateTime)">
            <summary>
            This method converts a datetime parameter to an RFC1123 string formar.
            </summary>
            <param name="dt">The date time.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Ximura.Common.ToRFC1123String(System.DateTime)">
            <summary>
            This method converts a datetime parameter to an RFC1123 string formar.
            </summary>
            <param name="dt">The date time.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Ximura.Common.ConvertToISO8601DateString(System.String)">
            <summary>
            Function to convert string to ISO8601 datetime string yyyy-MM-ddTHH:mm:ss
            </summary>
            <param name="strDateTime">string in special format ( yyyyMMdd | yyyyMMddHH | yyyyMMddHHmm | yyyyMMddHHmmss</param>		
            <returns>ISO8601 datetime string</returns>
        </member>
        <member name="M:Ximura.Common.ConvertToISO8601DateString(System.DateTime)">
            <summary>
            Function to convert datetime to ISO8601 datetime string yyyy-MM-ddTHH:mm:ss
            </summary>
            <param name="dtDateTime">datetime</param>		
            <returns>ISO8601 datetime string</returns>
        </member>
        <member name="M:Ximura.Common.AdjustCentury(System.String)">
            <summary>
            This method adjusts the incoming 6 digit date to a 8 digit date with the century included.
            </summary>
            <param name="strDate">date</param>		
            <returns>8-digit string</returns>
        </member>
        <member name="M:Ximura.Common.GuessYear(System.Int32)">
            <summary>
            Guess the Year based on the Month and the Current Year
            </summary>
            <param name="Month">Month</param>
            <returns>Year</returns>
        </member>
        <member name="M:Ximura.Common.GuessCentury(System.Int32)">
            <summary>
            Guess the Century of the 2-digit Year, calculated based on the current century +/- 50 years
            </summary>
            <param name="Year">Year</param>
            <returns>Century</returns>
        </member>
        <member name="M:Ximura.Common.GetWeekNumberInMonth(System.DateTime)">
            <summary>
            Obtain the week number of the date in the current month.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.GetWeekOccuranceInMonth(System.DateTime)">
            <summary>
            Obtain the week occurance number in current month.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.GetLastWeekNumberInMonth(System.DateTime)">
            <summary>
            Obtain the last week number of the current day of week in the current month
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.GetLastWeekOccuranceInMonth(System.DateTime)">
            <summary>
            Obtain the last week occurance number of the current day of week in current month
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.InBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Check if the verify date is equal or in between the interval start and end date.
            </summary>
            <param name="comparer"></param>
            <param name="intervalStart"></param>
            <param name="internalEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.CommandArgsParse(System.String[])">
            <summary>
            
            </summary>
            <param name="Args"></param>
            <returns>Returns a dictionary containing the collection of parameters and values.</returns>
        </member>
        <member name="M:Ximura.Common.CommandArgsParse(System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="Args"></param>
            <param name="throwErrors"></param>
            <returns>Returns a dictionary containing the collection of parameters and values.</returns>
        </member>
        <member name="M:Ximura.Common.CommandArgsParse(System.String[],System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Args"></param>
            <param name="strStart"></param>
            <param name="throwErrors"></param>
            <returns>Returns a dictionary containing the collection of parameters and values.</returns>
        </member>
        <member name="M:Ximura.Common.CommandArgsParse(System.String[],System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Args"></param>
            <param name="strStart"></param>
            <param name="strDelim"></param>
            <param name="throwErrors"></param>
            <returns>Returns a dictionary containing the collection of parameters and values.</returns>
        </member>
        <member name="M:Ximura.Common.XmlDecode(System.String)">
            <summary>
            Handle the special xml decode.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.StringToTypedValue(System.String,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Turns a string into a typed value. Useful for auto-conversion routines
            like form variable or XML parsers.
            <seealso>Class wwUtils</seealso>
            </summary>
            <param name="SourceString">
            The string to convert from
            </param>
            <param name="TargetType">
            The type to convert to
            </param>
            <param name="Culture">
            Culture used for numeric and datetime values.
            </param>
            <returns>object. Throws exception if it cannot be converted.</returns>
        </member>
        <member name="M:Ximura.Common.StringToTypedValue(System.String,System.Type)">
            <summary>
            Turns a string into a typed value. Useful for auto-conversion routines
            like form variable or XML parsers.
            </summary>
            <param name="SourceString">The input string to convert</param>
            <param name="TargetType">The Type to convert it to</param>
            <returns>object reference. Throws Exception if type can not be converted</returns>
        </member>
        <member name="M:Ximura.Common.SplitOnChars``2(System.String,System.Converter{System.String,``0},System.Converter{System.String,``1},System.Char[],System.Char[])">
            <summary>
            This method is used to split string pairs.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="toSplit"></param>
            <param name="convertT"></param>
            <param name="convertU"></param>
            <param name="split1"></param>
            <param name="split2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.SplitOnCharsUnique``2(System.String,System.Converter{System.String,``0},System.Converter{System.String,``1},System.Char[],System.Char[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="toSplit"></param>
            <param name="convertT"></param>
            <param name="convertU"></param>
            <param name="split1"></param>
            <param name="split2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.ConvertHexStringToBase64(System.String)">
            <summary>
            Converting a hex string to base 64 string
            </summary>
            <param name="HexString"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.ConvertBase64ToHexString(System.String)">
            <summary>
            Converts a Base64 string in to a hex string.
            </summary>
            <param name="base64String">The base64 string.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:Ximura.Common.ConvertStringToByte(System.String)">
            <summary>
            Converting a string to byte[] using UTF8 encoding
            </summary>
            <param name="stringToHash"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.ComputeHash(System.String)">
            <summary>
            Function to hash a string by default hash algorithm (MD5)
            </summary>
            <param name="stringToHash">String to hash</param>
            <returns>Hashed string</returns>
        </member>
        <member name="M:Ximura.Common.ComputeHash(System.String,Ximura.Common.HashAlgorithmType)">
            <summary>
            Function to hash a string by specific hash algorithm
            </summary>
            <param name="stringToHash">String to hash</param>
            <param name="hashType">Hash Algorithm Type</param>
            <returns>Hashed string</returns>
        </member>
        <member name="M:Ximura.Common.ComputeHash(System.Byte[])">
            <summary>
            Function to hash a byte[] by default hash algorithm (MD5) 
            </summary>
            <param name="HashValue">Byte[] to hash</param>
            <returns>Hashed byte[]</returns>
        </member>
        <member name="M:Ximura.Common.ComputeHash(System.Byte[],Ximura.Common.HashAlgorithmType)">
            <summary>
            Function to hash a byte[] by specific hash algorithm
            </summary>
            <param name="HashValue">Byte[] to hash</param>
            <param name="hashType">Hash Algorithm Type</param>
            <returns>Hashed byte[]</returns>
        </member>
        <member name="M:Ximura.Common.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            This method compares two byte arrays and returns true is the two are equal.
            </summary>
            <param name="Array1"></param>
            <param name="Array2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.ConcatenateByteArray(System.Byte[],System.Byte[])">
            <summary>
            This method concatenates two byte arrays and returns the concatenation.
            </summary>
            <param name="Array1"></param>
            <param name="Array2"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.CreateSeedHash(System.String,System.String)">
            <summary>
            Create a salted password given the salt value.
            </summary>
            <param name="seedValue">The seed as a byte array</param>
            <param name="unsaltedPassword">The password as a string</param>
            <returns>A hash byte array</returns>
        </member>
        <member name="M:Ximura.Common.CreateSeedHash(System.Byte[],System.Byte[])">
            <summary>
            Create a salted password given the salt value.
            </summary>
            <param name="seedValue">The seed as a byte array</param>
            <param name="unsaltedPassword">The password as a UTF-8 byte array</param>
            <returns>A hash byte array</returns>
        </member>
        <member name="M:Ximura.Common.SelectHashAlgorithm(System.String)">
            <summary>
            This method selects the appropriate hash algorithm based on the value submitted.
            </summary>
            <param name="hashType">The hash algorithm identifier.</param>
            <returns>Returns the selected hash algorithm.</returns>
        </member>
        <member name="M:Ximura.Common.CreatePasswordHash(System.String,System.String)">
            <summary>
            This method creates a password hash from a byte64 encoded text seed and plain text password
            </summary>
            <param name="Seed"></param>
            <param name="Pass"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Common.ASCByt(System.String)">
            <summary>
            This converts a string in to an ASCII byte array. This method
            adds a CRLF at the end of the string by default.
            </summary>
            <param name="strData">The string you wish to convert.</param>
            <returns>A byte array containing an ASCII representation of the string.</returns>
        </member>
        <member name="M:Ximura.Common.ASCByt(System.String,System.Boolean)">
            <summary>
            This converts a string in to an ASCII byte array.
            </summary>
            <param name="strData">The string you wish to convert.</param>
            <param name="blnAddCRLF">Select true if you want a new line appended at the end.</param>
            <returns>A byte array containing an ASCII representation of the string.</returns>
        </member>
        <member name="M:Ximura.Common.IsNumeric(System.String)">
            <summary>
            This method tests whether a string is numeric.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.Common.HTTPCodes">
            <summary>
            This class provides shortcuts to the HTTP codes.
            </summary>
        </member>
        <member name="M:Ximura.Common.HTTPCodes.IsHTTPError(System.String)">
            <summary>
            This method returns true if the status is an HTTP error.
            </summary>
            <param name="status">The status to check.</param>
            <returns>Returns true if the status code denotes an error.</returns>
        </member>
        <member name="M:Ximura.Common.HTTPCodes.IsServerError(System.String)">
            <summary>
            This method returns true if the status code is an error.
            </summary>
            <param name="status">The status to check.</param>
            <returns>Returns true if the status code denotes an error.</returns>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Continue_100">
            <summary>
            100: Continue
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.SwitchingProtocols_101">
            <summary>
            101: Switching Protocols
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.OK_200">
            <summary>
            200: OK
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Created_201">
            <summary>
            201: Created
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Accepted_202">
            <summary>
            202: Accepted
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NonAuthoritative_203">
            <summary>
            203: Non Authoritative
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NoContent_204">
            <summary>
            204: No Content
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.ResetContent_205">
            <summary>
            205: Reset Content
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.PartialContent_206">
            <summary>
            206: Partial Content
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.MultipleChoices_300">
            <summary>
            300: Multiple Choices
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.MovedPermanently_301">
            <summary>
            301: Moved Permanently
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Found_302">
            <summary>
            302: Found
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.SeeOther_303">
            <summary>
            303: See Other
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NotModified_304">
            <summary>
            304: Not Modified
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.UseProxy_305">
            <summary>
            305: Use Proxy
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.ReDirectionCommandNotUsed_306">
            <summary>
            306: Redirection Command Not Used
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.MovedTemporarily_307">
            <summary>
            307: Moved Temporarily
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.BadRequest_400">
            <summary>
            400: Bad Request
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Unauthorized_401">
            <summary>
            401: Unauthorized
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.PaymentRequired_402">
            <summary>
            402: Payment Required
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Forbidden_403">
            <summary>
            403: Forbidden
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NotFound_404">
            <summary>
            404: Not Found
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.MethodNotAllowed_405">
            <summary>
            405: Method Not Allowed
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NotAcceptable_406">
            <summary>
            406: Not Acceptable
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.ProxyAuthenticationRequired_407">
            <summary>
            407: Proxy Authentication Required
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.RequestTimeout_408">
            <summary>
            408: Request Timeout
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Conflict_409">
            <summary>
            409: Conflict
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.Gone_410">
            <summary>
            410: Gone
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.LengthRequired_411">
            <summary>
            411: Length Required
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.PreconditionFailed_412">
            <summary>
            412: Precondition Failed
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.RequestEntityTooLarge_413">
            <summary>
            413: Request Entity Too Large
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.RequestURITooLong_414">
            <summary>
            414: Request URI Too Long
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.UnsupportedMediaType_415">
            <summary>
            415: Unsupported Media Type
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.RequestedRangeNotSatisfiable_416">
            <summary>
            416: Requested Range Not Satisfiable
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.ExpectationFailed_417">
            <summary>
            417: Expectation Failed
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.InternalServerError_500">
            <summary>
            500: Internal Server Error
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.NotImplemented_501">
            <summary>
            501: Not Implemented
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.BadGateway_502">
            <summary>
            502: Bad Gateway
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.ServiceUnavailable_503">
            <summary>
            503: Service Unavailable
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.GatewayTimeout_504">
            <summary>
            504: Gateway Timeout
            </summary>
        </member>
        <member name="P:Ximura.Common.HTTPCodes.VersionNotSupported_505">
            <summary>
            505: Version No tSupported
            </summary>
        </member>
        <member name="T:Ximura.Common.HashAlgorithmType">
            <summary>
            Enumeration list for hash algorithms
            </summary>
        </member>
        <member name="T:Ximura.MaxSizeMessageException">
            <summary>
            This exception is thrown should the message exceed the maximum permitted size.
            </summary>
        </member>
        <member name="T:Ximura.MessageException">
            <summary>
            This is the base exception for the Message class.
            </summary>
        </member>
        <member name="T:Ximura.XimuraException">
            <summary>
            XimuraException is the root exception object for the Ximura system.
            </summary>
        </member>
        <member name="M:Ximura.XimuraException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.XimuraException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Ximura.XimuraException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provides serialization functionality.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Ximura.XimuraException.LogException(Ximura.IXimuraLogging)">
            <summary>
            This is a shortcut to log the exception message to the Ximura Logging provider. 
            This may be overriden in derived classes to provide a more detailed breakdown.
            </summary>
            <param name="provider">The Ximura logging provider to log to.</param>
            <returns>A boolean value. True indicated that the message was successfully logged.</returns>
        </member>
        <member name="M:Ximura.MessageException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.MessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.MessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.MessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Ximura.MaxSizeMessageException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.MaxSizeMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.MaxSizeMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.MaxSizeMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.XimuraComponentBaseHelper">
            <summary>
            This helper provides service based functionality for the components that require it.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraServiceContainer">
            <summary>
            This interface provides extended functionality for the service based architecture.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraServiceContainer.AddService(System.Type,System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth the service should be promoted. Set this value to -1 if you require it to be unlimited.</param>
        </member>
        <member name="M:Ximura.IXimuraServiceContainer.GetService(System.Type,System.Int32)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="depth">The service depth. If this is set to -1 the depth is unlimited.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="F:Ximura.XimuraComponentBaseHelper.mServices">
            <summary>
            The service collection.
            </summary>
        </member>
        <member name="F:Ximura.XimuraComponentBaseHelper.currentType">
            <summary>
            currentType is used to identify the parent during debegging time.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.#ctor(System.Type)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.RemoveService``1">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <typeparam name="T">The type of service to remove.</typeparam>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.RemoveService``1(System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <typeparam name="T">The type of service to remove.</typeparam>
            <param name="promote">Should be set to true if this service should be removed 
            from any parent service containers.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">Should be set to true if this service should be removed 
            from any parent service containers.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService``1(System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the service to the service container.
            </summary>
            <typeparam name="T">The type of service to add.</typeparam>
            <param name="callback">A callback delegate the create the service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService``1(``0)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The type of service to add.</typeparam>
            <param name="serviceInstance">The service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.Object)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService``1(System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The type of service to add.</typeparam>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService``1(System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The type of service to add.</typeparam>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth to promote the service. If this is set to -1 the depth in unlimited.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth to promote the service. If this is set to -1 the depth in unlimited.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.XimuraComponentBaseHelper.AddService``1(``0,System.Boolean)" -->
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.XimuraComponentBaseHelper.AddService``1(``0,System.Boolean,System.Int32)" -->
        <member name="M:Ximura.XimuraComponentBaseHelper.AddService(System.Type,System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth the service should be promoted. Set this value to -1 if you require it to be unlimited.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.GetService``1">
            <summary>
            This method returns the requested service.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.GetService``1(System.Int32)">
            <summary>
            This method returns the requested service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="depth">The service depth. If this is set to -1 the depth is unlimited.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.System#IServiceProvider#GetService(System.Type)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBaseHelper.GetService(System.Type,System.Int32)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="depth">The service depth. If this is set to -1 the depth is unlimited.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="P:Ximura.XimuraComponentBaseHelper.Services">
            <summary>
            This hashtable contains the locally registered services.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentBaseHelper.Site">
            <summary>
            This override property calls the SiteChanged method when the site changes
            for the component.
            </summary>
        </member>
        <member name="T:Ximura.XimuraComponentBaseHelper.ServiceScope">
            <summary>
            The service scope structure holds a record of all the services
            registered to the component.
            </summary>
        </member>
        <member name="T:Ximura.Collections.SkipListClassBasedVertexArray`1">
            <summary>
            This vertex array implements the data as a skip list array.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.MultiLevelClassBasedVertexArray`1">
            <summary>
            This is the base class for class based data arrays.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.ClassBasedVertexArray`1">
            <summary>
            This is the base class for class based data arrays.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.VertexArray`1">
            <summary>
            The vertex array class provides basic linked list expandable array support.
            </summary>
            <typeparam name="T">The collection data type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.BitReverse(System.Int32)">
            <summary>
            This method reverses the hashcode so that it is ordered in reverse based on bit value, i.e.
            xxx1011 => 1101xxxx => Bucket 1 1xxxxx => Bucket 3 11xxxxx => Bucket 6 110xxx etc.
            </summary>
            <param name="data">The data to reverse></param>
            <returns>Returns the reversed data</returns>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mEqComparer">
            <summary>
            This is the collection comparer.
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mIsFixedSize">
            <summary>
            This property specifies whether the collection is a fixed size.
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mVersion">
            <summary>
            The version value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mCount">
            <summary>
            This is the current item count.
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mDefaultTCount">
            <summary>
            This is the current default(T) item capacity. 
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mContainScanUnlockedMiss">
            <summary>
            This variable contains the number of scan misses.
            </summary>
        </member>
        <member name="F:Ximura.Collections.VertexArray`1.mContainScanMissThreshold">
            <summary>
            This is the threshold where locked scans should be processed.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.Initialize(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            This method initializes the data collection.
            </summary>
            <param name="eqComparer">The equality comparer for the collection.</param>
            <param name="isFixedSize">Specifies whether the collection is a fixed size.</param>
            <param name="capacity">The initial capacity.</param>
            <param name="allowNullValues">This boolean values specifies whether null values are allowed in the collection.</param>
            <param name="allowMultipleEntries">This boolean value specicifies whether the collection allows items to exist 
            more than once in the collection.</param>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.InitializeData(System.Int32)">
            <summary>
            This method initializes the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.GetEnumerator">
            <summary>
            This method returns an enumeration through the sentinels and data in the collection.
            </summary>
            <returns>Returns an enumeration containing the collection data.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.VertexWindowGet">
            <summary>
            This method returns a vertex window for the first item in the array.
            </summary>
            <returns>A vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.VertexWindowGet(`0,System.Boolean)">
            <summary>
            This method returns a vertex window for the item specified.
            </summary>
            <param name="item">The item that requires a search window.</param>
            <param name="createSentinel">The value specifies whether any missing sentinels should be created.</param>
            <returns>A vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.CountIncrement">
            <summary>
            This method increments the count.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.CountIncrement(System.Int32)">
            <summary>
            This method increments the count by a specific value.
            </summary>
            <param name="value">The value to increment the count by.</param>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.CountDecrement">
            <summary>
            This method decrements the count.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.DefaultTAdd">
            <summary>
            This method increments the defaultT value where appropriate.
            </summary>
            <returns>Returns true if the operation was successful.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.DefaultTDelete">
            <summary>
            This method returns true if the defaultT count is greater than 0. This method then decreases the count.
            </summary>
            <returns>Returns true if the operation was successful.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.DefaultTContains">
            <summary>
            This method returns true if the collection contains DefaultT data.
            </summary>
            <returns>Returns true if the DefaultTCount is greater than 0.</returns>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.DefaultTClear">
            <summary>
            This method clears the defaultT counters and changes the version number.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.ContainScanUnlockedMiss">
            <summary>
            This method increments the unlocked scan miss count.
            </summary>
        </member>
        <member name="M:Ximura.Collections.VertexArray`1.CleanUp">
            <summary>
            This method should be used to provide any maintenance or performance improvement tasks on the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.SupportsFastContain">
            <summary>
            Identifies whether this array supports a fast search algorithm
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.SupportsFastAdd">
            <summary>
            Identifies whether this array supports a fast add algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.SupportsFastRemove">
            <summary>
            Identifies whether this array supports a fast remove algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.SupportsFastClear">
            <summary>
            Identifies whether this array supports a fast clear algorithm
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.InitialCapacity">
            <summary>
            This is the initial capacity of the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.IsFixedSize">
            <summary>
            This property determines whether the collection is a fixed size. Fixed size collections will reject new records
            when the capacity has been reached.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.AllowNullValues">
            <summary>
            This property determines whether the collection will allow null or default(T) values.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.AllowMultipleEntries">
            <summary>
            This property specifies whether the collection accepts multiple entries of the same object.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.Capacity">
            <summary>
            This is the current capacity of the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.Version">
            <summary>
            This is the public version value.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.Count">
            <summary>
            This is the public count value.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.DefaultTCount">
            <summary>
            This is the public DefaultTCount value.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.ContainScanUnlocked">
            <summary>
            This property specifies whether the contains operation should attempt to scan without locking.
            </summary>
        </member>
        <member name="P:Ximura.Collections.VertexArray`1.ContainScanMissThreshold">
            <summary>
            This is the threshhold where missed scans will default to a locked scan automatically.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ClassBasedVertexArray`1.GetSentinelID(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            This method is responsible for implementing the sentinel collection for fast lookup of data.
            </summary>
            <param name="hashCode"></param>
            <param name="createSentinel"></param>
            <param name="hashID"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.ClassBasedVertexArray`1.VertexWindowGet">
            <summary>
            This method returns a vertex window for the first item in the array.
            </summary>
            <returns>A vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.ClassBasedVertexArray`1.VertexWindowGet(`0,System.Boolean)">
            <summary>
            This method returns a vertex window for the item specified.
            </summary>
            <param name="item">The item that requires a search window.</param>
            <param name="createSentinel">The value specifies whether any missing sentinels should be created.</param>
            <returns>A vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.ClassBasedVertexArray`1.GetEnumerator">
            <summary>
            This method returns an enumeration through the sentinels and data in the collection.
            </summary>
            <returns>Returns an enumeration containing the collection data.</returns>
        </member>
        <member name="P:Ximura.Collections.ClassBasedVertexArray`1.Root">
            <summary>
            This is the root vertex for the data collection.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelClassBasedVertexArray`1.cnMaxBuckets">
            <summary>
            This is the maximum permitted buckets.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelClassBasedVertexArray`1.mData">
            <summary>
            This is the collection of data and sentinels.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelClassBasedVertexArray`1.mRecalculateThreshold">
            <summary>
            This is the threshold to recalculate the LevelCurrent value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelClassBasedVertexArray`1.mLevelCurrent">
            <summary>
            This is the current number of levels supported by the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelClassBasedVertexArray`1.InitializeData(System.Int32)">
            <summary>
            This method initializes the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelClassBasedVertexArray`1.InitializeDataSize">
            <summary>
            This protected method recalculates the size of the collection based on a standard settings of 1000 items.
            You should override this method to change the value.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelClassBasedVertexArray`1.InitializeDataArray">
            <summary>
            This method initializes the data array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelClassBasedVertexArray`1.BucketSizeRecalculate(System.Int32)">
            <summary>
            This method calculates the current number of bits needed to support the current data.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelClassBasedVertexArray`1.LevelMax">
            <summary>
            The maximum number of levels. You should override this value if you wish to change it.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelClassBasedVertexArray`1.LevelCurrent">
            <summary>
            The maximum number of levels.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelClassBasedVertexArray`1.LevelData">
            <summary>
            This is the level where the actual data is stored in the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelClassBasedVertexArray`1.HashIDMin">
            <summary>
            This is the minimum hash ID value. This will be set on the initial sentinel vertexes for the data collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelClassBasedVertexArray`1.Root">
            <summary>
            This method returns the root data vertex which is the last item in the data array.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListClassBasedVertexArray`1.sRand">
            <summary>
            This is a thread specific value. This is to ensure that each thread gets a specific
            random class as Random is not thread safe.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListClassBasedVertexArray`1.mProbability">
            <summary>
            The probability of an item being propagated to the next level.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListClassBasedVertexArray`1.#ctor">
            <summary>
            This is the default constructor for the array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListClassBasedVertexArray`1.ConvertProbabilityToBool">
            <summary>
            This method converts the output from the thread specific random function to a simple boolean value.
            </summary>
            <returns>Returns a boolean value based on the probability factor.</returns>
        </member>
        <member name="M:Ximura.Collections.SkipListClassBasedVertexArray`1.InitializeData(System.Int32)">
            <summary>
            This override sets the probability to 50%.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListClassBasedVertexArray`1.GetSentinelID(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            This method is responsible for implementing the sentinel collection for fast lookup of data.
            </summary>
            <param name="hashCode"></param>
            <param name="createSentinel"></param>
            <param name="hashID"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.SkipListClassBasedVertexArray`1.FastContains(`0)">
            <summary>
            This method implements a fast search algoritm.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>Returns true if found, false if not found, and null if the search encountered modified data.</returns>
        </member>
        <member name="P:Ximura.Collections.SkipListClassBasedVertexArray`1.Probability">
            <summary>
            The probability of an item being propagated to the next level.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListClassBasedVertexArray`1.LevelMax">
            <summary>
            This is the maximum levels implemented by the skip list.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListClassBasedVertexArray`1.SupportsFastContain">
            <summary>
            This class supports a fast search algorithm
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableClassBasedVertexArray`1">
            <summary>
            This class contains the combined buckets and slots in a single class.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.RedBlackTreeVertexStruct`2">
            <summary>
            This structture holds the array data for the red black tree.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="U">The valuw type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.RedBlackTreeVertexStruct`2.#ctor(`0,`1)">
            <summary>
            This constructor sets the key and value data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.Key">
            <summary>
            The key data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.Value">
            <summary>
            The value data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.ParentIDPlus1">
            <summary>
            The parent ID plus 1. 0 denotes an empty value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.LeftIDPlus1">
            <summary>
            The left ID plus 1. 0 denotes an empty value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.RightIDPlus1">
            <summary>
            The right ID plus 1. 0 denotes an empty value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.RedBlackTreeVertexStruct`2.IsBlack">
            <summary>
            This boolean value denotes whether the vertex is black.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeVertexStruct`2.IsRoot">
            <summary>
            This property determines whether the vertex is the root vertex, i.e. it does not have a parent.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeVertexStruct`2.IsSentinel">
            <summary>
            This property determines whether the vertex is a sentinel, i.e. a vertex without any child vertexes.
            </summary>
        </member>
        <member name="T:Ximura.PoolBaseParallel`1">
            <summary>
            The PoolBaseParallel class is used to hold a collection of object that can be re-used.
            This class is optimized for multi-threaded parallel execution.
            </summary>
            <typeparam name="T">The object pool type.</typeparam>
        </member>
        <member name="T:Ximura.IXimuraPool`1">
            <summary>
            This interface is implemented by the generic object pool
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPool">
            <summary>
            This interface is implemented by the object pool
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPool.Get">
            <summary>
            This method returns an object of the specified type.
            </summary>
            <returns>An object of the pool type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object of the specified type, with the deserialized data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the pool type.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool.Return(System.Object)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="P:Ximura.IXimuraPool.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.IsBuffered">
            <summary>
            This property indicates whether the pool is buffered. Buffered pools are shared amongst multiple 
            clients and do not expose the PoolManager.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraPool.PoolManager">
            <summary>
            This property is used to set the pool manager for the specific pool.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.IXimuraPool`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.IXimuraPoolInitialize`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolInitialize`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.ItemGet">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.ItemAdd(`0)">
            <summary>
            This method adds a new item to the pool.
            </summary>
            <param name="obj">The item to add to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.ItemReturn(`0,System.Boolean)">
            <summary>
            This method returns or adds an object to the pool.
            </summary>
            <param name="obj">The pool object to be returned.</param>
            <param name="initialize">This property specifies whether the pool is being initialized. 
            If the pool is being initialized, a new item will be added to the pool.</param>
            <exception cref="T:System.ArgumentNullException">The pool item to be returned is null.</exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor sets the pool create parameters.
            </summary>
            <param name="min">The initial set of objects.</param>
            <param name="max">The maximum set of object for the pool. Set this to -1 is you do not 
            wish to set a maximum value.</param>
            <param name="prefer">The prefered number of object for the pool.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor sets the pool create parameters.
            </summary>
            <param name="min">The initial set of objects.</param>
            <param name="max">The maximum set of object for the pool. Set this to -1 is you do not 
            wish to set a maximum value.</param>
            <param name="prefer">The prefered number of object for the pool.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Dispose(System.Boolean)">
            <summary>
            This override disposes of the pool.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.CheckStatus">
            <summary>
            This method checks the status of the pool.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The pool has been disposed.</exception>
            <exception cref="!:SYstem.NotSupportedException">The pool has not been initialized</exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.InitializePool">
            <summary>
            This method initiates the object pool with the required number of objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Ximura#IXimuraPool#Get">
            <summary>
            This is the default get() accessor.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Ximura#IXimuraPool#Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.GetInternal(System.Action{`0},System.Action{`0})">
            <summary>
            This method gets an item from the pool internally.
            </summary>
            <param name="initializer">The initialization delegate. Leave this null if not required.</param>
            <param name="deserializer">The deserialization delegate. Leave this null if not required.</param>
            <returns>Returns an object from the pool, or default(T) is there are no objects available.</returns>
            <exception cref="T:Ximura.PoolObjectUnavailableException">This exception is thrown when there are no pool object available and 
            GetUnavailableThrowException is set to true.</exception>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.Return(System.Object)">
            <summary>
            This method returns an object to the pool as an object and not being of a specific type.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.ResetPoolObject(`0)">
            <summary>
            This method is used to reset the pool object. You should override this method if
            you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.ResetPoolObject(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is used to reset the pool object from the serialization information.
            You should override this method if you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Disposed">
            <summary>
            This boolean property identifies whether the pool has been disposed.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Initialized">
            <summary>
            This boolean property identifies whether the pool has been initialized.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.GetUnavailableThrowException">
            <summary>
            This property specifies whether the pool should throw an exception if there are no object available. 
            This is useful when the object is a value type and does not return null.
            The default is false when T is a class type and true when T is a value type. This value is set in the constructor.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Available">
            <summary>
            This method returns the internal available property.
            </summary>
            <returns>Returns true if the pool can return objects.</returns>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Churn">
            <summary>
            This property returns the number of Gets performed by the pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Stats">
            <summary>
            This property returns a summary of the stats for the collection.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.Overbite">
            <summary>
            This is allowable increase over the maximum value. This may be useful in multi-processor machines.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.IsBuffered">
            <summary>
            This property indicates whether the pool is buffered. Buffered pools are shared amongst multiple 
            clients and do not implement the clear method.
            </summary>
        </member>
        <member name="P:Ximura.PoolBaseParallel`1.PoolManager">
            <summary>
            If this property is set, it will be passed on to objects that implement the IXimuraPoolManagerDirectAccess
            interface to allow them to get additional pool objects of different types for their own internal use.
            </summary>
        </member>
        <member name="T:Ximura.PoolBaseParallel`1.PoolItem`1">
            <summary>
            This internal class is used to store the pool data.
            </summary>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.PoolItem`1.#ctor(`1)">
            <summary>
            This is the default constructor and creates a new PoolItem.
            </summary>
            <param name="val">The item value.</param>
        </member>
        <member name="M:Ximura.PoolBaseParallel`1.PoolItem`1.#ctor(`1,Ximura.PoolBaseParallel{`0}.PoolItem{`1})">
            <summary>
            This constructor creates a new PoolItem and also sets the next item in the chain.
            </summary>
            <param name="val">The item value.</param>
            <param name="next">The next item in the chain.</param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentHashSet`1">
            <summary>
            This is the lock-free implementation of the HashSet class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.ConcurrentHashSet`2">
            <summary>
            This is the lock-free implementation of the HashSet class.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <typeparam name="A">The vertex array type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.ConcurrentCollectionBase`2">
            <summary>
            This is the abstract base class for collections that implement the ICollection interface.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <typeparam name="A">The vertex array type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.CollectionHelperBase`2">
            <summary>
            This is the base class that both struct and class based collections inherit from.
            </summary>
            <typeparam name="T">The collection object type.</typeparam>
        </member>
        <member name="T:Ximura.DisposableBase">
            <summary>
            This base class implements the IDisposable interface.
            </summary>
        </member>
        <member name="F:Ximura.DisposableBase.mDisposed">
            <summary>
            This variables determines whether the collection has been disposed.
            </summary>
        </member>
        <member name="M:Ximura.DisposableBase.Finalize">
            <summary>
            This is the finalizer for the collection.
            </summary>
        </member>
        <member name="M:Ximura.DisposableBase.DisposedCheck">
            <summary>
            This method identifies when the collection has been disposed and throws an ObjectDisposedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This exception is thrown when the collection has been disposed.</exception>
        </member>
        <member name="M:Ximura.DisposableBase.Dispose">
            <summary>
            This method disposes of the collection.
            </summary>
        </member>
        <member name="M:Ximura.DisposableBase.Dispose(System.Boolean)">
            <summary>
            This method disposes of the data in the collection. You should override this method if you need to add
            custom dispose logic to your collection.
            </summary>
            <param name="disposing">The class is disposing, i.e. this is called by Dispose and not the finalizer.</param>
        </member>
        <member name="F:Ximura.Collections.CollectionHelperBase`2.mData">
            <summary>
            This array holds both the data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.CollectionHelperBase`2.mEqualityComparer">
            <summary>
            This is the equality comparer for the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            This is constructor for the abstract list class.
            </summary>
            <param name="comparer">The comparer for the collection items.</param>
            <param name="capacity">The initial capacity for the collection.</param>
            <param name="collection">The initial data to load to the collection.</param>
            <param name="isFixedSize">This property determines whether the collection is a fixed size.
            Fixed size collections will reject new records when the capacity has been reached, 
            although they may deliver performance improvements as they do not need to use a growable data structure.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.Dispose(System.Boolean)">
            <summary>
            This method disposes of the data in the collection. You should override this method if you need to add
            custom dispose logic to your collection.
            </summary>
            <param name="disposing">The class is disposing, i.e. this is called by Dispose and not the finalizer.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.Initialize(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            This method initializes the collection.
            </summary>
            <param name="comparer">The comparer for the collection items.</param>
            <param name="capacity">The initial capacity.</param>
            <param name="collection">The initial data to load in to the array.</param>
            <param name="isFixedSize">This property determines whether the collection is a fixed size.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.InitializeData(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            This abstract method initializes the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.AddIncomingData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method adds items to the collection that were passed in the constructor.
            You should override this method to implement any specific logic for your collection.
            </summary>
            <param name="collection">The data to add to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.Insert(`0,System.Boolean)">
            <summary>
            This method adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <param name="add">The property specifies whether the item is overwritten or a new item is added. 
            If multiple entries are not allowed an exception is thrown.</param>
            <returns>Returns true if the addition is successful.</returns>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.ContainsInternal(`0)">
            <summary>
            This method checks whether the item exists in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if the item is in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.TryGetValueInternal(System.Collections.Generic.IEqualityComparer{`0},`0,`0@)">
            <summary>
            This method attempts to retrieve an item from the collection.
            </summary>
            <param name="comparer">The specific comparer.</param>
            <param name="key">The key.</param>
            <param name="value">The value parameter.</param>
            <returns>Returns true if the item can be found in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.RemoveInternal(`0)">
            <summary>
            The method removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the removal is successful.</returns>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.ClearInternal">
            <summary>
            This method clears the collection.
            </summary>
            <remarks>This method scans and locks all the items in the collection, but leaves the sentinel data intact.</remarks>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.InternalScan(System.Boolean)">
            <summary>
            This method enumerates through the collection.
            </summary>
            <param name="changeException">Set this to true if you want the method to throw an exception if the collection changes.</param>
            <returns>Returns a enumeration of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">This exception will be thrown when the collection 
            changes during the scan and the changeException parameter is set to true.</exception>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.GetEnumerator">
            <summary>
            This method returns an enumeration of the collection values.
            </summary>
            <returns>Returns a enumeration of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">This exception will be thrown when if collection 
            changes during the enumeration.</exception>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.CopyToInternal(`0[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.CopyToInternal(System.Array,System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.CollectionHelperBase`2.ToArrayInternal">
            <summary>
            This method copies the internal data to an array.
            </summary>
            <returns>Returns an array containing the internal data.</returns>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.DebugData">
            <summary>
            This debug method enumerates through the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.CollectionAllowMultipleEntries">
            <summary>
            This setting determines whether the collection allows multiple entries of the same object in the collection.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.CollectionAllowNullValues">
            <summary>
            This property determines whether the collection will accept null values. The default setting is true.
            </summary>
            <remarks>This property is ignored if the collection is for a value type such as int.</remarks>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.IsFixedSize">
            <summary>
            This property determines whether the collection will dynamically expand when new values are added. 
            This property can only be set from the constructor, although this property can be overriden in derived classes to ensure
            a particular value.
            </summary>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.Count">
            <summary>
            This property returns the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.Version">
            <summary>
            This is the current collection version.
            </summary>
        </member>
        <member name="P:Ximura.Collections.CollectionHelperBase`2.IsReadOnly">
            <summary>
            This property always returns false.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentCollectionBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.Add(`0)">
            <summary>
            Adds and item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item is successfully removed.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.Contains(`0)">
            <summary>
            This method checks whether an item exists in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.Clear">
            <summary>
            This method clears the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentCollectionBase`2.CopyTo(`0[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSet`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentHashSetHTC`1">
            <summary>
            This is the lock-free implementation of the HashSet class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetHTC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="T:Ximura.Collections.ConcurrentHashSetSLC`1">
            <summary>
            This is the lock-free implementation of the HashSet class using a skip-list class based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentHashSetSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="T:Ximura.Collections.ConcurrentHashSetSLS`1">
            <summary>
            This is the lock-free implementation of the HashSet class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentHashSetSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="T:Ximura.JobBase">
            <summary>
            This is an abstract class that all job based implementations inherit from.
            </summary>
        </member>
        <member name="M:Ximura.JobBase.IDBuffer(System.Guid,System.Guid,System.Guid)">
            <summary>
            This static method is use to create the byte buffer
            containing the three ids.
            </summary>
            <param name="id1">The Session ID</param>
            <param name="id2">The Job ID.</param>
            <param name="id3">The Request ID.</param>
            <returns>A byte buffer</returns>
        </member>
        <member name="M:Ximura.JobBase.IDBuffer">
            <summary>
            The ID buffer
            </summary>
            <returns>The byte array containing the buffer.</returns>
        </member>
        <member name="M:Ximura.JobBase.Dispose">
            <summary>
            This is the dispose method for the job.
            </summary>
        </member>
        <member name="M:Ximura.JobBase.Finalize">
            <summary>
            The class destructor.
            </summary>
        </member>
        <member name="M:Ximura.JobBase.Dispose(System.Boolean)">
            <summary>
            This method should be overriden to provide specific clean up code.
            Specifically, any delegates references in the object should be set to null;
            </summary>
            <param name="disposing">This parameter is true if the call is from the disposable interface.</param>
        </member>
        <member name="M:Ximura.JobBase.Reset">
            <summary>
            This virtual empty method should be implemented when resources may not be 
            automatically cleaned up when using garbage collection, i.e. when using delegates.
            </summary>
        </member>
        <member name="P:Ximura.JobBase.Priority">
            <summary>
            This is the job priority.
            </summary>
        </member>
        <member name="P:Ximura.JobBase.SessionID">
            <summary>
            The Session ID
            </summary>
        </member>
        <member name="P:Ximura.JobBase.ID">
            <summary>
            The job ID
            </summary>
        </member>
        <member name="P:Ximura.JobBase.Data">
            <summary>
            The envelope containing the request
            </summary>
        </member>
        <member name="P:Ximura.JobBase.Signature">
            <summary>
            The job signature
            </summary>
        </member>
        <member name="P:Ximura.JobBase.EnvelopeHelper">
            <summary>
            This property provides access to the envelope helper.
            </summary>
        </member>
        <member name="P:Ximura.JobBase.IsDisposed">
            <summary>
            This property can be used to identify whether the object has been disposed.
            </summary>
        </member>
        <member name="P:Ximura.JobBase.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.JobBase.TrackID">
            <summary>
            This property is used to track the object through the object pool.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionRQAsync">
            <summary>
            This is the async interface
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsync.ProcessRequestAsync(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="P:Ximura.IXimuraSessionRQAsync.EnvelopeHelper">
            <summary>
            This is the envelope helper, used for creating requests.
            </summary>
        </member>
        <member name="T:Ximura.ArrayHelper">
            <summary>
            This static class provides a number of extension method for array objects.
            </summary>
            <summary>
            This static class provides a number of extension method for array objects.
            </summary>
            <summary>
            This static class provides array based matching logic.
            </summary>
            <summary>
            This static class provides a number of extension method for array objects.
            </summary>
        </member>
        <member name="M:Ximura.ArrayHelper.ValidateCollectionSlidingWindow``2(Ximura.MatchCollectionState{``0,``1},System.Boolean)">
            <summary>
            This method validates the state sliding window.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
            <param name="state">The match collection state.</param>
            <param name="deQueue"></param>
            <returns>Returns the updated match state.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.ValidateSlidingWindow``2(Ximura.MatchState{``0},System.Collections.Generic.IEnumerator{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            This method validates the sliding windows of previous records. This is needed because
            there may be partial matches in the previous array records. This is especially important
            when the match array is long.
            </summary>
            <typeparam name="TSource">The source array type.</typeparam>
            <typeparam name="TMatch">The match array type.</typeparam>
            <param name="state">The current match state.</param>
            <param name="matchEnum">The match enumerator.</param>
            <param name="predicate">The predicate used to validate the source and match items.</param>
            <returns>The match position or 0 if there is no match.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.SlidingWindowMatch``2(System.Func{``0,``1,System.Boolean},System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerator{``1})">
            <summary>
            This method matches the sliding window with the match.
            </summary>
            <typeparam name="TSource">The source array type.</typeparam>
            <typeparam name="TMatch">The match array type.</typeparam>
            <param name="predicate">The predicate used to validate the source and match items.</param>
            <param name="queue">The sliding window queue.</param>
            <param name="matchEnum">The match enumerator.</param>
            <returns>Returns true if there is a partial match.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.FindCharCaseInsensitive(System.Byte[],System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="byData"></param>
            <param name="byteSearch"></param>
            <param name="intStart"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.FindCharCaseInsensitive(System.Byte[],System.Byte,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="byData"></param>
            <param name="byteSearch"></param>
            <param name="intStart"></param>
            <param name="blnCaseInsensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.BinarySearchExt(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="byData"></param>
            <param name="bySearch"></param>
            <param name="intSearchPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.BinarySearchExt(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="byData"></param>
            <param name="bySearch"></param>
            <param name="intSearchPosition"></param>
            <param name="intLength"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.BinarySearchExt(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="byData"></param>
            <param name="bySearch"></param>
            <param name="intSearchPosition"></param>
            <param name="intLength"></param>
            <param name="blnIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchCollection``2(System.Collections.Generic.IEnumerable{``0},Ximura.MatchCollectionState{``0,``1})">
            <summary>
            This method matches the source enumeration against the state collection, this is to allow pattern
            matching over multiple byte blocks.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TMatch">The match type.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="state">The incoming match state.</param>
            <returns>Returns the updated match state.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchCollection``2(System.Collections.Generic.IEnumerator{``0},Ximura.MatchCollectionState{``0,``1})">
            <summary>
            This method matches the source enumeration against the state collection, this is to allow pattern
            matching over multiple byte blocks.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TMatch">The match type.</typeparam>
            <param name="sourceEnum">The source enumeration data.</param>
            <param name="state">The incoming match state.</param>
            <returns>Returns the updated match state.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            This method scans a collection and returns true when an item is matched.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">The enumeration.</param>
            <param name="predic">The predicate that returns true when there is a match.</param>
            <returns>Returns true if an item is matched in the collection.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.Range``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            This extension selects a range of array values based on the offset and the count value.
            </summary>
            <typeparam name="TSource">This extension method can be applied to any object that implements the IList interface.</typeparam>
            <param name="source">The array source.</param>
            <param name="offset">The offset value.</param>
            <param name="count">The number of records to process.</param>
            <returns>Returns a enumerable collection containing the records.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchSequence``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            This method matches the sequence against the source array.
            </summary>
            <typeparam name="TSource">The source array type.</typeparam>
            <typeparam name="TMatch">The match array type.</typeparam>
            <param name="source">The source array.</param>
            <param name="match">The source array.</param>
            <returns>The outgoing match state. This will indicate whether the match was successful or partially successful, i.e. there
            is a partial match at the end of the array that cannot be fully resolved.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchSequence``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Ximura.MatchState{``0})">
            <summary>
            This method matches the sequence against the source array.
            </summary>
            <typeparam name="TSource">The source array type.</typeparam>
            <typeparam name="TMatch">The match array type.</typeparam>
            <param name="source">The source array.</param>
            <param name="match">The source array.</param>
            <param name="state">The current match state. This can be passed in when matching chucks of data from multiple source arrays.</param>
            <returns>The outgoing match state. This will indicate whether the match was successful or partially successful, i.e. there
            is a partial match at the end of the array that cannot be fully resolved.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchSequence``2(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerable{``1},Ximura.MatchState{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
            <param name="sourceEnum"></param>
            <param name="match"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchSequence``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},Ximura.MatchState{``0})">
            <summary>
            This method matches the sequence against the source array.
            </summary>
            <typeparam name="TSource">The source array type.</typeparam>
            <typeparam name="TMatch">The match array type.</typeparam>
            <param name="source">The source array.</param>
            <param name="match">The source array.</param>
            <param name="predicate">The prediciate used to match the source and match array elements.</param>
            <param name="state">The current match state. This can be passed in when matching chucks of data from multiple source arrays.</param>
            <returns>The outgoing match state. This will indicate whether the match was successful or partially successful, i.e. there
            is a partial match at the end of the array that cannot be fully resolved.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.MatchSequence``2(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},Ximura.MatchState{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
            <param name="sourceEnum"></param>
            <param name="match"></param>
            <param name="predicate"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.GetGenericEnumerator``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.ArrayHelper.GetEnumeratorAtPosition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            This method gets a enumerator for the IEnumerable object and moves it forward 
            by the required number of places.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="source">The boject source.</param>
            <param name="pos">The number of positions to move forward.</param>
            <returns>Returns the object or null if the method has moved passed the end of the collection.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.DequeueRemove``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            This method will remove and discard the number of items specified from the queue.
            </summary>
            <typeparam name="T">The queue type.</typeparam>
            <param name="queue">The queue.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Ximura.ArrayHelper.FindFirstPosition``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            This extension method will find the first position in the list based on the predicate.
            </summary>
            <typeparam name="TSource">The object type.</typeparam>
            <param name="source">The array list.</param>
            <param name="predicate">The match condition.</param>
            <returns>Return the position in the list, or -1 if the predicate cannot be matched.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.FindFirstPosition``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            This extension method will find the first position in the list based on the predicate.
            </summary>
            <typeparam name="TSource">The object type.</typeparam>
            <param name="source">The array list.</param>
            <param name="offset">The list offset.</param>
            <param name="count">The number of items to process.</param>
            <param name="predicate">The match condition.</param>
            <returns>Return the position in the list, or -1 if the predicate cannot be matched.</returns>
        </member>
        <member name="M:Ximura.ArrayHelper.FindPositionInternal``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            This extension method will find the first position in the list based on the predicate and the 
            boundary fields passed.
            </summary>
            <typeparam name="TSource">The source item type.</typeparam>
            <param name="source">The source list.</param>
            <param name="offset">The list search start offset.</param>
            <param name="count">The number of items to check.</param>
            <param name="predicate">The predicate function to check for equality.</param>
            <returns>Returns the position of the item that matched.</returns>
        </member>
        <member name="T:Ximura.XimuraComponentPermissionAttribute">
            <summary>
            XimuraComponentPermissionAttribute is used to specify the security permissions for the 
            component.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentPermissionAttribute.#ctor(System.Int64,System.String)">
            <summary>
            The controller permission attribute.
            </summary>
            <param name="PermissionBitmap">The controller permission type.</param>
            <param name="description">The controller description.</param>
        </member>
        <member name="M:Ximura.XimuraComponentPermissionAttribute.#ctor(System.Int64,System.String,System.String)">
            <summary>
            The controller permission attribute.
            </summary>
            <param name="PermissionBitmap">The controller permission type.</param>
            <param name="description">The controller description.</param>
            <param name="localizationID">The controller localization reference ID.</param>
        </member>
        <member name="M:Ximura.XimuraComponentPermissionAttribute.#ctor(System.Int64,System.String,System.Boolean)">
            <summary>
            The controller permission attribute.
            </summary>
            <param name="PermissionBitmap">The controller permission type.</param>
            <param name="description">The controller description.</param>
            <param name="supported">This property defines whether the permission is supported.
            For situations where classes inherit permissions, 
            you may want to actually turn off support for a a permission.</param>
        </member>
        <member name="M:Ximura.XimuraComponentPermissionAttribute.#ctor(System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            The controller permission attribute.
            </summary>
            <param name="PermissionBitmap">The controller permission type.</param>
            <param name="description">The controller description.</param>
            <param name="localizationID">The controller localization reference ID.</param>
            <param name="supported">This property defines whether the permission is supported.
            For situations where classes inherit permissions, 
            you may want to actually turn off support for a a permission.</param>
        </member>
        <member name="P:Ximura.XimuraComponentPermissionAttribute.PermissionBitmap">
            <summary>
            The permission type.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentPermissionAttribute.Description">
            <summary>
            The controller description.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentPermissionAttribute.LocalizationID">
            <summary>
            The controller localization reference ID.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentPermissionAttribute.PermissionIsSupported">
            <summary>
            This property specifies whether the permission has been set.
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableStructBasedVertexArrayV3`1">
            <summary>
            This class contains the combined buckets and slots in a single class.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <summary>
            This class contains the combined buckets and slots in a single class.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2">
            <summary>
            This is the base class for class based data arrays.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.StructBasedVertexArray`1">
            <summary>
            This is the base class for struct/array based vertex collection.
            </summary>
            <typeparam name="T">The colection data type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mDebugCounter">
            <summary>
            This is the debug counter.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.syncLockExpandSlots">
            <summary>
            This lock grows the collection.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mSlots">
            <summary>
            This collection holds the data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mSlots0">
            <summary>
            This value holds a reference to the first data slot.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mSlot0Capacity">
            <summary>
            The slot 0 capacity.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mSlotsLevelCurrent">
            <summary>
            The current maximum level.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mSlotsCapacityCurrent">
            <summary>
            The current collection capacity.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mEmptyVertex">
            <summary>
            This is the vertex that holds the previously used vertexes.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mFreeListTail">
            <summary>
            This is the free data queue tail position.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mFreeListCount">
            <summary>
            This is the free data queue item count.
            </summary>
        </member>
        <member name="F:Ximura.Collections.StructBasedVertexArray`1.mLastIndex">
            <summary>
            This is the current next free position in the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.InitializeData(System.Int32)">
            <summary>
            This method initializes the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.SlotsInitialize(System.Int32)">
            <summary>
            This method initializes the slot array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.SlotDataNodeAdd(System.Int32,System.Int32,Ximura.LockableMarkableWrapper{Ximura.Collections.Data.CollectionVertexStruct{`0}}[])">
            <summary>
            This method adds the node to the collection. We will rebalance it to ensure the minimum number of hops.
            </summary>
            <param name="index"></param>
            <param name="capacity"></param>
            <param name="slots"></param>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.SlotDataNodeRebalance(System.Int32,Ximura.LockableMarkableWrapper{Ximura.Collections.Data.CollectionVertexStruct{`0}}[])">
            <summary>
            This method rebalances the tree when a new node is introduced.
            </summary>
            <param name="index">The index position.</param>
            <param name="slots">The slot collection.</param>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.SlotsCalculateLevel(System.Int32)">
            <summary>
            This method calculates the specific bucket level and the position within that bucket.
            </summary>
            <param name="index">The slot index.</param>
            <returns>Returns the level associated with the index.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.SlotsLevelExpand(System.Int32)">
            <summary>
            This method expands the data slots for the array.
            </summary>
            <param name="index">The new index.</param>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.EmptyGetRecycle">
            <summary>
            This method returns a recycled item from the collection.
            </summary>
            <returns>Returns the indexID of the item, or null if no items are available.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.EmptyGet">
            <summary>
            This method returns the next free item, either from empty space, or from a free item in the collection.
            </summary>
            <returns>Returns the index for the next free item.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.EmptyAdd(System.Int32)">
            <summary>
            This method adds an empty item to the free list.
            </summary>
            <param name="index">The index of the item to add to the sentinel.</param>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemIsLocked(System.Int32)">
            <summary>
            This method checks whether an item in the collection is locked.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemLockWait(System.Int32)">
            <summary>
            This method waits for a locked item to become available.
            </summary>
            <param name="index">The index of the item to wait for.</param>
            <returns>Returns the number of lock cycles during the wait.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemLock(System.Int32)">
            <summary>
            This method locks the specific item.
            </summary>
            <param name="index">The item index.</param>
            <returns>Returns the number of lock cycles the thread entered.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemTryLock(System.Int32)">
            <summary>
            This method attempts to lock the item specified.
            </summary>
            <param name="index">The index of the item you wish to lock..</param>
            <returns>Returns true if the item was successfully locked.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemUnlock(System.Int32)">
            <summary>
            The method unlocks the item.
            </summary>
            <param name="index">The index of the item you wish to unlock.</param>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.LockableData(System.Int32,System.Boolean@)">
            <summary>
            This method returns the full lockable data from the slot array.
            </summary>
            <param name="index">The slot index.</param>
            <param name="isLocked">Returns a boolean value indicating that the item is locked.</param>
            <returns>Returns a lockable wrapper containing the vertex data.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemIsMarked(System.Int32)">
            <summary>
            This method checks whether an item in the collection is marked.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.ItemTryMark(System.Int32)">
            <summary>
            This method attempts to lock the item specified.
            </summary>
            <param name="index">The index of the item you wish to lock..</param>
            <returns>Returns true if the item was successfully locked.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.GetSentinelID(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            This method returns the sentinel ID and the hashID for the hashcode passed.
            </summary>
            <param name="hashCode">The hashcode to search for the sentinel position.</param>
            <param name="createSentinel">This property determine whether any missing sentinels will be created.</param>
            <param name="hashID">The hashID for the hashCode that passed.</param>
            <returns>The largest sentinel index ID.</returns>
        </member>
        <member name="M:Ximura.Collections.StructBasedVertexArray`1.GetEnumerator">
            <summary>
            This method returns an enumeration through the sentinels and data in the collection.
            </summary>
            <returns>Returns an enumeration containing the collection data.</returns>
        </member>
        <member name="P:Ximura.Collections.StructBasedVertexArray`1.InitialCapacity">
            <summary>
            This is the initial capacity of the array.
            </summary>
        </member>
        <member name="P:Ximura.Collections.StructBasedVertexArray`1.InitialCapacityDefault">
            <summary>
            This is the default initial capacity value that will be used if the value passed in the
            initializer is zero.
            </summary>
        </member>
        <member name="P:Ximura.Collections.StructBasedVertexArray`1.Capacity">
            <summary>
            This is the current capacity of the array.
            </summary>
        </member>
        <member name="P:Ximura.Collections.StructBasedVertexArray`1.RootIndexID">
            <summary>
            This is the index ID of the the first item.
            </summary>
        </member>
        <member name="P:Ximura.Collections.StructBasedVertexArray`1.Item(System.Int32)">
            <summary>
            This is the indexer for the array.
            </summary>
            <param name="index">The index position.</param>
            <returns>Returns the vertex corresponding to the index position.</returns>
        </member>
        <member name="F:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.cnBucketsLevelMax">
            <summary>
            This is the maximum permitted buckets.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.mBuckets">
            <summary>
            This is the collection of data and sentinels.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.mRecalculateThreshold">
            <summary>
            This is the threshold to recalculate the LevelCurrent value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.mBucketsLevelCurrent">
            <summary>
            This is the current number of levels supported by the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.InitializeData(System.Int32)">
            <summary>
            This method initializes the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.InitializeBucketArray(System.Int32)">
            <summary>
            This method initializes the data array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketSizeRecalculate(System.Int32,System.Boolean)">
            <summary>
            This method calculates the current number of bits needed to support the current data.
            </summary>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketLevelExpand(System.Int32,System.Int32)">
            <summary>
            This method expands the bucket arrays.
            </summary>
            <param name="currentLevel">The current level.</param>
            <param name="newLevel">The new level required.</param>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketCalculatePosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method calculates the specific bucket level and the position within that bucket.
            </summary>
            <param name="indexID">The bucket index.</param>
            <param name="level">The bucket level.</param>
            <param name="levelPosition">The bucket position.</param>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketLevelCapacityCalculate(System.Int32)">
            <summary>
            This method calculates the size of the bucket array.
            </summary>
            <param name="level">The level.</param>
            <returns>Returns 2n+1 as the size of the array where n is the level.</returns>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.Bucket(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns>Returns the bucket.</returns>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketLock(System.Int32)">
            <summary>
            This method locks a bucket.
            </summary>
            <param name="index">The index of the bucket to lock.</param>
            <returns>Returns the number of lock loops before the call was able to lock and get access.</returns>
        </member>
        <member name="M:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketUnlock(System.Int32)">
            <summary>
            This method unlocks the bucket.
            </summary>
            <param name="index">The index of the bucket to unlock.</param>
        </member>
        <member name="P:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketsLevelMax">
            <summary>
            The maximum number of levels. You should override this value if you wish to change it.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.BucketsLevelCurrent">
            <summary>
            The maximum number of levels.
            </summary>
        </member>
        <member name="P:Ximura.Collections.MultiLevelBucketStructBasedVertexArray`2.HashIDMin">
            <summary>
            This is the minimum hash ID value. This will be set on the initial sentinel vertexes for the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.#ctor">
            <summary>
            This is the default constructor for the array.
            </summary>
            <param name="isFixedSize">A boolean value indicating whether the data collection is fixed size.</param>
            <param name="capacity">The array capacity.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.InitializeBucketArray(System.Int32)">
            <summary>
            This method initializes the data array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemIsMarked(System.Int32)">
            <summary>
            This method returns true if the item has been marked.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>Returns true if the item has been marked. Please note that Sentinel vertexes will always return false.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemTryMark(System.Int32)">
            <summary>
            This method attempts to mark an item as deleted.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>Returns true if the item was successfully marked. Please note that Sentinel vertexes will always return false.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemIsLocked(System.Int32)">
            <summary>
            This method checks whether an item in the collection is locked.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemLock(System.Int32)">
            <summary>
            This method locks the specific item.
            </summary>
            <param name="index">The item index.</param>
            <returns>Returns the number of lock cycles the thread entered.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemLockWait(System.Int32)">
            <summary>
            This method waits for a locked item to become available.
            </summary>
            <param name="index">The index of the item to wait for.</param>
            <returns>Returns the number of lock cycles during the wait.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemTryLock(System.Int32)">
            <summary>
            This method attempts to lock the item specified.
            </summary>
            <param name="index">The index of the item you wish to lock..</param>
            <returns>Returns true if the item was successfully locked.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ItemUnlock(System.Int32)">
            <summary>
            The method unlocks the item.
            </summary>
            <param name="index">The index of the item you wish to unlock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.LockableData(System.Int32,System.Boolean@)">
            <summary>
            This method reads the vertex from the base collection, as well as the vertex's lock status,
            </summary>
            <param name="index">The item index.</param>
            <param name="isLocked">A boolean value indicating whether the vertex is locked.</param>
            <returns>Returns the vertex.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.VertexWindowGet">
            <summary>
            This method returns a vertex window for the index specified.
            </summary>
            <returns>Returns a vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.VertexWindowGet(`0,System.Boolean)">
            <summary>
            This method returns a vertex window for the hashCode specified.
            </summary>
            <param name="item">The item to get the window for.</param>
            <param name="createSentinel">A boolean value that specifies whether the sentinels should be created.</param>
            <returns>Returns a vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.BucketCalculatePosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method calculates the specific bucket level and the position within that bucket.
            </summary>
            <param name="indexID">The bucket index.</param>
            <param name="level">The bucket level.</param>
            <param name="levelPosition">The bucket position.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.BucketLevelCapacityCalculate(System.Int32)">
            <summary>
            This method calculates the size of the bucket array.
            </summary>
            <param name="level">The level.</param>
            <returns>Returns 2n+1 as the size of the array where n is the level.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.ConvertBucketIDToIndexID(System.Int32)">
            <summary>
            This method converts a bucketID to an index ID by setting the MSB.
            </summary>
            <param name="bucketID">The bucket ID to convert.</param>
            <returns>The index ID.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.GetSentinelID(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            This method returns the sentinel ID and the hashID for the hashcode passed.
            </summary>
            <param name="hashCode">The hashcode to search for the sentinel position.</param>
            <param name="createSentinel">This property determine whether any missing sentinels will be created.</param>
            <param name="hashID">The hashID for the hashCode that passed.</param>
            <returns>The largest sentinel index ID.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.FastContains(`0)">
            <summary>
            This method implements a fast search algoritm.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>Returns true if found, false if not found, and null if the search encountered modified data.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.FastContains(System.Collections.Generic.IEqualityComparer{`0},`0,`0@)">
            <summary>
            This method implements a fast search algoritm.
            </summary>
            <param name="eqComparer">The equality comparer to use for the comparison.</param>
            <param name="item">The item to search for.</param>
            <param name="value">The output value. This is used for KeyValue pair arrangement for Dictionary type collection.</param>
            <returns>Returns a trinary boolean value, true for success, false for fail, and null to continue using a lockable search.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.FastAdd(`0,System.Boolean)">
            <summary>
            This is a fast add implementation of the add algorithm.
            </summary>
            <param name="item">The item to add.</param>
            <param name="add">Specifies whether a new item should be added, or an existing item replaced. 
            This is useful for KeyValue pair implementations.</param>
            <returns>Returns true if the item was added successfully.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.FastRemove(`0)">
            <summary>
            This method is a fast implementation of the remove algorithm.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item was successfully removed.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.FastClear">
            <summary>
            This method clears the array of data.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.RootIndexID">
            <summary>
            This is the index ID of the the first item.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.Item(System.Int32)">
            <summary>
            This is the indexer for the array.
            </summary>
            <param name="index">The index position.</param>
            <returns>Returns the vertex corresponding to the index position.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.SupportsFastContain">
            <summary>
            Identifies whether this array supports a fast search algorithm
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.SupportsFastAdd">
            <summary>
            This property specifies that the array supports a fast add algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.SupportsFastRemove">
            <summary>
            This property specifies that the array supports a fast remove algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.SupportsFastClear">
            <summary>
            This property specifies that the array supports a fast clear algorithm.
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1">
            <summary>
            The vertex window structure holds the search results from a scan.
            </summary>
            <typeparam name="D">The structure data type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.mData">
            <summary>
            The internal reference.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.mHashID">
            <summary>
            The hashID
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.mItem">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.mEqualityComparer">
            <summary>
            The equality comparer.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.CurrSlotIDPlus1">
            <summary>
            The current slot ID plus 1.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.NextSlotIDPlus1">
            <summary>
            This is the next slot ID plus 1.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.LastSentinelIDPlus1">
            <summary>
            This is the ID of the last sentinel in the scan plus 1.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV3{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32,`1)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV3{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ScanAndRemoveMarked">
            <summary>
            This method scans through the slot data until is reaches the end of the data, or the position 
            where the hashID meets a slot with a hashID that is greater than itself.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ItemLockAndInsert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ItemLockAndRemove">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ItemLockAndSetNext">
            <summary>
            This method changes the value of the next item.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.MoveUpAndRemoveMarked">
            <summary>
            This method moves up the Next vertex to the current position.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.SentinelLockAndInsert(System.Int32)">
            <summary>
            This method inserts a sentinel in to the data collection.
            </summary>
            <param name="indexID">The new sentinel index id.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ScanProcess">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ToString">
            <summary>
            This override provides a debug friendly representation of the structure.
            </summary>
            <returns>Returns the structure value.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.HashID">
            <summary>
            This is the hash ID of the item currently being searched.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.Value">
            <summary>
            This is the current value being handled by the window.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.ScanItemMatch">
            <summary>
            This property specifies whether the next item is a match for the data.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.NextIsSentinel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV3`1.StructBasedVertexWindowV3`1.CurrIsTerminator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ximura.PoolManager">
            <summary>
            The pool manager is a static class which controls system wide object pooling within the 
            current AppDomain.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolManager">
            <summary>
            The pool manager interface is used to provide an interface that allows multiple
            pool objects to be created around a base object type.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolManager.GetPoolManager(System.Type)">
            <summary>
            This method retrieve a pool manage object based on
            </summary>
            <param name="objectType">The object type for the pool.</param>
            <returns>Returns a pool manager for the type specified.</returns>
        </member>
        <member name="M:Ximura.IXimuraPoolManager.GetPoolManager(System.Type,System.Boolean)">
            <summary>
            This method retrieve a pool manage object based on
            </summary>
            <param name="objectType">The object type for the pool.</param>
            <param name="buffered">A boolean value that specifies whether the pool manager should
            be buffered. A buffered pool cannot be reset by the receiving party.</param>
            <returns>Returns a pool manager for the type specified.</returns>
        </member>
        <member name="F:Ximura.PoolManager.mPoolManagers">
            <summary>
            This collection contains the specific pool managers that hold a collection of poolable object.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.#ctor">
            <summary>
            This is the default static constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.#ctor(System.Boolean)">
            <summary>
            This is the buffered output option for the pool manager. With a buffered output the pool object is abstracted
            using a buffer object which does not allow the calling party to clear the pool.
            </summary>
            <param name="useBuffer">Set this to true if you wish the pool manager to output a buffered output.</param>
        </member>
        <member name="M:Ximura.PoolManager.CheckDisposed">
            <summary>
            This method checks whether the pool manager has been disposed, and if so throws an exception.
            </summary>
        </member>
        <member name="T:Ximura.PoolManager.PoolManagerContainer">
            <summary>
            The PoolManagerContainer is a private class that is used to hold the pool and the buffered pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.#ctor(System.Type,Ximura.IXimuraPoolManager)">
            <summary>
            This is the default constructor for the the PoolManagerContainer.
            </summary>
            <param name="poolManager">The pool manager to contain.</param>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.CreatePool(System.Type,Ximura.IXimuraPoolManager)">
            <summary>
            This method uses generics to create the specific type of context pool.
            </summary>
            <param name="objectType">The context type.</param>
            <returns>Returns the pool.</returns>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.CheckDisposed">
            <summary>
            This method checks whether the pool manager has been disposed, and if so throws an exception.
            </summary>
        </member>
        <member name="M:Ximura.PoolManager.PoolManagerContainer.Dispose">
            <summary>
            This is the dispose method for the class.
            </summary>
        </member>
        <member name="P:Ximura.PoolManager.PoolManagerContainer.Pool">
            <summary>
            The pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolManager.PoolManagerContainer.PoolBuffered">
            <summary>
            The buffered pool.
            </summary>
        </member>
        <member name="T:Ximura.Job">
            <summary>
            This is the base request job object.
            </summary>
        </member>
        <member name="M:Ximura.Job.#ctor">
            <summary>
            This is the private constructor used by the job pool.
            </summary>
        </member>
        <member name="M:Ximura.Job.Reset">
            <summary>
            This method resets the job to its unitialized state.
            </summary>
        </member>
        <member name="M:Ximura.Job.Initialize(System.Guid,System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.JobSignature,Ximura.JobPriority,Ximura.IXimuraEnvelopeHelper)">
            <summary>
            This method initializes the job.
            </summary>
            <param name="sessionid">The session id</param>
            <param name="id">The job id</param>
            <param name="data">The data</param>
            <param name="signature">The signature</param>
            <param name="priority">The job priority.</param>
        </member>
        <member name="M:Ximura.Job.IDBuffer">
            <summary>
            This method returns the buffer for the request.
            </summary>
            <returns>A byte array containing the identifying IDs.</returns>
        </member>
        <member name="P:Ximura.Job.Priority">
            <summary>
            This is the job priority.
            </summary>
        </member>
        <member name="P:Ximura.Job.SessionID">
            <summary>
            The Session ID
            </summary>
        </member>
        <member name="P:Ximura.Job.ID">
            <summary>
            The Job ID
            </summary>
        </member>
        <member name="P:Ximura.Job.Data">
            <summary>
            The job data
            </summary>
        </member>
        <member name="P:Ximura.Job.Signature">
            <summary>
            The originator signature.
            </summary>
        </member>
        <member name="P:Ximura.Job.EnvelopeHelper">
            <summary>
            This property provides access to the envelope object pool.
            </summary>
        </member>
        <member name="T:Ximura.DJobType">
            <summary>
            This enumeration is the Dispatcher Job Types
            </summary>
        </member>
        <member name="F:Ximura.DJobType.Command">
            <summary>
            The job type is a command.
            </summary>
        </member>
        <member name="F:Ximura.DJobType.Callback">
            <summary>
            The job type is a straight call back.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraEnvelopeHelper">
            <summary>
            This interface is used to provide access the Envelope pool for the application.
            </summary>
        </member>
        <member name="T:Ximura.FragmentTerminationType">
            <summary>
            This enumeration determines the termination style for the fragment.
            </summary>
        </member>
        <member name="F:Ximura.FragmentTerminationType.ByteLength">
            <summary>
            The fragment has a fixed number of bytes.
            </summary>
        </member>
        <member name="F:Ximura.FragmentTerminationType.Terminator">
            <summary>
            The fragment will terminate when the byte array end matches the termination array.
            </summary>
        </member>
        <member name="F:Ximura.FragmentTerminationType.Custom">
            <summary>
            The fragment will terminate when the byte array end matches the delimiter structure.
            </summary>
        </member>
        <member name="T:Ximura.MessageDirection">
            <summary>
            This enumeration defines the messaging charteristics.
            </summary>
        </member>
        <member name="F:Ximura.MessageDirection.Undefined">
            <summary>
            This is the default value that the message is set to 
            </summary>
        </member>
        <member name="F:Ximura.MessageDirection.Read">
            <summary>
            Message can be read from.
            </summary>
        </member>
        <member name="F:Ximura.MessageDirection.Write">
            <summary>
            Message can be written to.
            </summary>
        </member>
        <member name="F:Ximura.MessageDirection.Bidirectional">
            <summary>
            Message supports both reading and writing.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraMessageStream">
            <summary>
            This interface is used to interface between the protocol and the message
            </summary>
        </member>
        <member name="T:Ximura.Data.IXimuraBinarySerialize">
            <summary>
            Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.
            </summary>
        </member>
        <member name="M:Ximura.Data.IXimuraBinarySerialize.Read(System.IO.BinaryReader)">
            <summary>
            Generates a user-defined type (UDT) or user-defined aggregate from its binary form.
            </summary>
            <param name="r">The System.IO.BinaryReader stream from which the object is deserialized.</param>
        </member>
        <member name="M:Ximura.Data.IXimuraBinarySerialize.Write(System.IO.BinaryWriter)">
            <summary>
            Converts a user-defined type (UDT) or user-defined aggregate into its binary format.
            </summary>
            <param name="w">The System.IO.BinaryWriter stream to which the UDT or user-defined aggregate is serialized.</param>
        </member>
        <member name="T:Ximura.XimuraRemotingException">
            <summary>
            This class is used to signal an exception when using Ximura remoting
            </summary>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor">
            <summary>Initializes a new instance of the SecureRemotingException class with default properties.</summary>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.String)">
            <summary>Initializes a new instance of the SecureRemotingException class with the given message.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the SecureRemotingException class with the specified properties.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes the exception with serialized information.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Ximura.XimuraRemotingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provides serialization functionality.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Ximura.StreamHelper.Enum(System.IO.Stream)">
            <summary>
            This method turns a stream in to an enumerable byte array.
            </summary>
            <param name="data">The stream to read from.</param>
            <returns>Returns a stream of bytes from the stream.</returns>
        </member>
        <member name="M:Ximura.StreamHelper.Enum(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method turns a stream in to an enumerable byte array. 
            This method also inserts an byte buffer before the stream in enumerated. This may be useful when reading from a readonly stream
            when bytes have already been read.
            </summary>
            <param name="data">The stream to read from.</param>
            <param name="buffer">A data buffer to insert before the stream.</param>
            <param name="start">The buffer offset.</param>
            <param name="length">The number of bytes to read from the buffer.</param>
            <returns>Returns a stream of bytes from the byte array and then the stream.</returns>
        </member>
        <member name="T:Ximura.CSVStreamEnumerator">
            <summary>
            This is the default CSV parser class.
            </summary>
        </member>
        <member name="T:Ximura.CSVStreamEnumerator`1">
            <summary>
            This class enumerates a CSV data stream and returns a set of data objects for each individual row record.
            </summary>
            <typeparam name="O">The output item type.</typeparam>
        </member>
        <member name="T:Ximura.IntermediateObjectEnumerator`4">
            <summary>
            This method is used to parse the data stream with an intermediate data type prior to conversion.
            </summary>
            <typeparam name="D">The source data type, i.e. stream</typeparam>
            <typeparam name="C">The converted source data type, i.e. stream</typeparam>
            <typeparam name="I">The intermediate data type.</typeparam>
            <typeparam name="O">The output record data type, i.e. int</typeparam>
        </member>
        <member name="F:Ximura.IntermediateObjectEnumerator`4.mConvertOutput">
            <summary>
            This function is used to convert the intermediate type in to the output type.
            </summary>
        </member>
        <member name="F:Ximura.IntermediateObjectEnumerator`4.mParse">
            <summary>
            This function is used to convert the data in to the intermediate data type.
            </summary>
        </member>
        <member name="F:Ximura.IntermediateObjectEnumerator`4.mIntermediateOE">
            <summary>
            This enumerator encapsulates the base object with the intermediate type.
            </summary>
        </member>
        <member name="F:Ximura.IntermediateObjectEnumerator`4.mDataSource">
            <summary>
            The original data source.
            </summary>
        </member>
        <member name="F:Ximura.IntermediateObjectEnumerator`4.mDataConverted">
            <summary>
            The converted data source.
            </summary>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`4.#ctor(`0,System.Func{`1,System.Nullable{Ximura.Tuple{`2,`1}}},System.Func{`2,`3},System.Func{`0,`1})">
            <summary>
            This is the protected constructor.
            </summary>
            <param name="data">The data source.</param>
            <param name="parse">The parsing function.</param>
            <param name="convertOutput">The conversion function to convert the intermediate type in to the output type.</param>
            <param name="convertSource">The conversion function to convert the incoming data source in to the outgoing data source.</param>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`4.Parse(`1)">
            <summary>
            This method can be used to parse the data instead of using a function.
            </summary>
            <param name="data">The data.</param>
            <returns>Returns an individual record.</returns>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`4.ConvertOutput(`2)">
            <summary>
            This method converts an intermediate item in to the output item.
            </summary>
            <param name="item">The intermediate item to convert.</param>
            <returns>Returns a converted output record.</returns>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`4.ConvertSource(`0)">
            <summary>
            This method converts one data source in to another.
            </summary>
            <param name="data">The data source to convert.</param>
            <returns>Returns a converted data source.</returns>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`4.GetEnumerator">
            <summary>
            This enumerator returns the converted objects.
            </summary>
            <returns>returns a collection of converted objects.</returns>
        </member>
        <member name="F:Ximura.CSVStreamEnumerator`1.ARRAYGROWTHFACTOR">
            <summary>
            This is the default char array growth factor
            </summary>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator`1.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding,System.Func{Ximura.CSVRowItem,`0})">
            <summary>
            This is the default constructor for the CSV enumerator.
            </summary>
            <param name="data">The data stream which will be read from.</param>
            <param name="headerInFirstRow">A boolean value that indicates whether the headers are in the first row.</param>
            <param name="enc">The character encoding. If this is null, then it will be set to UTF8.</param>
            <param name="convert">A function to convert the CSVRowItem structure in to the output structure.</param>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator`1.ConvertSource(System.IO.Stream)">
            <summary>
            This method converts the incoming byte stream in to a unicode char enumerator.
            </summary>
            <param name="data">The incoming byte stream.</param>
            <returns>The character enumerator.</returns>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator`1.HeadersParse(Ximura.CSVRowItem)">
            <summary>
            This method parses the headers and creates a header collection.
            </summary>
            <param name="headers">The csv items from the first row.</param>
            <returns>The dictionary of headers.</returns>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator`1.WriteChar(System.Char[]@,System.Int32,System.Char)">
            <summary>
            This method is used to set the value and to 
            autogrow the the char array.
            </summary>
            <param name="data">The array</param>
            <param name="position">The char position.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator`1.Parse(Ximura.UnicodeCharEnumerator)">
            <summary>
            This method converts the stream data in to an individual row item.
            </summary>
            <param name="data">The stream to read from.</param>
            <returns>Returns the intermediate item or null if not more items can be read.</returns>
        </member>
        <member name="P:Ximura.CSVStreamEnumerator`1.Headers">
            <summary>
            This enumeration will return a header collection enumeration.
            </summary>
        </member>
        <member name="P:Ximura.CSVStreamEnumerator`1.Enc">
            <summary>
            This is the encoding used by the stream enumerator.
            </summary>
        </member>
        <member name="M:Ximura.CSVStreamEnumerator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            This is the default constructor for the CSV enumerator.
            </summary>
            <param name="data">The data stream which will be read from.</param>
            <param name="headerInFirstRow">A boolean value that indicates whether the headers are in the first row.</param>
        </member>
        <member name="T:Ximura.MatchSequenceSkipOrFailTerminator`2">
            <summary>
            
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TMatch">The match type.</typeparam>
        </member>
        <member name="T:Ximura.MatchTerminator`2">
            <summary>
            This structure is used to hold the termination array.
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminator`2.mCurrentTerminator">
            <summary>
            The current terminator.
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminator`2.mPredicate">
            <summary>
            The match status function.
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminator`2.mPredicateTerminator">
            <summary>
            The match predicate.
            </summary>
        </member>
        <member name="M:Ximura.MatchTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
            
            </summary>
            <param name="Terminator">This is the current terminator.</param>
            <param name="CanScan">This property determines whether the terminator can scan through the source 
            for a match.</param>
        </member>
        <member name="M:Ximura.MatchTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Func{`0,Ximura.MatchTerminatorResult,Ximura.MatchTerminatorStatus},System.Func{Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64,System.Boolean})">
            <summary>
            
            </summary>
            <param name="Terminator">This is the current terminator.</param>
            <param name="CanScan">This property determines whether the terminator can scan through the source for a match.</param>
            <param name="Predicate"></param>
            <param name="PredicateTerminator"></param>
        </member>
        <member name="M:Ximura.MatchTerminator`2.Match(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.Queue{`0},System.Int64)">
            <summary>
            The predicate used to match the source and the match collection. By the default the equals parameter is passed.
            </summary>
        </member>
        <member name="M:Ximura.MatchTerminator`2.Reset">
            <summary>
            This method resets the terminator to the beginning.
            </summary>
        </member>
        <member name="M:Ximura.MatchTerminator`2.Validate(`0,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.MatchTerminator`2.ValidateTerminator(Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="terminator"></param>
            <param name="currentItem"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:Ximura.MatchTerminator`2.Terminator">
            <summary>
            This is the current terminator.
            </summary>
        </member>
        <member name="P:Ximura.MatchTerminator`2.CurrentTerminator">
            <summary>
            This is the current terminator.
            </summary>
        </member>
        <member name="P:Ximura.MatchTerminator`2.CanScan">
            <summary>
            This property determines whether the terminator can scan through the source 
            for a match.
            </summary>
        </member>
        <member name="M:Ximura.MatchSequenceSkipOrFailTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            The default constructor.
            </summary>
            <param name="Terminator">The sequence to match on.</param>
        </member>
        <member name="M:Ximura.MatchSequenceSkipOrFailTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Func{`0,Ximura.MatchTerminatorResult,Ximura.MatchTerminatorStatus},System.Func{Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64,System.Boolean})">
            <summary>
            This is the extended constructor.
            </summary>
            <param name="Terminator"></param>
            <param name="CanScan"></param>
            <param name="Predicate"></param>
            <param name="PredicateTerminator"></param>
        </member>
        <member name="M:Ximura.MatchSequenceSkipOrFailTerminator`2.Validate(`0,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.MatchSequenceSkipOrFailTerminator`2.ValidateTerminator(Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="terminator"></param>
            <param name="currentItem"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.MatchExceptionTerminator`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
        </member>
        <member name="M:Ximura.MatchExceptionTerminator`2.Validate(`0,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.XimuraComponentService">
            <summary>
            XimuraComponentService is the base object for all Ximura components 
            that can be started and stopped.
            </summary>
        </member>
        <member name="T:Ximura.XimuraComponentBase">
            <summary>
            XimuraComponentBase is the base component for all components in the Ximura system.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraComponentBase">
            <summary>
            This is the base interface supported by components that support the Ximura component architecture.
            </summary>
        </member>
        <member name="F:Ximura.XimuraComponentBase.mParentContainer">
            <summary>
            This is the parent container that the component was added to during the constructor.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.#ctor">
            <summary>
            This is the default constructor for the XimuraComponentService.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called by the .Net component model when adding it to a container
            </summary>
            <param name="container">The container to add the component to.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.Dispose(System.Boolean)">
            <summary> 
            This is an override of the IDisposable method which cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.GetAttributeForTypeID(System.Type)">
            <summary>
            This protected method will return the relevant attribute for the 
            type specified.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.InternalHelperConnectSite(System.ComponentModel.ISite)">
            <summary>
            This protected method is used to connect internal helper objects to the component site.
            </summary>
            <param name="value">The new site.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.SiteBeforeChange(System.ComponentModel.ISite,System.ComponentModel.ISite)">
            <summary>
            This method is called before the site changes.
            </summary>
            <param name="newSite">The new site value.</param>
            <param name="oldSite">The old site value.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.SiteChanged(System.ComponentModel.ISite,System.ComponentModel.ISite)">
            <summary>
            You should override this method if you require specific actions to occur
            if the component site changes.
            </summary>
            <param name="oldSite">The old site.</param>
            <param name="newSite">The new site.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.RemoveService``1">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <typeparam name="T">The service type.</typeparam>
        </member>
        <member name="M:Ximura.XimuraComponentBase.RemoveService``1(System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="promote">Should be set to true if this service should be removed 
            from any parent service containers.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">Should be set to true if this service should be removed 
            from any parent service containers.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService(System.Type,System.Object)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService``1(``0)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService``1(``0,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceInstance">The service instance.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService``1(``0,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceInstance">The service instance.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth the service should be promoted. Set this value to -1 if you require it to be unlimited.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AddService(System.Type,System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
            <param name="depth">The depth the service should be promoted. Set this value to -1 if you require it to be unlimited.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.System#IServiceProvider#GetService(System.Type)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBase.GetService(System.Type,System.Int32)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="depth">The service depth. If this is set to -1 the depth is unlimited.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBase.GetService(System.Type)">
            <summary>
            This overriden method ensures that any services pass through
            the component and are not bypassed to the component site.
            </summary>
            <param name="service">The service.</param>
            <returns>An object that provides the service, 
            or null if the service type cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBase.GetService``1">
            <summary>
            This overriden method ensures that any services pass through
            the component and are not bypassed to the component site.
            </summary>
            <typeparam name="T">The service.</typeparam>
            <returns>An object that provides the service, 
            or null if the service type cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ServicesProvide">
            <summary>
            This protected method should register any services with the component
            container.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ServicesRemove">
            <summary>
            This protected method should remove any services that the component
            has registered with the component containers.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ConnectComponents">
            <summary>
            This method will connect the components held in the 
            containers in to the Ximura messaging architecture.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ProcessContainer(System.Collections.ICollection)">
            <summary>
            This method sets each Ximura based component site property to point to this component
            and adds the component to the ServiceComponents list.
            </summary>
            <param name="componentList">The components to add.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ProcessContainer(System.Collections.ICollection,System.Collections.IList)">
            <summary>
            This method sets each Ximura based component site property to point to this component
            and adds the component to the new list passed.
            </summary>
            <param name="componentList">The components to add.</param>
            <param name="newList">The new list to which the parameter will be added to.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.AttachComponent(System.ComponentModel.IComponent,System.Collections.IList)">
            <summary>
            This method attaches a component to the system service messaging architecture.
            </summary>
            <param name="xCom"></param>
            <param name="newList"></param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.ProcessComponent(System.ComponentModel.IComponent)">
            <summary>
            This method can be overriden to provide specific functionality after a component is connected
            to the Ximura messaging architecture.
            </summary>
            <param name="xCom">The component.</param>
        </member>
        <member name="M:Ximura.XimuraComponentBase.RegisterContainer(System.ComponentModel.IContainer)">
            <summary>
            This method is used to register the containers for the inherited classes that wish to participate
            is the Ximura messaging infrastructure.
            </summary>
            <param name="components">The component collection to add.</param>
        </member>
        <member name="P:Ximura.XimuraComponentBase.ActiveMode">
            <summary>
            This property returns true when the component is active in execution mode.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentBase.SiteExtended">
            <summary>
            This is an extended site which allows easy access to the extended app site methods.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentBase.Site">
            <summary>
            This override property calls the SiteChanged method when the site changes
            for the component.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentBase.ServiceComponents">
            <summary>
            This is the list containing the service components. This list will be only be
            populated after ConnectComponents has been called. 
            </summary>
        </member>
        <member name="T:Ximura.IXimuraComponentService">
            <summary>
            Summary description for IXimuraComponentService.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraServiceWithEvent">
            <summary>
            This interface is used by Ximura Service based component that wish to fire events for 
            service actions
            </summary>
        </member>
        <member name="T:Ximura.IXimuraService">
            <summary>
            This interface is used by Ximura Service based components.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Start">
            <summary>
            This method starts the service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Pause">
            <summary>
            This method pauses the service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Continue">
            <summary>
            This method continues a paused service
            </summary>
        </member>
        <member name="M:Ximura.IXimuraService.Stop">
            <summary>
            This method stops a running service
            </summary>
        </member>
        <member name="P:Ximura.IXimuraService.ServiceStatus">
            <summary>
            This method will return the current service status
            </summary>
        </member>
        <member name="P:Ximura.IXimuraService.ServiceEnabled">
            <summary>
            This property determines whether the component is enable and can start.
            </summary>
        </member>
        <member name="E:Ximura.IXimuraServiceWithEvent.ServiceStarted">
            <summary>
            This event will be fired when the service starts
            </summary>
        </member>
        <member name="E:Ximura.IXimuraServiceWithEvent.ServicePaused">
            <summary>
            This event will be fired when the service pauses
            </summary>
        </member>
        <member name="E:Ximura.IXimuraServiceWithEvent.ServiceResumed">
            <summary>
            This event will be fired when the service is resumed from a paused state
            </summary>
        </member>
        <member name="E:Ximura.IXimuraServiceWithEvent.ServiceStopped">
            <summary>
            This event will be fired when the service is stopped
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSecurityDescriptor">
            <summary>
            This interface is used to provide security access information for
            specific access points around the system.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSecurityDescriptor.PermissionsBitmap">
            <summary>
            This is the permissions bitmap for the module that implements this interface.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraSecurityDescriptor.Permissions">
            <summary>
            This method returns the permission attribute collection for the class.
            </summary>
        </member>
        <member name="F:Ximura.XimuraComponentService.permissionAttrs">
            <summary>
            This collection holds the specific attribute that determines the permissions for 
            the particular bit.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.#ctor">
            <summary>
            This is the default constructor for the XimuraComponentService.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called by the .Net component model when adding it to a container
            </summary>
            <param name="container">The container to add the component to.</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.InternalStart">
            <summary>
            This is the method to override which should start your service.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.InternalStop">
            <summary>
            This is the method to override which should stop your service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.InternalPause">
            <summary>
            This is the method to override which should pause your service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.InternalContinue">
            <summary>
            This is the method to override which should continue your service 
            if it has been paused
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.Start">
            <summary>
            This method starts the service based on the default async settings
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.Pause">
            <summary>
            This method pauses the service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.Continue">
            <summary>
            This method continues a paused service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.Stop">
            <summary>
            This method stops a running service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.ProcessEvent(Ximura.ServiceEvent)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ProcessEvent(Ximura.ServiceEvent,Ximura.ServiceEventArgs)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
            <param name="e">The ServiceEventArgs object to pass</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ProcessEvent(Ximura.ServiceEvent,System.Object,Ximura.ServiceEventArgs)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
            <param name="sender">The sended object to pass</param>
            <param name="e">The ServiceEventArgs object to pass</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.InternalHelperConnectSite(System.ComponentModel.ISite)">
            <summary>
            This protected method is used to connect internal helper objects to the component site.
            </summary>
            <param name="value">The new site.</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ComponentsStatusChange(Ximura.XimuraServiceStatusAction,System.Collections.ICollection)">
            <summary>
            This method can start, stop, resume or pause a group of components.
            </summary>
            <param name="action">The action required</param>
            <param name="components">The components to which the action should be provided</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ComponentsStatusChange(Ximura.XimuraServiceStatusAction,System.Collections.ICollection,System.Type)">
            <summary>
            This method can start, stop, resume or pause a group of components of the specified type.
            </summary>
            <param name="action">The action required</param>
            <param name="components">The components to which the action should be provided</param>
            <param name="componentType">The component type.</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ComponentsStatusBeforeChange(Ximura.XimuraServiceStatusAction,Ximura.IXimuraService)">
            <summary>
            This method is called before the status of a component is changed. You may override 
            this method to make additional checks before the component status is changed.
            </summary>
            <param name="action">The action, i.e. start, stop, etc.</param>
            <param name="service">The component service to change.</param>
            <returns>This method should return true if you want the status to change. 
            If this method returns false the status of the service will not change.</returns>
        </member>
        <member name="M:Ximura.XimuraComponentService.ComponentsStatusAfterChange(Ximura.XimuraServiceStatusAction,Ximura.IXimuraService)">
            <summary>
            This method is called after the status of the service has been changed.
            </summary>
            <param name="action">The action, i.e. start, stop, etc.</param>
            <param name="service">The component service to change.</param>
        </member>
        <member name="M:Ximura.XimuraComponentService.ServicesReference">
            <summary>
            This protected method retrieves the base services for the container. 
            You should override this method if you wish to set references to
            base services from the container.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.ServicesDereference">
            <summary>
            This protected method should remove any references
            to other services in the conatiner. 
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.BuildPermissions">
            <summary>
            This method builds the permission bitmap from the permission attributes.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentService.BitShift(System.Int64)">
            <summary>
            This method returns a collection of integers for the bits present in the collection.
            </summary>
            <param name="bitMap">The 64 bit map.</param>
            <returns>An integer collection or and empty collection if the bitmap is 0.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.XimuraComponentService.ServiceParentSettingsSet(Ximura.IXimuraServiceParentSettings)" -->
        <member name="P:Ximura.XimuraComponentService.ServiceStatus">
            <summary>
            This method will return the current service status
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentService.ServiceEnabled">
            <summary>
            This property determines whether the service component can be started.
            </summary>
        </member>
        <member name="E:Ximura.XimuraComponentService.ServiceStarted">
            <summary>
            This event will be fired when the service starts
            </summary>
        </member>
        <member name="E:Ximura.XimuraComponentService.ServicePaused">
            <summary>
            This event will be fired when the service pauses
            </summary>
        </member>
        <member name="E:Ximura.XimuraComponentService.ServiceResumed">
            <summary>
            This event will be fired when the service is resumed from a paused state
            </summary>
        </member>
        <member name="E:Ximura.XimuraComponentService.ServiceStopped">
            <summary>
            This event will be fired when the service is stopped
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentService.PermissionsBitmap">
            <summary>
            This is the permission bitmap.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentService.Permissions">
            <summary>
            This method returns the permission attribute collection for the class.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentService.PermissionsType">
            <summary>
            This is the type of the object that we require the permission bitmap for.
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableStructBasedVertexArrayV2`1">
            <summary>
            This class contains the combined buckets and slots in a single class.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.#ctor">
            <summary>
            This is the default constructor for the array.
            </summary>
            <param name="isFixedSize">A boolean value indicating whether the data collection is fixed size.</param>
            <param name="capacity">The array capacity.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.InitializeBucketArray(System.Int32)">
            <summary>
            This method initializes the data array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ItemIsLocked(System.Int32)">
            <summary>
            This method checks whether an item in the collection is locked.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ItemLock(System.Int32)">
            <summary>
            This method locks the specific item.
            </summary>
            <param name="index">The item index.</param>
            <returns>Returns the number of lock cycles the thread entered.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ItemLockWait(System.Int32)">
            <summary>
            This method waits for a locked item to become available.
            </summary>
            <param name="index">The index of the item to wait for.</param>
            <returns>Returns the number of lock cycles during the wait.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ItemTryLock(System.Int32)">
            <summary>
            This method attempts to lock the item specified.
            </summary>
            <param name="index">The index of the item you wish to lock..</param>
            <returns>Returns true if the item was successfully locked.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ItemUnlock(System.Int32)">
            <summary>
            The method unlocks the item.
            </summary>
            <param name="index">The index of the item you wish to unlock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.LockableData(System.Int32,System.Boolean@)">
            <summary>
            This method reads the vertex from the base collection, as well as the vertex's lock status,
            </summary>
            <param name="index">The item index.</param>
            <param name="isLocked">A boolean value indicating whether the vertex is locked.</param>
            <returns>Returns the vertex.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.VertexWindowGet">
            <summary>
            This method returns a vertex window for the index specified.
            </summary>
            <returns>Returns a vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.VertexWindowGet(`0,System.Boolean)">
            <summary>
            This method returns a vertex window for the hashCode specified.
            </summary>
            <param name="item">The item to get the window for.</param>
            <param name="createSentinel">A boolean value that specifies whether the sentinels should be created.</param>
            <returns>Returns a vertex window.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.BucketCalculatePosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method calculates the specific bucket level and the position within that bucket.
            </summary>
            <param name="indexID">The bucket index.</param>
            <param name="level">The bucket level.</param>
            <param name="levelPosition">The bucket position.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.BucketLevelCapacityCalculate(System.Int32)">
            <summary>
            This method calculates the size of the bucket array.
            </summary>
            <param name="level">The level.</param>
            <returns>Returns 2n+1 as the size of the array where n is the level.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.ConvertBucketIDToIndexID(System.Int32)">
            <summary>
            This method converts a bucketID to an index ID by setting the MSB.
            </summary>
            <param name="bucketID">The bucket ID to convert.</param>
            <returns>The index ID.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.GetSentinelID(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            This method returns the sentinel ID and the hashID for the hashcode passed.
            </summary>
            <param name="hashCode">The hashcode to search for the sentinel position.</param>
            <param name="createSentinel">This property determine whether any missing sentinels will be created.</param>
            <param name="hashID">The hashID for the hashCode that passed.</param>
            <returns>The largest sentinel index ID.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.FastContains(`0)">
            <summary>
            This method implements a fast search algoritm.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>Returns true if found, false if not found, and null if the search encountered modified data.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.FastAdd(`0,System.Boolean)">
            <summary>
            This is a fast add implementation of the add algorithm.
            </summary>
            <param name="item">The item to add.</param>
            <param name="add">Specifies whether a new item should be added, or an existing item replaced. 
            This is useful for KeyValue pair implementations.</param>
            <returns>Returns true if the item was added successfully.</returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.FastRemove(`0)">
            <summary>
            This method is a fast implementation of the remove algorithm.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item was successfully removed.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.RootIndexID">
            <summary>
            This is the index ID of the the first item.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.Item(System.Int32)">
            <summary>
            This is the indexer for the array.
            </summary>
            <param name="index">The index position.</param>
            <returns>Returns the vertex corresponding to the index position.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.SupportsFastContain">
            <summary>
            This class supports a fast search algorithm
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.SupportsFastAdd">
            <summary>
            This property specifies that the array supports a fast add algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.SupportsFastRemove">
            <summary>
            This property specifies that the array supports a fast remove algorithm.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.DebugEmpty">
            <summary>
            This is the debug data.
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1">
            <summary>
            The vertex window structure holds the search results from a scan.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.CurrSlotIDPlus1">
            <summary>
            The current slot ID plus 1.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.Curr">
            <summary>
            THe current vertex.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.Next">
            <summary>
            The next vertex.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV2{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32,`1)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV2{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ItemSetNext">
            <summary>
            This method changes the value of the next item.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ItemInsert">
            <summary>
            
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.InsertSentinelAndUnlock(System.Int32)">
            <summary>
            This method inserts a sentinel in to the data collection.
            </summary>
            <param name="indexID">The new sentinel index id.</param>
            <param name="hashID">The sentinel hash id.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.Unlock">
            <summary>
            This method provides common functionality to unlock a VertexWindow.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ScanAndLock">
            <summary>
            This method scans through the slot data until is reaches the end of the data, or the position 
            where the hashID meets a slot with a hashID that is greater than itself.
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.MoveUp">
            <summary>
            This method moves up the Next vertex to the current position.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ItemRemoveAndUnlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.Snip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ToString">
            <summary>
            This override provides a debug friendly representation of the structure.
            </summary>
            <returns>Returns the structure value.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.HashID">
            <summary>
            This is the hash ID of the item currently being searched.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.Value">
            <summary>
            This is the current value being handled by the window.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2`1.ScanItemMatch">
            <summary>
            This property specifies whether the next item is a match for the data.
            </summary>
        </member>
        <member name="T:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1">
            <summary>
            The vertex window structure holds the search results from a scan.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.CurrSlotIDPlus1">
            <summary>
            The current slot ID plus 1.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.Curr">
            <summary>
            THe current vertex.
            </summary>
        </member>
        <member name="F:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.Next">
            <summary>
            The next vertex.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV2{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32,`1)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.#ctor(Ximura.Collections.HashTableStructBasedVertexArrayV2{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ItemSetNext">
            <summary>
            This method changes the value of the next item.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ItemInsert">
            <summary>
            
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.InsertSentinelAndUnlock(System.Int32)">
            <summary>
            This method inserts a sentinel in to the data collection.
            </summary>
            <param name="indexID">The new sentinel index id.</param>
            <param name="hashID">The sentinel hash id.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.Unlock">
            <summary>
            This method provides common functionality to unlock a VertexWindow.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ScanAndLock">
            <summary>
            This method scans through the slot data until is reaches the end of the data, or the position 
            where the hashID meets a slot with a hashID that is greater than itself.
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.MoveUp">
            <summary>
            This method moves up the Next vertex to the current position.
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ItemRemoveAndUnlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.Snip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ToString">
            <summary>
            This override provides a debug friendly representation of the structure.
            </summary>
            <returns>Returns the structure value.</returns>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.HashID">
            <summary>
            This is the hash ID of the item currently being searched.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.Value">
            <summary>
            This is the current value being handled by the window.
            </summary>
        </member>
        <member name="P:Ximura.Collections.HashTableStructBasedVertexArrayV2`1.StructBasedVertexWindowV2b`1.ScanItemMatch">
            <summary>
            This property specifies whether the next item is a match for the data.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexClass`1">
            <summary>
            This is the abstract class for class based data networks.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexClassBase`1">
            <summary>
            This is the base tree vertex class.
            </summary>
            <typeparam name="T">The value data type.</typeparam>
        </member>
        <member name="T:Ximura.LockableBase">
            <summary>
            The lockable base class is used by classes that require finegrained locking for individual data elements.
            </summary>
        </member>
        <member name="F:Ximura.LockableBase.mLocked">
            <summary>
            The private value that indicates whether the class is locked.
            </summary>
        </member>
        <member name="F:Ximura.LockableBase.mLockingThread">
            <summary>
            The managed ID of the locking thread.
            </summary>
        </member>
        <member name="M:Ximura.LockableBase.Lock">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.LockableBase.LockWait">
            <summary>
            This method halts any threads if the item is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableBase.TryLock">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.LockableBase.Unlock">
            <summary>
            This method unlocks the item.
            </summary>
        </member>
        <member name="P:Ximura.LockableBase.IsLocked">
            <summary>
            Returns true if the item is locked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassBase`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassBase`1.Value">
            <summary>
            This is the data stored in the vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassBase`1.IsSentinel">
            <summary>
            This property specifies whether the vertex is a sentinel.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassBase`1.IsTerminator">
            <summary>
            This property specifies whether the vertex is a terminator.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClass`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClass`1.Dispose">
            <summary>
            This method removes and object references.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClass`1.ToString">
            <summary>
            This override provides quick and easy debugging support.
            </summary>
            <returns>Returns a string representation of the vertex.</returns>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.Next">
            <summary>
            This is the next node in the list.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.IsTerminator">
            <summary>
            This property specifies whether the vertex is a list terminator.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.HashID">
            <summary>
            This is the hashID for the item.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.Up">
            <summary>
            The Up sentinel
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.Down">
            <summary>
            The down sentinel.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.Data">
            <summary>
            This is the vertex data.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClass`1.DebugString">
            <summary>
            This debug method returns the next five items in the chain.
            </summary>
        </member>
        <member name="T:Ximura.Collections.TreeLockableVertex`1">
            <summary>
            This class is the vertex that contains both the key and value data within the tree.
            </summary>
            <typeparam name="TKey">The vertex key type.</typeparam>
            <typeparam name="TVal">The vertex value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.TreeLockableVertex`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.Parent">
            <summary>
            This is the parent vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.Left">
            <summary>
            This is the left vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.Right">
            <summary>
            This is the right vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.IsRoot">
            <summary>
            This property determines whether the vertex is the root vertex, i.e. it does not have a parent.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.IsSentinel">
            <summary>
            This property determines whether the vertex is a sentinel, i.e. a vertex without any child vertexes.
            </summary>
        </member>
        <member name="P:Ximura.Collections.TreeLockableVertex`1.IsTerminator">
            <summary>
            This property determines whether the vertex is a sentinel, i.e. a vertex without any child vertexes.
            </summary>
        </member>
        <member name="T:Ximura.PoolObjectInvalidException">
            <summary>
            This exception is thrown when the pool is not able to return an object.
            </summary>
        </member>
        <member name="M:Ximura.PoolObjectInvalidException.#ctor">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
        </member>
        <member name="M:Ximura.PoolObjectInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.PoolObjectInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.PoolObjectInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentDictionary`3">
            <summary>
            This class is a concurrent lock-free implementation of the IDictionary interface.
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <typeparam name="A">The vertex array type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionary`3.#ctor(Ximura.Collections.ConcurrentDictionary{`0,`1,`2}.KeyValueOnlyKeyEqualityComparer{`0,`1},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Add(`0,`1)">
            <summary>
            This method adds a key and an item to the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value data.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This method adds a keyvalue pair to the collection.
            </summary>
            <param name="item">The keyvalue pair item to add.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This method returns true if both the key and value are present in the collection.
            </summary>
            <param name="item">The keyvalue pair item to check.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.ContainsKey(`0)">
            <summary>
            This method returns true if the key is present in the collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns true if the key is present in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.ContainsValue(`1)">
            <summary>
            This method returns true if the value is present in the collection.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns true if the value is present in the collection.</returns>
            <remarks>For large collections this method may take some time as a full scan of the collection is required to identify the value.</remarks>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the keyvalue pair from the dictionary.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item is successfully removed.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Remove(`0)">
            <summary>
            Removes the item from the collection, that matches the key passed in the parameter.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>Returns true if the item is successfully removed.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.Clear">
            <summary>
            This method clears the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.TryGetValue(`0,`1@)">
            <summary>
            This method attempts to retrieve an item from the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value parameter.</param>
            <returns>Returns true if the item can be found in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.KeyOnlyEqualityComparer">
            <summary>
            This is the key only equality comparer.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.CollectionAllowNullValues">
            <summary>
            This property determines whether the collection will accept null values. The default setting is false for the Dictionary.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.Item(`0)">
            <summary>
            This indexer is used to access the items in the collection by use of the key value.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the value associated with the key.</returns>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.Keys">
            <summary>
            The key collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.Values">
            <summary>
            The value collection.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2">
            <summary>
            This comparer is used to only report the key for the hashcode and equality comparer.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`3})">
            <summary>
            This constructor allows a custom key and value equality comparer to be passed to the class.
            </summary>
            <param name="keyComparer">The key comparer. If this is null, the default comparer is used.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`3},System.Collections.Generic.IEqualityComparer{`4})">
            <summary>
            This constructor allows a custom key and value equality comparers to be passed to the class.
            </summary>
            <param name="keyComparer">The key comparer. If this is null, the default comparer is used.</param>
            <param name="valueComparer">The value comparer. If this is null, the default comparer is used.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.Equals(System.Collections.Generic.KeyValuePair{`3,`4},System.Collections.Generic.KeyValuePair{`3,`4})">
            <summary>
            This method only compares the key of the keyvalue pair for equality.
            </summary>
            <param name="x">The first keyvalue pair.</param>
            <param name="y">The second keyvalue pair.</param>
            <returns>Returns true if the keys are equal.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.GetHashCode(System.Collections.Generic.KeyValuePair{`3,`4})">
            <summary>
            The method returns the hashcode for the key of the keyvalue pair.
            </summary>
            <param name="obj">The object to get the hashcode.</param>
            <returns>Returns the key hashcode.</returns>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.KeyComparer">
            <summary>
            This is the key comparer.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentDictionary`3.KeyValueOnlyKeyEqualityComparer`2.ValueComparer">
            <summary>
            This is the key comparer.
            </summary>
        </member>
        <member name="T:Ximura.CSVHeaderFragment">
            <summary>
            This class holds the header information for the CSV class.
            </summary>
        </member>
        <member name="M:Ximura.CSVHeaderFragment.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.LinqHelper.RangeTuple(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.LinqHelper.RangeFromTo(Ximura.Tuple{System.Int32,System.Int32})">
            <summary>
            This extended range method takes an integer tuple as the range.
            </summary>
            <param name="range">The range of integers.</param>
            <returns>Returns an enumeration of integers based on the range specified.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.RangeFromTo(System.Int32,System.Int32)">
            <summary>
            This extended range method takes an integer range and returns an enumeration of integers.
            </summary>
            <param name="start">The first integer.</param>
            <param name="end">The last integer.</param>
            <returns>Returns an enumeration of integers based on the range specified.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            This method converts an enumerable collection in to a collection of converted items.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
            <typeparam name="U">The output type.</typeparam>
            <param name="items">The collection to convert.</param>
            <param name="convert">The conversion function.</param>
            <returns>Returns a enumeration of converted items.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            The ForEach extension iterates through the items collection, and executes the action for each item.
            </summary>
            <example>
            A quick use of the method would be as follows:
            
                Enumerable.Range(0,40).ForEach(i => Console.WriteLine(i));
                
            which is equivalent to the following code:
            
                foreach(var i in Enumerable.Range(0,40))
                    Console.WriteLine(i);
            </example>
            <typeparam name="T">The item type to process.</typeparam>
            <param name="items">The collection of items to process.</param>
            <param name="action">The action to be executed against each item in the collection.</param>
        </member>
        <member name="M:Ximura.LinqHelper.ForIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            The ForIndex extension method iterates through the items collection, and executes the action for each item and provides 
            a 32-bit integer index parameter that identifies the position of the item in the collection.
            </summary>
            <typeparam name="T">The item type to process.</typeparam>
            <param name="items">The collection of items to process.</param>
            <param name="action">The action to be executed against each item in the collection.</param>
        </member>
        <member name="M:Ximura.LinqHelper.ForBigIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int64,``0})">
            <summary>
            The ForBigIndex extension method iterates through the items collection, and executes the action for each item and provides 
            a 64-bit integer parameter that identifies the position of the item in the collection.
            </summary>
            <typeparam name="T">The item type to process.</typeparam>
            <param name="items">The collection of items to process.</param>
            <param name="action">The action to be executed against each item in the collection.</param>
        </member>
        <member name="M:Ximura.LinqHelper.ForReverseIndex``1(System.Collections.Generic.IList{``0},System.Action{System.Int32,``0})">
            <summary>
            The ForIndex extension method iterates through a list in reverse, and executes the action for each item and provides 
            a 32-bit integer index parameter that identifies the position of the item in the list.
            </summary>
            <typeparam name="T">The item type to process.</typeparam>
            <param name="items">The list of items to process.</param>
            <param name="action">The action to be executed against each item in the collection.</param>
        </member>
        <member name="M:Ximura.LinqHelper.StreamRead``1(System.IO.Stream)">
            <summary>
            This method reads a set of items from a stream, based on the type parameter.
            </summary>
            <typeparam name="T">The type to read from the stream and to return in the enumeration.</typeparam>
            <param name="str">The stream to read from.</param>
            <returns>Returns an enumeration of the items deserialized from the stream.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.StreamRead``1(System.IO.Stream,System.Func{System.IO.Stream,``0})">
            <summary>
            This method reads a set of items from a stream, based on the type parameter.
            </summary>
            <typeparam name="T">The type to read from the stream and to return in the enumeration.</typeparam>
            <param name="str">The stream to read from.</param>
            <param name="conv">The conversion function to read from the stream.</param>
            <returns>Returns an enumeration of the items deserialized from the stream.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.StreamWrite``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream)">
            <summary>
            This extension method writes a collection to the stream.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="coll">The collection.</param>
            <param name="str">The stream.</param>
        </member>
        <member name="M:Ximura.LinqHelper.StreamWrite``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,System.Action{System.IO.Stream,``0})">
            <summary>
            This extension method writes a collection to the stream.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="coll">The collection.</param>
            <param name="str">The stream.</param>
            <param name="act">The action that writes the data to the stream.</param>
        </member>
        <member name="M:Ximura.LinqHelper.Unfold(System.Object,System.Func{System.Object,System.Nullable{Ximura.Tuple{System.Object,System.Object}}})">
            <summary>
            The Unfold extension method "unfolds" and object in to a collection.
            </summary>
            <param name="start">The initial object to unfold.</param>
            <param name="generator">The generator function that will create the collection.</param>
            <returns>Returns an enumeration of object.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Unfold``1(System.Object,System.Func{System.Object,System.Nullable{Ximura.Tuple{``0,System.Object}}})">
            <summary>
            The Unfold extension method "unfolds" and object in to a collection.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="start">The initial object to unfold.</param>
            <param name="generator">The generator function that will create the collection.</param>
            <returns>Returns an enumeration of objects of type TResult.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Unfold``2(``0,System.Func{``0,System.Nullable{Ximura.Tuple{``1,``0}}})">
            <summary>
            The Unfold extension method "unfolds" and object in to a collection.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <typeparam name="TResult">The enumeration type.</typeparam>
            <param name="start">The initial object to unfold.</param>
            <param name="generator">The generator function that will create the collection.</param>
            <returns>Returns an enumeration of objects of type TResult.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.LinqHelper.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:Ximura.LinqHelper.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            This extension method compares two collections for equality. The comparison of individual items is done using 
            the equality comparer.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="source">The source collection.</param>
            <param name="comparand">The collection to compare against.</param>
            <param name="comparer">The equality comparer.</param>
            <returns>Returns true if the two collections are identical, otherwise returns false. 
            Note: two empty collections will return true.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            This extension method compares two collections for equality. The comparison of individual items is done using 
            the equality function passed as a parameter.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="source">The source collection.</param>
            <param name="comparand">The collection to compare against.</param>
            <param name="eqFunc">The comparison function.</param>
            <returns>Returns true if the two collections are identical, otherwise returns false. 
            Note: two empty collections will return true.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.InsertAtStart``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            This extension method inserts an item at the beginning of the enumerated collection.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">The collection.</param>
            <param name="insert">The item to insert at the beginning.</param>
            <returns>Returns the collection and an additional item at the beginning.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.InsertAtPosition``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            The extension method inserts an item at the specified position. 
            If the collection is not of the specified length, then no item will be inserted.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">The collection.</param>
            <param name="insert">The item to insert.</param>
            <param name="position">The position within the collection to insert.</param>
            <returns>Returns the collection and an additional item inserted at the position specified.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.InsertAtEnd``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            This extension method inserts an item at the end of the enumerated collection.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">The collection.</param>
            <param name="insert">The item to insert at the end.</param>
            <returns>Returns the collection and an additional item at the end.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``2(System.Func{``0,``1})">
            <summary>
            This method curries the function to return a new function with the first parameter T1 wrapped in the new function.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="TResult">The parameter result from the function.</typeparam>
            <param name="f">The function to be curried.</param>
            <returns>Returns a new function with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``3(System.Func{``0,``1,``2})">
            <summary>
            This method curries the function to return a new function with the first parameter T1 wrapped in the new function.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <typeparam name="TResult">The parameter result from the function.</typeparam>
            <param name="f">The function to be curried.</param>
            <returns>Returns a new function with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            This method curries the function to return a new function with the first parameter T1 wrapped in the new function.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <typeparam name="T3">Parameter 3</typeparam>
            <typeparam name="TResult">The parameter result from the function.</typeparam>
            <param name="f">The function to be curried.</param>
            <returns>Returns a new function with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            This method curries the function to return a new function with the first parameter T1 wrapped in the new function.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <typeparam name="T3">Parameter 3</typeparam>
            <typeparam name="T4">Parameter 4</typeparam>
            <typeparam name="TResult">The parameter result from the function.</typeparam>
            <param name="f">The function to be curried.</param>
            <returns>Returns a new function with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``1(System.Action{``0})">
            <summary>
            This method curries the action to return a new action with the first parameter T1 wrapped in the new action.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <param name="f">The action to be curried.</param>
            <returns>Returns a new action with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``2(System.Action{``0,``1})">
            <summary>
            This method curries the action to return a new action with the first parameter T1 wrapped in the new action.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <param name="f">The action to be curried.</param>
            <returns>Returns a new action with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``3(System.Action{``0,``1,``2})">
            <summary>
            This method curries the action to return a new action with the first parameter T1 wrapped in the new action.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <typeparam name="T3">Parameter 3</typeparam>
            <param name="f">The action to be curried.</param>
            <returns>Returns a new action with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Curry``4(System.Action{``0,``1,``2,``3})">
            <summary>
            This method curries the action to return a new action with the first parameter T1 wrapped in the new action.
            </summary>
            <typeparam name="T1">Parameter 1</typeparam>
            <typeparam name="T2">Parameter 2</typeparam>
            <typeparam name="T3">Parameter 3</typeparam>
            <typeparam name="T4">Parameter 4</typeparam>
            <param name="f">The action to be curried.</param>
            <returns>Returns a new action with the T1 parameter contained in the new function.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            This method applies the folding function on the collection and returns the result.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <param name="result"></param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <param name="result">The folding result initial value.</param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0})">
            <summary>
            This method folds the collection from the right, i.e the collection is reversed and the folding function is applied.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="M:Ximura.LinqHelper.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            This method folds the collection from the right, i.e the collection is reversed and the folding function is applied.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <typeparam name="U">The enumeration type.</typeparam>
            <param name="items">The collection to fold.</param>
            <param name="f">The folding function.</param>
            <param name="result">The folding result initial value.</param>
            <returns>Returns the result of the folding process.</returns>
        </member>
        <member name="T:Ximura.Collections.LockFreeRedBlackTreeBase`3">
            <summary>
            This class is a base class for Red-Black Tree implementations.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TVal">The value type.</typeparam>
            <typeparam name="TVert">The vertex type.</typeparam>
        </member>
        <member name="P:Ximura.Collections.ConcurrentTreeBase.IsReadOnly">
            <summary>
            This value specifies whether items can be added or removed from the tree. The default is false.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.mVersion">
            <summary>
            This is the current versionID of the collection.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.mCount">
            <summary>
            This is the internal count for the collection.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.mRoot">
            <summary>
            This is the root vertex.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.mTvalEqComparer">
            <summary>
            This is the equality comparer for the values.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.mTKeyComparer">
            <summary>
            This is the key comparer.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.#ctor(System.Collections.Generic.Comparer{`0},System.Collections.Generic.EqualityComparer{`1})">
            <summary>
            This constructor requires a comparison function and an equality comparer for the value data.
            </summary>
            <param name="keyComparer">The key comparer.</param>
            <param name="valueEqComparer">The value equality comparer. </param>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.Compare(`0,Ximura.Collections.RedBlackTreeLockableVertex{`0,`1})">
            <summary>
            This method compares the key with the vertex key and returns an integer which identifies which is the greater value.
            </summary>
            <param name="key">The key.</param>
            <param name="vertex">The vertex to compare.</param>
            <returns>
            Returns 0 if the key is equal to the vertex. 
            Returns -1 if the key is less than the vertex, and returns 1 if the key is greater than the vertex.
            </returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.AddInternal(`0,`1)">
            <summary>
            This method adds an item to the tree.
            </summary>
            <param name="key">The item key.</param>
            <param name="item">The item.</param>
            <returns>Returns true if the item is successfully added to the list, false if the item is already in the tree.</returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.InsertInternal(Ximura.Collections.RedBlackTreeLockableVertex{`0,`1},Ximura.Collections.RedBlackTreeLockableVertex{`0,`1})">
            <summary>
            This method inserts the new vertex in the correct part of the tree.
            </summary>
            <param name="parent">The parent vertex where the search should begin.</param>
            <param name="newVertex">The new vertex to insert.</param>
            <returns>Returns true if the vertex is inserted successfully.</returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.FindInternal(`0,System.Boolean,Ximura.Collections.LockFreeRedBlackTreeBase{`0,`1,`2}.TreeTraversalWindow{`0,`1}@)">
            <summary>
            This method returns true if the key can be matched by a vertex in the tree.
            </summary>
            <param name="key">The key to search.</param>
            <returns>Returns true if the comparer returns that the key has satisfied the conditions for a match.</returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.RemoveInternal(Ximura.Collections.LockFreeRedBlackTreeBase{`0,`1,`2}.TreeTraversalWindow{`0,`1})">
            <summary>
            This method removes the vertex with the key from the collection.
            </summary>
            <param name="key">The vertex key.</param>
            <returns>Returns true if the vertex is removed.</returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.ClearInternal">
            <summary>
            This method clears the tree of all data.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.ToString">
            <summary>
            This is the debug information for the tree.
            </summary>
            <returns>Returns the string format of the tree.</returns>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.ThreadEnter(Ximura.Collections.LockFreeRedBlackTreeBase{`0,`1,`2}.TreeAction)">
            <summary>
            This method registers a thread when it enters the tree.
            </summary>
            <param name="act">The thread action.</param>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.ThreadExit">
            <summary>
            This method unregisters the thread from the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.LockFreeRedBlackTreeBase`3.Version">
            <summary>
            This is the current collection version.
            </summary>
        </member>
        <member name="P:Ximura.Collections.LockFreeRedBlackTreeBase`3.CountInternal">
            <summary>
            This property returns the number of items in the tree.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.lockItems">
            <summary>
            This private property specifies whether the vertexes should be locked when added to the window.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.#ctor(System.Boolean)">
            <summary>
            This is the default constructor for the structure.
            </summary>
            <param name="lockItems">The property specifies whether the structure should lock vertexes when added to the window.</param>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.Grandparent">
            <summary>
            The vertexes.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.Parent">
            <summary>
            The vertexes.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.Current">
            <summary>
            The vertexes.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.MoveDown(Ximura.Collections.RedBlackTreeLockableVertex{`3,`4})">
            <summary>
            This method adds a new item and moves up the existing item to the window. The method releases the grandparent 
            if it is defined.
            </summary>
            <param name="newCurrent">The new vertex to add.</param>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.MoveUp">
            <summary>
            This method moves the window up the tree. The new grandparent is found from the current grandparent's parent.
            The Current vertex is released and the other vertexes are moved down.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.Release">
            <summary>
            This method releases the vertex that are currently held, starting with the Grandparent and moving down.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.Release(Ximura.Collections.RedBlackTreeLockableVertex{`3,`4})">
            <summary>
            This method releases a particular vertex.
            </summary>
            <param name="vertex">The vertex to release.</param>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeTraversalWindow`2.ToString">
            <summary>
            This is a string representation of the window.
            </summary>
            <returns>Returns a description of the vertex window.</returns>
        </member>
        <member name="T:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeAction">
            <summary>
            This enumeration is used to specify the action type.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeAction.Insert">
            <summary>
            The thread is inserting data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeAction.Remove">
            <summary>
            The thread is removing data.
            </summary>
        </member>
        <member name="F:Ximura.Collections.LockFreeRedBlackTreeBase`3.TreeAction.Contains">
            <summary>
            The thread is checking data is in the tree.
            </summary>
        </member>
        <member name="T:Ximura.EnvelopeAddress">
            <summary>
            EnvelopeAddress is used to route a request to the relevant destination within
            the Ximura Application framework.
            </summary>
        </member>
        <member name="F:Ximura.EnvelopeAddress.NullDestination">
            <summary>
            This is the null destination property.
            </summary>
        </member>
        <member name="F:Ximura.EnvelopeAddress.command">
            <summary>
            The destination command ID
            </summary>
        </member>
        <member name="F:Ximura.EnvelopeAddress.SubCommand">
            <summary>
            The subcommand.
            </summary>
        </member>
        <member name="M:Ximura.EnvelopeAddress.#cctor">
            <summary>
            This is the default static constructor that creates the Null destination address.
            </summary>
        </member>
        <member name="M:Ximura.EnvelopeAddress.#ctor(System.Guid)">
            <summary>
            This is the default constructor for the address command.
            </summary>
            <param name="command">The destination command ID.</param>
        </member>
        <member name="M:Ximura.EnvelopeAddress.#ctor(System.Guid,System.Object)">
            <summary>
            This is the default constructor for the Envelope address where a sub command is specified..
            </summary>
            <param name="command">The destination id of the command this message should be sent to.</param>
            <param name="subcommand">The sub address for the command. 
            Set this to Null if you do not require a subcommand.</param>
        </member>
        <member name="M:Ximura.EnvelopeAddress.Equals(System.Object)">
            <summary>
            This is the equals override.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Returns true if the object is the same as this EnvelopeAddress.</returns>
        </member>
        <member name="M:Ximura.EnvelopeAddress.GetHashCode">
            <summary>
            This is the hash code of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.EnvelopeAddress.Equals(Ximura.EnvelopeAddress)">
            <summary>
            This the equateble interface implementation.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>Returns true if the address is equal.</returns>
        </member>
        <member name="M:Ximura.EnvelopeAddress.op_Equality(Ximura.EnvelopeAddress,Ximura.EnvelopeAddress)">
            <summary>
            This static operator is the equals operator.
            </summary>
            <param name="a">Op A</param>
            <param name="b">Op B</param>
            <returns>Returns true if the two addresses are the same.</returns>
        </member>
        <member name="M:Ximura.EnvelopeAddress.op_Inequality(Ximura.EnvelopeAddress,Ximura.EnvelopeAddress)">
            <summary>
            This is the not equals operator.
            </summary>
            <param name="a">Op A</param>
            <param name="b">Op B</param>
            <returns>Returns true if the two addresses are not the same.</returns>
        </member>
        <member name="T:Ximura.Message">
            <summary>
            The message contect class is used to receive data using specific byte markers.
            </summary>
        </member>
        <member name="F:Ximura.Message.mMessageParts">
            <summary>
            This collection holds the fragments for the message.
            </summary>
        </member>
        <member name="M:Ximura.Message.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.Message.Reset">
            <summary>
            This is the reset method to set the content.
            </summary>
        </member>
        <member name="M:Ximura.Message.ReturnPoolableChildObjects">
            <summary>
            This method is called by the object reset. Any poolable child objects should be returned to the pool.
            </summary>
        </member>
        <member name="M:Ximura.Message.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method writes bytes to the message.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read from the buffer.</param>
            <returns>Returns the number of bytes read from the buffer.</returns>
        </member>
        <member name="M:Ximura.Message.Close">
            <summary>
            Close returns this object to the pool. You should not reference this object after you have closed it.
            </summary>
        </member>
        <member name="M:Ximura.Message.CompletionCheck">
            <summary>
            This method should be called after each fragment is processed to
            </summary>
        </member>
        <member name="M:Ximura.Message.FragmentReadNext">
            <summary>
            This method moves to the next fragment.
            </summary>
        </member>
        <member name="M:Ximura.Message.FragmentSetNext">
            <summary>
            This method returns a new fragment object for the type specified.
            </summary>
            <param name="fragmentType">The fragment type required.</param>
            <returns>Returns the fragment object specified.</returns>
        </member>
        <member name="M:Ximura.Message.FragmentSetNext(System.Type)">
            <summary>
            This method returns a new fragment object for the type specified.
            </summary>
            <param name="fragmentType">The fragment type required.</param>
        </member>
        <member name="M:Ximura.Message.FragmentSetNext(System.Type,System.Int64)">
            <summary>
            This method returns a new fragment object for the type specified.
            </summary>
            <param name="fragmentType">The fragment type required.</param>
            <param name="maxLength">The maximum permitted length for the fragment.</param>
        </member>
        <member name="M:Ximura.Message.FragmentAddInternal(Ximura.IXimuraMessage)">
            <summary>
            This method adds the fragment to the internal collection.
            </summary>
            <param name="fragment">The fragment to add to the collection.</param>
        </member>
        <member name="M:Ximura.Message.Load(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method loads the message for read access.
            </summary>
            <param name="buffer">The buffer to load from.</param>
            <param name="offset">The offset.</param>
            <param name="count">The data length.</param>
        </member>
        <member name="M:Ximura.Message.Load(System.Int64)">
            <summary>
            This load method creates an empty message ready for writing.
            </summary>
            <param name="maxSize">This is the maximum permitted size for the message.</param>
        </member>
        <member name="M:Ximura.Message.EndInitCustom">
            <summary>
            This method builds the fragment collection.
            </summary>
        </member>
        <member name="M:Ximura.Message.FragmentCollectionComplete">
            <summary>
            This method is used to complete the header collection organization once the initialization phase has ended.
            </summary>
        </member>
        <member name="M:Ximura.Message.FragmentCollectionBuild">
            <summary>
            This method splits the instruction header in to its constituent parts.
            </summary>
        </member>
        <member name="M:Ximura.Message.FragmentCollectionBuild(System.Boolean)">
            <summary>
            This method splits the instruction header in to its constituent parts.
            </summary>
            <param name="force">Set this parameter to true if you wish to force a rebuild.</param>
        </member>
        <member name="M:Ximura.Message.FragmentGet(System.Type)">
            <summary>
            This method returns a new fragment object of the specified type. If the pool manager is not set
            this method will create a new fragment object.
            </summary>
            <param name="fragmentType">The fragment type.</param>
            <returns>Returns fragment object.</returns>
        </member>
        <member name="P:Ximura.Message.CanRead">
            <summary>
            This method indicates whether data can be read from the message.
            </summary>
        </member>
        <member name="P:Ximura.Message.CanWrite">
            <summary>
            This boolean property indicates whether data can be written to the message.
            </summary>
        </member>
        <member name="P:Ximura.Message.Length">
            <summary>
            This method returns the length of the current message.
            </summary>
        </member>
        <member name="P:Ximura.Message.FragmentCanReadNext">
            <summary>
            This method returns true
            </summary>
        </member>
        <member name="P:Ximura.Message.FragmentReadPointer">
            <summary>
            This pointer sets the current fragment.
            </summary>
        </member>
        <member name="P:Ximura.Message.FragmentFirst">
            <summary>
            This is the first fragment.
            </summary>
        </member>
        <member name="P:Ximura.Message.FragmentCurrent">
            <summary>
            This is the last or current fragment.
            </summary>
        </member>
        <member name="P:Ximura.Message.FragmentHeaderInitialType">
            <summary>
            This property is the initial incoming fragment type.
            </summary>
        </member>
        <member name="P:Ximura.Message.Fragments">
            <summary>
            These are the fragments in the message.
            </summary>
        </member>
        <member name="P:Ximura.Message.DebugString">
            <summary>
            This override combines the base DebugStrings in to a common string to aid with debugging.
            </summary>
        </member>
        <member name="T:Ximura.LockableNullableWrapper`1">
            <summary>
            The lockable base class is for objects that require fine-grained locking.
            </summary>
        </member>
        <member name="F:Ximura.LockableNullableWrapper`1.mLocked">
            <summary>
            The private value that indicates whether the class is locked.
            </summary>
        </member>
        <member name="F:Ximura.LockableNullableWrapper`1.mHasValue">
            <summary>
            The boolean value which specifies whether the structure contains a valid value.
            </summary>
        </member>
        <member name="F:Ximura.LockableNullableWrapper`1.mValue">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Ximura.LockableNullableWrapper`1.mLockingThread">
            <summary>
            The managed ID of the locking thread.
            </summary>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.#ctor(`0)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.Lock">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.LockWait">
            <summary>
            This method halts any threads if the item is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.TryLock">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.Unlock">
            <summary>
            This method unlocks the item.
            </summary>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.ToString">
            <summary>
            This method provides a string value of the enclosed data.
            </summary>
            <returns>Returns the internal data as a string.</returns>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.GetHashCode">
            <summary>
            This method returns the hashcode of the enclosed data.
            </summary>
            <returns>The internal hashcode.</returns>
        </member>
        <member name="M:Ximura.LockableNullableWrapper`1.Equals(System.Object)">
            <summary>
            This method compares the other value to the enclosed data.
            </summary>
            <param name="other">The data to compare.</param>
            <returns>Returns true if the data is the same.</returns>
        </member>
        <member name="P:Ximura.LockableNullableWrapper`1.IsLocked">
            <summary>
            Returns true if the item is locked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="P:Ximura.LockableNullableWrapper`1.Value">
            <summary>
            This is the value locked by the collection.
            </summary>
        </member>
        <member name="P:Ximura.LockableNullableWrapper`1.HasValue">
            <summary>
            Specifies whether the wrapper contains a value.
            </summary>
        </member>
        <member name="T:Ximura.MatchTerminatorResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorResult.Length">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorResult.CanContinue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorResult.IsTerminator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorResult.Status">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ximura.Collections.LockFreeRedBlackTreeBase`2">
            <summary>
            This class is a base class for Red-Black Tree implementations.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TVal">The value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`2.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTreeBase`2.#ctor(System.Collections.Generic.Comparer{`0},System.Collections.Generic.EqualityComparer{`1})">
            <summary>
            This constructor requires custom comparers for both the key data and an equality comparer for the value data.
            </summary>
            <param name="vertexComparer">The key comparer.</param>
            <param name="valueEqComparer">The value equality comparer. </param>
        </member>
        <member name="T:Ximura.PoolObjectUnavailableException">
            <summary>
            This exception is thrown when the pool is not able to return an object.
            </summary>
        </member>
        <member name="M:Ximura.PoolObjectUnavailableException.#ctor">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
        </member>
        <member name="M:Ximura.PoolObjectUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.PoolObjectUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.PoolObjectUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.Collections.IPoolInitialization`1">
            <summary>
            This interface implements additional initialization method for the objects in the pool.
            </summary>
            <typeparam name="T">The pool object type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.IPool`1">
            <summary>
            This interface is implemented by collection classes the provide object pooling.
            </summary>
            <typeparam name="T">The pool object type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.ICollectionBase`1">
            <summary>
            This interface is shared by both the IQueue and IStack interfaces and contains shared functionality.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ICollectionBase`1.Clear">
            <summary>
            This method clears the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ICollectionBase`1.Contains(`0)">
            <summary>
            This method returns true if the item is contained in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if the collection contains the item.</returns>
        </member>
        <member name="M:Ximura.Collections.ICollectionBase`1.TryPeek(`0@)">
            <summary>
            This method tries to peek the next item to leave the collection.
            </summary>
            <param name="item">The item at the top or default.</param>
            <returns>Returns true if an item is available.</returns>
        </member>
        <member name="P:Ximura.Collections.ICollectionBase`1.Count">
            <summary>
            The collection item count.
            </summary>
        </member>
        <member name="M:Ximura.Collections.IPool`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.Collections.IPool`1.TryReturn(`0)">
            <summary>
            This method attemtps to return an object to the pool.
            </summary>
            <param name="value">The item to return.</param>
            <returns>Returns true if the item was successfully returned.</returns>
        </member>
        <member name="M:Ximura.Collections.IPool`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.Collections.IPool`1.TryGet(`0@)">
            <summary>
            This method attempts to take an item from the pool.
            </summary>
            <param name="value">The item from the pool.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="P:Ximura.Collections.IPool`1.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.Collections.IPool`1.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.IPool`1.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.IPool`1.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.IPool`1.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.Collections.IPool`1.IsFixedSize">
            <summary>
            This property specifies whether the pool can grow when more items are requested than are currently available.
            </summary>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.TryGet(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.TryGet(System.Action{`0},`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.Collections.IPoolInitialization`1.TryGet(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0},`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.Return(`0)">
            <summary>
            This method returns an item to the pool.
            </summary>
            <param name="value">The item to return to the pool.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.TryReturn(`0)">
            <summary>
            This method attemtps to return an object to the pool.
            </summary>
            <param name="value">The item to return.</param>
            <returns>Returns true if the item was successfully returned.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.CopyTo(`0[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.Get">
            <summary>
            This method retrieves an item from the pool.
            </summary>
            <returns>Returns an item from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <returns>An object of the type defined in the pool definition.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <returns>An object of the type defined in the pool definition, with the serialization data.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.TryGet(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.TryGet(System.Action{`0},`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.TryGet(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0},`0@)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <param name="initializer">This action will be performed on the object after the data has been deserialized.</param>
            <param name="value">An object of the type defined in the pool definition, with the serialization data.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.TryGet(`0@)">
            <summary>
            This method attempts to take an item from the pool.
            </summary>
            <param name="value">The item from the pool.</param>
            <returns>Returns true if an item has been returned from the pool.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPool`2.ResetPoolObject(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is used to reset the pool object from the serialization information.
            You should override this method if you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.IsFixedSize">
            <summary>
            This property determines whether the collection will dynamically expand when new values are added. 
            This property can only be set from the constructor, although this property can be overriden in derived classes to ensure
            a particular value.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPool`2.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ConcurrentList`2">
            <summary>
            
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <typeparam name="A">The vertex array type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="P:Ximura.Collections.ConcurrentList`2.CollectionAllowMultipleEntries">
            <summary>
            The list allows multiple entries.
            </summary>
        </member>
        <member name="T:Ximura.SCMJobCompletionType">
            <summary>
            This is the completion behaviour of the security manager job.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.OnExit">
            <summary>
            The job will complete when the job leaves the main calling method.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.ManualSignal">
            <summary>
            The job will complete when the SignalCompletion method is called.
            </summary>
        </member>
        <member name="F:Ximura.SCMJobCompletionType.SignalOrTimeout">
            <summary>
            This property specifies 
            </summary>
        </member>
        <member name="T:Ximura.CSVTerminationMatchCollectionState">
            <summary>
            This states matches on the end of line for the CSV file line. It also allows line folding where the 
            line is wrapped within speech marks.
            </summary>
        </member>
        <member name="T:Ximura.MatchCollectionState`2">
            <summary>
            This class is used to match the two collections.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TMatch">The match type.</typeparam>
        </member>
        <member name="M:Ximura.MatchCollectionState`2.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.MatchCollectionState`2.ResetMatchCounters">
            <summary>
            This method resets the match counter between calls to the MatchCollection method.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.SlidingWindow">
            <summary>
            The sliding window queue.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.IsTerminator">
            <summary>
            Indicates whether the match is a terminator. This additional functionality is needed for complex matches.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.Status">
            <summary>
            Identifies when there is a match.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.DebugTrace">
            <summary>
            Identifies when there is a match.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.DebugTraceCollection">
            <summary>
            This collection should be used to debug the tract route for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.Start">
            <summary>
            Identifies the start of a match.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.Length">
            <summary>
            Identifies the position in the data, including the terminator.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.MatchPosition">
            <summary>
            This is the match position for the collection.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.CurrentEnumerator">
            <summary>
            This method holds the current enumerator during a partial match
            </summary>
        </member>
        <member name="P:Ximura.MatchCollectionState`2.ActualEnumerator">
            <summary>
            This property gets the CurrentEnumerator or creates a new enumerator if that is null.
            </summary>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.#ctor(System.Boolean)">
            <summary>
            This is the extended constructor.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.GetEnumerator">
            <summary>
            This method returns a new CRLFFoldingMatchCollection enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ximura.CSVTerminationMatchCollectionState.CSVMatchCollection">
            <summary>
            The class contains the match terminators.
            </summary>
        </member>
        <member name="T:Ximura.MatchCollection`2">
            <summary>
            This structure is used to hold the match terminator collection.
            </summary>
        </member>
        <member name="M:Ximura.MatchCollection`2.#ctor(System.Collections.Generic.IEnumerator{Ximura.MatchTerminator{`0,`1}})">
            <summary>
            This protected constructor initializes the collection.
            </summary>
            <param name="terminators">The terminators enumerator.</param>
        </member>
        <member name="M:Ximura.MatchCollection`2.Dispose">
            <summary>
            This method disposes the collection.
            </summary>
        </member>
        <member name="M:Ximura.MatchCollection`2.Dispose(System.Boolean)">
            <summary>
            This method disposes of any resources held open by the class.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ximura.MatchCollection`2.MoveNext">
            <summary>
            This method moves the enumerator to the next position.
            </summary>
            <returns>Returns true if successful, or false if the end of the collection has been reached.</returns>
        </member>
        <member name="M:Ximura.MatchCollection`2.Reset">
            <summary>
            This method resets the collection to before the first record.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollection`2.Current">
            <summary>
            This property returns the current record.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollection`2.System#Collections#IEnumerator#Current">
            <summary>
            This is the default enumerator.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollection`2.Position">
            <summary>
            This is the current position in the match collection.
            </summary>
        </member>
        <member name="P:Ximura.MatchCollection`2.Item(System.Int32)">
            <summary>
            This method returns the specified item for the collection. You should override this indexer.
            </summary>
            <param name="index">The position index.</param>
            <returns></returns>
        </member>
        <member name="P:Ximura.MatchCollection`2.Count">
            <summary>
            This property returns the number of items in the collection. You should override this property.
            </summary>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.CSVMatchCollection.#ctor(System.Boolean)">
            <summary>
            This constructor initializes the collection with the boundary.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.CSVMatchCollection.Dispose(System.Boolean)">
            <summary>
            This method disposes the collection.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Ximura.CSVTerminationMatchCollectionState.CSVMatchCollection.Item(System.Int32)">
            <summary>
            This method returns the specified item for the collection. You should override this indexer.
            </summary>
            <param name="index">The position index.</param>
            <returns></returns>
        </member>
        <member name="P:Ximura.CSVTerminationMatchCollectionState.CSVMatchCollection.Count">
            <summary>
            This property returns the number of items in the collection. You should override this property.
            </summary>
        </member>
        <member name="T:Ximura.CSVTerminationMatchCollectionState.CRLFTerminatorWithReset">
            <summary>
            This termination class specifically matches on CRLF and resets the match buffer when
            a termination character has been found.
            </summary>
        </member>
        <member name="T:Ximura.MatchSequenceTerminator`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
        </member>
        <member name="M:Ximura.MatchSequenceTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
            go8
            </summary>
            <param name="Terminator">The terminator enumeration.</param>
            <param name="CanScan"></param>
        </member>
        <member name="M:Ximura.MatchSequenceTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Func{`0,Ximura.MatchTerminatorResult,Ximura.MatchTerminatorStatus},System.Func{Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64,System.Boolean})">
            <summary>
            
            </summary>
            <param name="Terminator"></param>
            <param name="CanScan"></param>
            <param name="Predicate"></param>
            <param name="PredicateTerminator"></param>
        </member>
        <member name="M:Ximura.MatchSequenceTerminator`2.Validate(`0,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.CRLFTerminatorWithReset.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.CSVTerminationMatchCollectionState.CRLFTerminatorWithReset.Validate(System.Byte,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.Tuple`2">
            <summary>
            The tuple structure is used to hold two values, predominantly for fast comparison.
            </summary>
            <typeparam name="T1">The first item type.</typeparam>
            <typeparam name="T2">The second item type.</typeparam>
        </member>
        <member name="M:Ximura.Tuple`2.#ctor(`0,`1)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
        </member>
        <member name="M:Ximura.Tuple`2.Equals(System.Object)">
            <summary>
            Returns true if the two items are the same type and the same value.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>Returns true if the two items are identical, false otherwise.</returns>
        </member>
        <member name="M:Ximura.Tuple`2.Equals(Ximura.Tuple{`0,`1})">
            <summary>
            Returns true if the two Tuples are the same value.
            </summary>
            <param name="other">The tuple to compare against.</param>
            <returns>Returns true if the two tuples are identical, false otherwise.</returns>
        </member>
        <member name="M:Ximura.Tuple`2.op_Inequality(Ximura.Tuple{`0,`1},Ximura.Tuple{`0,`1})">
            <summary>
            This is the inequality operator for the Tuples.
            </summary>
            <param name="a">Tuple 1</param>
            <param name="b">Tuple 2</param>
            <returns>Returns true if the two tuples are different, otherwise false.</returns>
        </member>
        <member name="M:Ximura.Tuple`2.op_Equality(Ximura.Tuple{`0,`1},Ximura.Tuple{`0,`1})">
            <summary>
            This is the equality operator for the Tuples.
            </summary>
            <param name="a">Tuple 1</param>
            <param name="b">Tuple 2</param>
            <returns>Returns true if the two tuples are identical, otherwise false.</returns>
        </member>
        <member name="M:Ximura.Tuple`2.GetHashCode">
            <summary>
            This method returns the hash code for the combined items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Ximura.Tuple`2.ToString">
            <summary>
            This override provides an easy way to view the contents of the Tuple.
            </summary>
            <returns>Returns a string representation of the Tuple.</returns>
        </member>
        <member name="P:Ximura.Tuple`2.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="P:Ximura.Tuple`2.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="T:Ximura.XimuraServiceContainer">
            <summary>
            Summary description for ServiceContainer.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.#ctor(System.IServiceProvider)">
            <summary>
            The parent provider constructor.
            </summary>
            <param name="parentProvider">The parent service provider.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback delegate the create the service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the service specified to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The service.</param>
            <param name="promote">True promotes this service to the parent service container.</param>
        </member>
        <member name="M:Ximura.XimuraServiceContainer.GetService(System.Type)">
            <summary>
            This method returns the requested service.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>Returns the service requested, or null if the service cannot be found.</returns>
        </member>
        <member name="P:Ximura.XimuraServiceContainer.ParentProvider">
            <summary>
            This property sets the parent provider.
            </summary>
        </member>
        <member name="T:Ximura.MatchTerminatorStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.NotSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.Fail">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.FailNoLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.Success">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.SuccessReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.SuccessNoLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.SuccessNoLengthReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.SuccessPartial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.NoLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ximura.MatchTerminatorStatus.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ximura.ServiceEventArgs">
            <summary>
            The ServiceEventArgs class is used by the component to pass notification 
            of the service status
            </summary>
        </member>
        <member name="M:Ximura.ServiceEventArgs.#ctor">
            <summary>
            The default constructor. The service is defined as Undefined
            </summary>
        </member>
        <member name="M:Ximura.ServiceEventArgs.#ctor(Ximura.XimuraServiceStatus)">
            <summary>
            The main constructor.
            </summary>
            <param name="status">The status of the service.</param>
        </member>
        <member name="P:Ximura.ServiceEventArgs.Status">
            <summary>
            The status of the service
            </summary>
        </member>
        <member name="T:Ximura.ElementSite">
            <summary>
            ElementSite is used by the Ximura.Data component model to link elements
            within an aggreagate Content/Element object.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraAppSite">
            <summary>
            IXimuraAppSite is an interface that inherits from ISite and provides 
            specific component model method for the Ximura Application framework.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraAppSite.parent">
            <summary>
            An additional property which is the parent of the component
            </summary>
        </member>
        <member name="P:Ximura.IXimuraAppSite.ServiceContainer">
            <summary>
            The service container.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Component">
            <summary>
            This is the component.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Container">
            <summary>
            This is the container
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_bDesignMode">
            <summary>
            This is the internal variable that determines whether the 
            system is in design mode.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_Name">
            <summary>
            This is the site instance name
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_theServices">
            <summary>
            This is the document service container.
            </summary>
        </member>
        <member name="F:Ximura.ElementSite.m_parent">
            <summary>
            This is the parent object that created collection
            </summary>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent)">
            <summary>
            This is a default constructor for the ElementSite
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer)">
            <summary>
            This constructor allows a service container to be set for the site
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer,System.String,System.Boolean)">
            <summary>
            This constructor
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
            <param name="Name">The name of the site</param>
            <param name="bDesignMode">
            A boolean value which specifies whether the 
            system is in design mode
            </param>
        </member>
        <member name="M:Ximura.ElementSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.ComponentModel.Design.IServiceContainer,System.String,System.Boolean,System.Object)">
            <summary>
            This constructor
            </summary>
            <param name="actvCntr">The container.</param>
            <param name="prntCmpnt">The component.</param>
            <param name="theServices">The Service Container</param>
            <param name="Name">The name of the site</param>
            <param name="bDesignMode"></param>
            <param name="parent">The parent object that created this component</param>
        </member>
        <member name="M:Ximura.ElementSite.GetService(System.Type)">
            <summary>
            This method returns an object that represents the service specified
            in the serviceType parameter.
            </summary>
            <param name="serviceType">The service type to retrieve.</param>
            <returns>An object that represents the service or null is the service
            cannot be found.</returns>
        </member>
        <member name="P:Ximura.ElementSite.Component">
            <summary>
            The component
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.Container">
            <summary>
            The container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.DesignMode">
            <summary>
            The design mode of the container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.Name">
            <summary>
            The name of the container
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.parent">
            <summary>
            An additional property which is the parent of the component
            </summary>
        </member>
        <member name="P:Ximura.ElementSite.ServiceContainer">
            <summary>
            The service container.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ILockableMarkableArray`1">
            <summary>
            This interface is implemented by lockable arrays.
            </summary>
            <typeparam name="T">The array item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ILockableMarkableArray`1.ItemIsLocked(System.Int32)">
            <summary>
            This method checks whether an item in the collection is locked.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="M:Ximura.Collections.ILockableMarkableArray`1.ItemLock(System.Int32)">
            <summary>
            This method locks the specific item.
            </summary>
            <param name="index">The item index.</param>
        </member>
        <member name="M:Ximura.Collections.ILockableMarkableArray`1.ItemLockWait(System.Int32)">
            <summary>
            This method waits for a locked item to become available.
            </summary>
            <param name="index">The index of the item to wait for.</param>
        </member>
        <member name="M:Ximura.Collections.ILockableMarkableArray`1.ItemTryLock(System.Int32)">
            <summary>
            This method attempts to lock the item specified.
            </summary>
            <param name="index">The index of the item you wish to lock.</param>
            <returns>Returns true if the item was successfully locked.</returns>
        </member>
        <member name="M:Ximura.Collections.ILockableMarkableArray`1.ItemUnlock(System.Int32)">
            <summary>
            The method unlocks the item.
            </summary>
            <param name="index">The index of the item you wish to unlock.</param>
        </member>
        <member name="P:Ximura.Collections.ILockableMarkableArray`1.Count">
            <summary>
            This is the capacity of the array.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ILockableMarkableArray`1.Item(System.Int32)">
            <summary>
            This is the indexer for the array.
            </summary>
            <param name="index">The index position.</param>
            <returns>Returns the object corresponding to the index position.</returns>
        </member>
        <member name="T:Ximura.RQRSContract`2">
            <summary>
            IXimuraRQRSEnvelope is used to hold the information needed for a system request, and is the 
            primary object used to transmit information arounds the Ximura system.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraRQRSEnvelope">
            <summary>
            This interface implements the public methods and properties for the IXimuraRQRSEnvelope
            and contract definitions.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolableObjectDeserializable">
            <summary>
            This interface is implemented by poolable object that also support deserialization.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolableObjectDeserializable.Reset(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method resets the object in to the deserialized state specified in the info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Ximura.IXimuraPoolableObjectDeserializable.CanResetWithDeserialization">
            <summary>
            This propoerty indicates whether the object support a deserialization reset.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraRQRSEnvelope.PrepareResponse(System.String,System.String)">
            <summary>
            This shortcut is used to prepare the response status and substatus.
            </summary>
            <param name="status">The status.</param>
            <param name="subStatus">The substatus.</param>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.DestinationAddress">
            <summary>
            The destination address for the envelope/contract.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Sender">
            <summary>
            The originator/owner of the request.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.SenderReference">
            <summary>
            The internal reference for the sender.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobUserID">
            <summary>
            This is the job user ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobUserReferenceID">
            <summary>
            This is the job user plain text reference ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.JobSecurityIdentifier">
            <summary>
            This is the unique job security reference ID.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Request">
            <summary>
            The Request property
            </summary>
        </member>
        <member name="P:Ximura.IXimuraRQRSEnvelope.Response">
            <summary>
            The Response property
            </summary>
        </member>
        <member name="F:Ximura.RQRSContract`2.mPoolTrackingID">
            <summary>
            This ID is used to track the lifecycle of the poolable object, and does not change throughout
            the lifetime of the object.
            </summary>
        </member>
        <member name="F:Ximura.RQRSContract`2.mTTL">
            <summary>
            This variable determines the maximum number of hops that the Envelope
            can pass through before it expires.
            </summary>
        </member>
        <member name="F:Ximura.RQRSContract`2.destination">
            <summary>
            This is the destination for the Request
            </summary>
        </member>
        <member name="M:Ximura.RQRSContract`2.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.RQRSContract`2.#ctor(Ximura.EnvelopeAddress)">
            <summary>
            The constructor that specifies the destination for the request.
            </summary>
            <param name="destination"></param>
        </member>
        <member name="M:Ximura.RQRSContract`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.RQRSContract`2.Reset">
            <summary>
            This method resets the object.
            </summary>
        </member>
        <member name="M:Ximura.RQRSContract`2.PrepareResponse(System.String,System.String)">
            <summary>
            This shortcut is used to prepare the response status and substatus.
            </summary>
            <param name="status"></param>
            <param name="subStatus"></param>
        </member>
        <member name="M:Ximura.RQRSContract`2.Reset(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization reset method.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.RQRSContract`2.ObjectPoolReturn">
            <summary>
            This method returns the IXimuraRQRSEnvelope to the pool.
            </summary>
        </member>
        <member name="M:Ximura.RQRSContract`2.Dispose">
            <summary>
            The dispose method.
            </summary>
        </member>
        <member name="M:Ximura.RQRSContract`2.Dispose(System.Boolean)">
            <summary>
            The overrided dispose method
            </summary>
            <param name="disposing">True if this is called by dispose, false if this
            is called by the finalizer.</param>
        </member>
        <member name="P:Ximura.RQRSContract`2.DestinationAddress">
            <summary>
            The destination address for the envelope.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.Sender">
            <summary>
            The original sender
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.SenderReference">
            <summary>
            The original sender internal reference 
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.ContractRequest">
            <summary>
            The Contract Request property
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.Request">
            <summary>
            The Request property
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.ContractResponse">
            <summary>
            The Response property
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.Response">
            <summary>
            The backwards compatible response property
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.JobUserID">
            <summary>
            This is the job user ID.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.JobUserReferenceID">
            <summary>
            This is the job user plain text reference ID.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.JobSecurityIdentifier">
            <summary>
            This is the unique job security reference ID.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.CanResetWithDeserialization">
            <summary>
            This propoerty indicates whether the object support a deserialization reset.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.ObjectPool">
            <summary>
            This property contains a reference to the object pool for the IXimuraRQRSEnvelope.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.ObjectPoolCanReturn">
            <summary>
            This property returns true if the object can be returns to the pool.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.RQRSContract`2.TrackID">
            <summary>
            This property is the pool tracking ID.
            </summary>
        </member>
        <member name="T:Ximura.CSVMatchCollectionState">
            <summary>
            This collection state is used to parse an indvidual line in a CSV file.
            </summary>
        </member>
        <member name="M:Ximura.CSVMatchCollectionState.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="T:Ximura.XimuraServiceException">
            <summary>
            XimuraException is the root exception object for the Ximura system.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.XimuraServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ximura.XimuraServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Ximura.XimuraServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a protected instance of the XimuraException class for remoting.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.XimuraAppContainerEventArgs">
            <summary>
            This object contains the argument passed when a component id added or removed.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainerEventArgs.#ctor(System.ComponentModel.IComponent,System.String)">
            <summary>
            This is the event argument constructor.
            </summary>
            <param name="component"></param>
            <param name="name"></param>
        </member>
        <member name="P:Ximura.XimuraAppContainerEventArgs.Component">
            <summary>
            This is the component that is added or removed from the collection.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainerEventArgs.Name">
            <summary>
            This is the component name. This is only used when a component
            is added to the collection. If the name is not set this value 
            is null.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.ClassBasedVertexWindow`1">
            <summary>
            The vertex window structure holds the search results from a scan.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.Data.ClassBasedVertexWindow`1.Curr">
            <summary>
            The current vertex.
            </summary>
        </member>
        <member name="F:Ximura.Collections.Data.ClassBasedVertexWindow`1.Next">
            <summary>
            The next vertex.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.#ctor(Ximura.Collections.ClassBasedVertexArray{`0},Ximura.Collections.Data.CollectionVertexClass{`0},System.Collections.Generic.IEqualityComparer{`0},System.Int32,`0)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="coll">The data collection.</param>
            <param name="vertex">The start vertex.</param>
            <param name="eqComparer">The equality comparer for the collection.</param>
            <param name="hashID">The hashID of the item.</param>
            <param name="item">The data item.</param>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.ItemSetNext">
            <summary>
            This method changes the value of the next item.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.ItemInsert">
            <summary>
            
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.InsertDataSentinel">
            <summary>
            This method inserts a data sentinel in to the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.InsertSentinel(Ximura.Collections.Data.CollectionVertexClass{`0})">
            <summary>
            This method inserts a data sentinel in to the data collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.Unlock">
            <summary>
            This method provides common functionality to unlock a VertexWindow.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.ScanAndLock">
            <summary>
            This method scans through the slot data until is reaches the end of the data, or the position 
            where the hashID meets a slot with a hashID that is greater than itself.
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.MoveUp">
            <summary>
            This method moves up the Next vertex to the current position.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.ItemRemoveAndUnlock">
            <summary>
            This method removes the next item for the list and discards it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.Data.ClassBasedVertexWindow`1.Snip">
            <summary>
            This method snips out the next vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.ClassBasedVertexWindow`1.HashID">
            <summary>
            This is the hash ID of the item currently being searched.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.ClassBasedVertexWindow`1.Value">
            <summary>
            This is the current value being handled by the window.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.ClassBasedVertexWindow`1.ScanItemMatch">
            <summary>
            This property specifies whether the next item is a match for the data.
            </summary>
        </member>
        <member name="T:Ximura.PoolInvocator`1">
            <summary>
            This is the base object pool. 
            </summary>
            <typeparam name="T">The pool type.</typeparam>
        </member>
        <member name="T:Ximura.PoolBase`1">
            <summary>
            The PoolBase class is used to hold a collection of objects that can be re-used.
            </summary>
            <typeparam name="T">The object pool type.</typeparam>
        </member>
        <member name="F:Ximura.PoolBase`1.mAvailable">
            <summary>
            This queue contains a list of available object waiting to be assigned.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor sets the pool create parameters.
            </summary>
            <param name="min">The initial set of objects.</param>
            <param name="max">The maximum set of object for the pool. Set this to -1 is you do not 
            wish to set a maximum value.</param>
            <param name="prefer">The prefered number of object for the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.InitializePool">
            <summary>
            This method initiates the object pool with the required number of objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.Dispose(System.Boolean)">
            <summary>
            This is the component model Dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ximura.PoolBase`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.ResetPoolObject(`0)">
            <summary>
            This method is used to reset the pool object. You should override this method if
            you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.ResetPoolObject(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is used to reset the pool object from the serialization information.
            You should override this method if you wish to set particular values.
            </summary>
            <param name="obj">The object to reset.</param>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.Ximura#IXimuraPool#Get">
            <summary>
            This is the default get() accessor.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.Get">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Action{`0})">
            <summary>
            The Get() method takes an object from the pool, if 
            there are no objects available the pool will create a new object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
            <param name="initializer">This is the object initialization action. This value can be null.</param>
            <returns>An object of the type defined in the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">
            An object disposed exception will be thrown if the pool has been disposed.
            </exception>
        </member>
        <member name="M:Ximura.PoolBase`1.Return(System.Object)">
            <summary>
            This method returns an object to the pool as an object and not being of a specific type.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.Return(`0)">
            <summary>
            This method returns an object to the pool.
            </summary>
            <param name="value">The object to return to the pool.</param>
        </member>
        <member name="M:Ximura.PoolBase`1.InternalAvailable">
            <summary>
            This method returns the internal available property.
            </summary>
            <returns>Returns true if the pool can return objects.</returns>
        </member>
        <member name="M:Ximura.PoolBase`1.Clear">
            <summary>
            This method is used to clear the pool of all objects.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.ClearInternal">
            <summary>
            This method removes all waiting objects in the pool. If the objects support IDisposable
            the objects will be disposed.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.StatisticsUpdate">
            <summary>
            This method will update any performance counters.
            </summary>
        </member>
        <member name="M:Ximura.PoolBase`1.StatisticsInitialize">
            <summary>
            This method will initialize any performance counters.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Available">
            <summary>
            This method returns true if there are objects available in the pool.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Max">
            <summary>
            This is the maximum pool size, a value of -1 specifies no maximum size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Min">
            <summary>
            This is the minimum pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Prefered">
            <summary>
            This is prefered pool size.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Count">
            <summary>
            This property returns the number of active objects.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.IsBuffered">
            <summary>
            This property indicates whether the pool is buffered. Buffered pools are shared amongst multiple 
            clients and do not implement the clear method.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.PoolManager">
            <summary>
            If this property is set, it will be passed on to objects that implement the IXimuraPoolManagerDirectAccess
            interface to allow them to get additional pool objects of different types for their own internal use.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.Stats">
            <summary>
            This property returns a summary of the stats for the collection.
            </summary>
        </member>
        <member name="P:Ximura.PoolBase`1.StatsInternalNoLock">
            <summary>
            This method returns a string
            </summary>
        </member>
        <member name="F:Ximura.PoolInvocator`1.mRemoteInvocator">
            <summary>
            This is the pool invocator that can be used to invoke a new object.
            </summary>
        </member>
        <member name="M:Ximura.PoolInvocator`1.#ctor(System.Func{`0})">
            <summary>
            The default constructor.
            </summary>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.PoolInvocator`1.#ctor(System.Func{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.PoolInvocator`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="T:Ximura.Collections.IPriorityQueue`1">
            <summary>
            This interface is implemented by a queue.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.IPriorityQueue`1.Dequeue">
            <summary>
            Removes an item from the head of the queue.
            </summary>
            <returns>Returns the item at the head of the queue.</returns>
        </member>
        <member name="M:Ximura.Collections.IPriorityQueue`1.TryDequeue(`0@)">
            <summary>
            This item tries to empty an item in the queue.
            </summary>
            <param name="item">The top item in the queue.</param>
            <returns>Returns true if there is an item in the queue.</returns>
        </member>
        <member name="M:Ximura.Collections.IPriorityQueue`1.Enqueue(`0)">
            <summary>
            This method adds an item to the tail of the queue.
            </summary>
            <param name="item">The item to add to the queue.</param>
        </member>
        <member name="M:Ximura.Collections.IPriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="priority"></param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentPriorityQueue`1">
            <summary>
            This class is an implementation of a concurrent scalable queue.
            </summary>
            <typeparam name="T">The item type for the stack.</typeparam>
        </member>
        <member name="F:Ximura.Collections.ConcurrentPriorityQueue`1.mVersion">
            <summary>
            The version value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.ConcurrentPriorityQueue`1.mCount">
            <summary>
            This is the current item count.
            </summary>
        </member>
        <member name="F:Ximura.Collections.ConcurrentPriorityQueue`1.mEqualityComparer">
            <summary>
            This is the equality comparer for the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentPriorityQueue`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Enqueue(`0)">
            <summary>
            This method enqueues an item in to the collection with the highest priority.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            This method enqueues an item in to the collection with the priority specified.
            </summary>
            <param name="item">The item to enqueue.</param>
            <param name="priority">The priority of the item to enqueue.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Dequeue">
            <summary>
            This method dequeues the item from the queue with the highest priority.
            </summary>
            <returns>Returns an item from the queue.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if the queue is empty.</exception>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.TryDequeue(`0@)">
            <summary>
            This method attempt to remove an item from the queue with the highest priority.
            </summary>
            <param name="item">The item returned from the queue.</param>
            <returns>Returns true if an item is returned.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Peek">
            <summary>
            This method returns an item from the head of the queue without removing the item.
            </summary>
            <returns>Returns an item from the queue.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.TryPeek(`0@)">
            <summary>
            This method attempts to return an item from the head of the queue without removing the item.
            </summary>
            <param name="item">The item returned from the queue.</param>
            <returns>Returns true if an item is returned.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Contains(`0)">
            <summary>
            This method checks whether an item exists in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.Clear">
            <summary>
            This method clears the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.ToArray">
            <summary>
            Returns the data in the collection as an array.
            </summary>
            <returns>Returns an array of data.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.TrimExcess">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentPriorityQueue`1.AddIncomingData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method enqueues the incoming data to the collection that was passed in the constructor.
            </summary>
            <param name="collection">The data to enqueue.</param>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPriorityQueue`1.Count">
            <summary>
            The collection count.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPriorityQueue`1.IsSynchronized">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentPriorityQueue`1.SyncRoot">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ConcurrentStack`1">
            <summary>
            This class is an implementation of a concurrent scalable stack.
            </summary>
            <typeparam name="T">The item type for the stack.</typeparam>
        </member>
        <member name="T:Ximura.Collections.IStack`1">
            <summary>
            This interface is implemented by a stack.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.IStack`1.Push(`0)">
            <summary>
            This method pushes an item on to the stack.
            </summary>
            <param name="item">The item to add to the stack.</param>
        </member>
        <member name="M:Ximura.Collections.IStack`1.Pop">
            <summary>
            This method removes the top item from the stack.
            </summary>
            <returns>Returns the top item on the stack.</returns>
        </member>
        <member name="M:Ximura.Collections.IStack`1.TryPop(`0@)">
            <summary>
            This method tries to return the top item from the stack.
            </summary>
            <param name="item">The item at the top of the stack.</param>
            <returns>Returns true if an item is removed from the stack.</returns>
        </member>
        <member name="F:Ximura.Collections.ConcurrentStack`1.mVersion">
            <summary>
            The version value.
            </summary>
        </member>
        <member name="F:Ximura.Collections.ConcurrentStack`1.mCount">
            <summary>
            This is the current item count.
            </summary>
        </member>
        <member name="F:Ximura.Collections.ConcurrentStack`1.mIsFixedSize">
            <summary>
            This property determines whether the collection is a fixed size. Fixed size collections will reject new records
            when the capacity has been reached.
            </summary>
        </member>
        <member name="F:Ximura.Collections.ConcurrentStack`1.mEqualityComparer">
            <summary>
            This is the equality comparer for the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentStack`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="M:Ximura.Collections.ConcurrentStack`1.AddIncomingData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This override pushes the data passed in the constructor to the stack.
            </summary>
            <param name="collection">The incoming data.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.Push(`0)">
            <summary>
            This method pushes an item to the top of the stack.
            </summary>
            <param name="item">The item to add to the stack.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.TryPop(`0@)">
            <summary>
            This method removes an item from the top of the stack.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.TryPeek(`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.Contains(`0)">
            <summary>
            This method checks whether an item exists in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.Clear">
            <summary>
            This method clears the collection.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.CopyTo(System.Array,System.Int32)">
            <summary>
            This method copies the collection to the array specified.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index where the class should start copying to.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.ToArray">
            <summary>
            Returns the data in the collection as an array.
            </summary>
            <returns>Returns an array of data.</returns>
        </member>
        <member name="M:Ximura.Collections.ConcurrentStack`1.TrimExcess">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentStack`1.Count">
            <summary>
            The collection count.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentStack`1.IsSynchronized">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="P:Ximura.Collections.ConcurrentStack`1.SyncRoot">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="T:Ximura.JobWrapper">
            <summary>
            The Job Wrapper class is used by inherited method to add
            additional properties to the request while maintaining the 
            original job request.
            </summary>
        </member>
        <member name="F:Ximura.JobWrapper.mBaseJob">
            <summary>
            This is the base job.
            </summary>
        </member>
        <member name="F:Ximura.JobWrapper.timeoutTimer">
            <summary>
            This is the thread timer used for time out operations
            </summary>
        </member>
        <member name="F:Ximura.JobWrapper.timeoutCallback">
            <summary>
            The time out callback
            </summary>
        </member>
        <member name="M:Ximura.JobWrapper.#ctor(Ximura.JobBase)">
            <summary>
            This is the wrapper constructor.
            </summary>
            <param name="baseJob">The base job.</param>
        </member>
        <member name="M:Ximura.JobWrapper.InitializeJob">
            <summary>
            This method is used to initialize any variables before the initial
            Reset() is called.
            </summary>
        </member>
        <member name="M:Ximura.JobWrapper.Reset">
            <summary>
            This virtual method resets the base properties for the JobWrapper.
            </summary>
        </member>
        <member name="M:Ximura.JobWrapper.Inititialize(Ximura.JobBase,Ximura.CommandRSCallback,Ximura.CommandProgressCallback)">
            <summary>
            This is the root initialization for the JobWrapper.
            </summary>
            <param name="baseJob"></param>
            <param name="RSCallback"></param>
            <param name="ProgressCallback"></param>
        </member>
        <member name="M:Ximura.JobWrapper.IDBuffer">
            <summary>
            This method returns the buffer for the request.
            </summary>
            <returns>A byte array containing the identifying IDs.</returns>
        </member>
        <member name="M:Ximura.JobWrapper.OnTimeOut(System.Object)">
            <summary>
            This method initializes the timer callback
            </summary>
        </member>
        <member name="M:Ximura.JobWrapper.SetTimer(System.Int32)">
            <summary>
            This method sets the timer to the delay requested.
            </summary>
            <param name="Timeout"></param>
        </member>
        <member name="M:Ximura.JobWrapper.SetTimer(System.Int32,System.Object)">
            <summary>
            This method sets the timer to the delay requested.
            </summary>
            <param name="Timeout">The time out in milliseconds.</param>
            <param name="state">The object state.</param>
        </member>
        <member name="M:Ximura.JobWrapper.ResetTimer">
            <summary>
            This method resets the timer and stops it firing.
            </summary>
        </member>
        <member name="M:Ximura.JobWrapper.TimeoutFire(System.Object)">
            <summary>
            This method is called when the timer fires. 
            Override this object to implement your own functionality.
            </summary>
            <param name="state">The object state.</param>
        </member>
        <member name="M:Ximura.JobWrapper.ProgressReport(System.Int32)">
            <summary>
            This method reports the progress to the calling party.
            </summary>
            <param name="progress">The progress percentage as an integer.</param>
            <param name="message">An optional progress message.</param>
        </member>
        <member name="M:Ximura.JobWrapper.ProgressReport(System.Int32,System.String)">
            <summary>
            This method reports the progress to the calling party.
            </summary>
            <param name="progress">The progress percentage as an integer.</param>
            <param name="message">An optional progress message.</param>
            <returns>Returns true if the progress message was successfully delivered.</returns>
        </member>
        <member name="M:Ximura.JobWrapper.ObjectPoolReturn">
            <summary>
            This method returns the job to the pool.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.Priority">
            <summary>
            This is the job priority.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.SessionID">
            <summary>
            The Session ID
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.ID">
            <summary>
            The Job ID
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.Data">
            <summary>
            The job data
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.Signature">
            <summary>
            The originator signature.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.RSCallback">
            <summary>
            This is the completion callback delegate.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.ProgressCallback">
            <summary>
            This is the progress call back delegate
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.SupportsProgressNotification">
            <summary>
            This property identifies whether the request supports 
            progress notification.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.ObjectPool">
            <summary>
            This is the object pool for the job.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.ObjectPoolCanReturn">
            <summary>
            This boolean property identifies whether the job can be returned to the pool.
            </summary>
        </member>
        <member name="P:Ximura.JobWrapper.EnvelopeHelper">
            <summary>
            This method returns the envelope helper for the base job.
            </summary>
        </member>
        <member name="T:Ximura.Framework.JobHolder">
            <summary>
            The job holder class is used to reference the requests in the completion job.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mPriority">
            <summary>
            The job priority.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mData">
            <summary>
            The request data.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mRSCallback">
            <summary>
            The request completion callback.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mProgressCallback">
            <summary>
            The request progress callback.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mjobID">
            <summary>
            This is the child job ID.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.Executed">
            <summary>
            This boolean method indicates whether the request has been executed.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mNextJob">
            <summary>
            This is the next job in the chain.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mLastJob">
            <summary>
            This is the last job in the chain.
            </summary>
        </member>
        <member name="F:Ximura.Framework.JobHolder.mDependencyID">
            <summary>
            This is the job holder dependency ID.
            </summary>
        </member>
        <member name="M:Ximura.Framework.JobHolder.#ctor(System.Nullable{System.Guid},Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority)">
            <summary>
            This is the internal constructor for the job.
            </summary>
            <param name="jobID">The job ID.</param>
            <param name="data">The data.</param>
            <param name="RSCallback">The request progress callback.</param>
            <param name="ProgressCallback">The request progress callback.</param>
            <param name="priority">The job priority.</param>
        </member>
        <member name="M:Ximura.Framework.JobHolder.#ctor(System.Nullable{System.Guid},Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority,System.Nullable{System.Guid},System.Nullable{System.Guid},Ximura.DependencyValidateRSCallback)">
            <summary>
            This is the internal constructor for the job.
            </summary>
            <param name="jobID">The job ID.</param>
            <param name="data">The data.</param>
            <param name="RSCallback">The request progress callback.</param>
            <param name="ProgressCallback">The request progress callback.</param>
            <param name="priority">The job priority.</param>
            <param name="NextJob">The next job for linked jobs.</param>
            <param name="LastJob">The last job for linked jobs.</param>
        </member>
        <member name="M:Ximura.Framework.JobHolder.Reset">
            <summary>
            This method should be overriden to provide specific clean up code.
            Specifically, any delegates references in the object should be set to null;
            </summary>
            <param name="disposing">This parameter is true if the call is from the disposable interface.</param>
        </member>
        <member name="M:Ximura.Framework.JobHolder.IDBuffer">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ximura.Framework.JobHolder.SessionID">
            <summary>
            The session ID.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.ID">
            <summary>
            The job ID.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.RSCallback">
            <summary>
            The Response callback.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.ProgressCallback">
            <summary>
            The progress callback.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.Priority">
            <summary>
            The job priority.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.Signature">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.Expired">
            <summary>
            This property indicates whether the job has exceeded its timeslice.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.NextJob">
            <summary>
            This is the next job in the chain.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.LastJob">
            <summary>
            This is the last job in the chain.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.DependencyID">
            <summary>
            This is the job holder dependency ID.
            </summary>
        </member>
        <member name="P:Ximura.Framework.JobHolder.EnvelopeHelper">
            <summary>
            This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">This exception is thrown.</exception>
        </member>
        <member name="T:Ximura.IXimuraSessionRQ">
            <summary>
            This interface is used by the session object to support requests.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.CancelRequest(System.Guid)">
            <summary>
            This method cancels a pending request.
            </summary>
            <param name="jobID">The job id.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.JobPriority)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="priority">The request priority.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.CommandProgressCallback)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="ProgressCallback">The progress calback delegate. 
            This can be used to report progress during long running processes.</param>
        </member>
        <member name="M:Ximura.IXimuraSessionRQ.ProcessRequest(Ximura.IXimuraRQRSEnvelope,Ximura.JobPriority,Ximura.CommandProgressCallback)">
            <summary>
            Process a synchronous request.
            </summary>
            <param name="Data">The data.</param>
            <param name="priority">The request priority.</param>
            <param name="ProgressCallback">The progress calback delegate. 
            This can be used to report progress during long running processes.</param>
        </member>
        <member name="P:Ximura.IXimuraHeaderFragment.Field">
            <summary>
            This property contains the field name.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraHeaderFragment.FieldData">
            <summary>
            This property contains the field data.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraLogging">
            <summary>
            The IXimuraLogging interface provides the necessary methods to enable logging.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.AcceptCategory(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            This method inform the Logging Manager whether it will accept the 
            category for logging.
            </summary>
            <param name="category">The logging category.</param>
            <returns>A boolean value. True indicated the category is accepted.</returns>
        </member>
        <member name="M:Ximura.IXimuraLogging.Close">
            <summary>
            Flushes the output buffer and then closes the Listeners.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Flush">
            <summary>
            Flushes the output buffer and causes buffered data to write to the Listeners
            collection.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Fail(System.String)">
            <summary>
            Emits the specified error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Indent">
            <summary>
            Increases the current IndentLevel by one.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Unindent">
            <summary>
            Decreases the current IndentLevel by one.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's ToString method to 
            the trace listeners in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners
             collection.
            </summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners
             collection.
            </summary>
            <param name="message">A message to write. </param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.Write(System.Object)">
            <summary>
            Writes the value of the object's ToString method to the trace listeners
            in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's ToString method to the trace 
            listeners in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's ToString method to the trace listeners
            in the Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the Listeners. </param>
        </member>
        <member name="M:Ximura.IXimuraLogging.WriteLine(System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the
            Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="P:Ximura.IXimuraLogging.Name">
            <summary>
            Gets or sets a name for this LoggingProvider.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.AutoFlush">
            <summary>
            Gets or sets a value indicating whether Flush should be called on the 
            Listeners after every write.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.IndentLevel">
            <summary>
            Gets or sets the indent level.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraLogging.IndentSize">
            <summary>
            Gets or sets the number of spaces in an indent.
            </summary>
        </member>
        <member name="T:Ximura.CSVRowItem">
            <summary>
            This is the CSV row item structure.
            </summary>
        </member>
        <member name="M:Ximura.CSVRowItem.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Char[],System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}[])">
            <summary>
            This is the byte constructor using a custom encoding method.
            </summary>
            <param name="enc">The byte encoding used to transform the data in to a string.</param>
            <param name="data">The character collection.</param>
            <param name="start">The start position.</param>
            <param name="length">The data length.</param>
        </member>
        <member name="M:Ximura.CSVRowItem.GetEnumerator">
            <summary>
            This enumerator returns the data values.
            </summary>
            <returns>A string collection containing the individual items.</returns>
        </member>
        <member name="M:Ximura.CSVRowItem.PositionGet(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the item positions with the particular array.
            </summary>
            <param name="item">The item position.</param>
            <param name="start">The start position in the char array.</param>
            <param name="length">The number of characters in the array.</param>
            <returns>Returns true if the item exists.</returns>
        </member>
        <member name="P:Ximura.CSVRowItem.Data">
            <summary>
            This is the raw data from the string.
            </summary>
        </member>
        <member name="P:Ximura.CSVRowItem.HeadersSupported">
            <summary>
            This property identifies whether there is a header collection available.
            </summary>
        </member>
        <member name="P:Ximura.CSVRowItem.Item(System.String)">
            <summary>
            This iterator returns an item based on it's column name.
            </summary>
            <param name="header">The header name which is case sensitive.</param>
            <returns>Returns the value of the item or null if the header is not found.</returns>
        </member>
        <member name="P:Ximura.CSVRowItem.Item(System.Int32)">
            <summary>
            This iterator returns an item based on it's column position.
            </summary>
            <param name="header">The header position.</param>
            <returns>Returns the value of the item or null if the header is not found.</returns>
        </member>
        <member name="P:Ximura.CSVRowItem.Count">
            <summary>
            This is the number of items in the csv line.
            </summary>
        </member>
        <member name="T:Ximura.MatchState`1">
            <summary>
            This class contains the match state.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
        </member>
        <member name="M:Ximura.MatchState`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.MatchState`1.#ctor(System.Boolean)">
            <summary>
            This constructor is used to inform the match sequence logic to copy the matched data to the data array.
            </summary>
            <param name="copyData">Set this to true if you wish the matched data to be copied to the array.</param>
        </member>
        <member name="M:Ximura.MatchState`1.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="Position">The current position.</param>
            <param name="CarryOver">The current carry over position.</param>
        </member>
        <member name="M:Ximura.MatchState`1.DataLog(`0)">
            <summary>
            This method saves the data element in the array and moves the position forward.
            </summary>
            <param name="item">The item to log.</param>
        </member>
        <member name="M:Ximura.MatchState`1.SetMatch(System.Int32)">
            <summary>
            This method sets the match at the specific position.
            </summary>
            <param name="Position">The position in the source array.</param>
        </member>
        <member name="M:Ximura.MatchState`1.SetPartialMatch(System.Int32,System.Int32)">
            <summary>
            This method sets a partial match.
            </summary>
            <param name="Position">The position in the source array.</param>
            <param name="CarryOver">The carry over position.</param>
        </member>
        <member name="P:Ximura.MatchState`1.DataCopy">
            <summary>
            This public property identifies whether the data that has been read will be copied to the array.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.Data">
            <summary>
            This is the data array.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.DataPosition">
            <summary>
            This is the current position within the data array,
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.SlidingWindow">
            <summary>
            The sliding window queue.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.MatchPosition">
            <summary>
            The match position in the source array
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.Position">
            <summary>
            The match position in the source array
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.Length">
            <summary>
            The length of the match. This is needed because some matches are of a variable length.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.CarryOver">
            <summary>
            The number of carry over position in the match array.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.MultipartMatch">
            <summary>
            The multipart match informs the routine that this is only part of a maultiple match.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.Success">
            <summary>
            Indicates whether the match is a success.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.IsTerminator">
            <summary>
            Indicates whether the match is a terminator. This additional functionality is needed for complex matches.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.IsPartialMatch">
            <summary>
            Indicates whether we are currently processing a partial match.
            </summary>
        </member>
        <member name="P:Ximura.MatchState`1.IsMatch">
            <summary>
            Identifies when there is a match.
            </summary>
        </member>
        <member name="T:Ximura.Collections.SkipListStructBasedVertexArray`1">
            <summary>
            This vertex array implements the data as a skip list array.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.SkipListStructBasedVertexArray`1.sRand">
            <summary>
            This is a thread specific value. This is to ensure that each thread gets a specific
            random class as Random is not thread safe.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListStructBasedVertexArray`1.mProbability">
            <summary>
            The probability of an item being propagated to the next level.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.#ctor">
            <summary>
            This is the default constructor for the array.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.ConvertProbabilityToBool">
            <summary>
            This method converts the output from the thread specific random function to a simple boolean value.
            </summary>
            <returns>Returns a boolean value based on the probability factor.</returns>
        </member>
        <member name="P:Ximura.Collections.SkipListStructBasedVertexArray`1.Probability">
            <summary>
            The probability of an item being propagated to the next level.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListStructBasedVertexArray`1.BucketsLevelMax">
            <summary>
            This is the maximum levels implemented by the skip list.
            </summary>
        </member>
        <member name="T:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1">
            <summary>
            The vertex window structure holds the search results from a scan.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
        </member>
        <member name="F:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.CurrSlotIDPlus1">
            <summary>
            The current slot ID plus 1.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.Curr">
            <summary>
            THe current vertex.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.Next">
            <summary>
            The next vertex.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.#ctor(Ximura.Collections.SkipListStructBasedVertexArray{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32,`1)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.#ctor(Ximura.Collections.SkipListStructBasedVertexArray{`1},System.Collections.Generic.IEqualityComparer{`1},System.Int32,System.Int32)">
            <summary>
            This is the default constructor for the window.
            </summary>
            <param name="data">The data collection.</param>
            <param name="indexID">The index of the position to set the window.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ItemSetNext">
            <summary>
            This method changes the value of the next item.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ItemInsert">
            <summary>
            
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.InsertSentinel(System.Int32)">
            <summary>
            This method inserts a sentinel in to the data collection.
            </summary>
            <param name="indexID">The new sentinel index id.</param>
            <param name="hashID">The sentinel hash id.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.InsertSentinelAndUnlock(System.Int32)">
            <summary>
            This method inserts a sentinel in to the data collection.
            </summary>
            <param name="indexID">The new sentinel index id.</param>
            <param name="hashID">The sentinel hash id.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.Unlock">
            <summary>
            This method provides common functionality to unlock a VertexWindow.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ScanAndLock">
            <summary>
            This method scans through the slot data until is reaches the end of the data, or the position 
            where the hashID meets a slot with a hashID that is greater than itself.
            </summary>
            <param name="hashID">The hashID to search for and lock.</param>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.MoveUp">
            <summary>
            This method moves up the Next vertex to the current position.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ItemRemoveAndUnlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.Snip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ToString">
            <summary>
            This override provides a debug friendly representation of the structure.
            </summary>
            <returns>Returns the structure value.</returns>
        </member>
        <member name="P:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.HashID">
            <summary>
            This is the hash ID of the item currently being searched.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.Value">
            <summary>
            This is the current value being handled by the window.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListStructBasedVertexArray`1.SkipListStructBasedVertexWindow`1.ScanItemMatch">
            <summary>
            This property specifies whether the next item is a match for the data.
            </summary>
        </member>
        <member name="T:Ximura.Collections.LockFreeRedBlackTree`2">
            <summary>
            This class is the default red-black tree that uses the generic comparer to balance the tree.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TVal">The value payload.</typeparam>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTree`2.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTree`2.Clear">
            <summary>
            This method clears the tree.
            </summary>
        </member>
        <member name="M:Ximura.Collections.LockFreeRedBlackTree`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Ximura.Collections.LockFreeRedBlackTree`2.Count">
            <summary>
            This is the item count for the collection.
            </summary>
        </member>
        <member name="P:Ximura.Collections.LockFreeRedBlackTree`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.ThreadingHelper">
            <summary>
            This static class provides threading help.
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.ThreadWait">
            <summary>
            This method pauses the current thread for the minimum amount of time.
            </summary>
        </member>
        <member name="F:Ximura.ThreadingHelper.fnActionExecute">
            <summary>
            This function creates a new thread and executes the action on that thread.
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.ExecuteParallel(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>
            Executes a number of actions in parallel and then waits until they are complete.
            </summary>
            <param name="ts">The action enumeration.</param>
            <returns>Returns a timespan containing the time taken to execute the job.</returns>
        </member>
        <member name="M:Ximura.ThreadingHelper.ExecuteParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32)">
            <summary>
            Executes a number of actions in parallel and then waits until they are complete.
            </summary>
            <param name="ts">The action enumeration.</param>
            <param name="maxThreads">The maximum number of threads to use during execution.</param>
            <returns>Returns a timespan containing the time taken to execute the job.</returns>
        </member>
        <member name="M:Ximura.ThreadingHelper.Execute(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>
            This method enumerates the actions and executes them in parallel and waits until they are complete.
            By default this method sets the number of parallel jobs to the number of processors in the machine.
            </summary>
            <param name="ts">The action enumeration.</param>
            <returns>Returns a timespan containing the time taken to execute the job.</returns>
        </member>
        <member name="M:Ximura.ThreadingHelper.Execute(System.Collections.Generic.IEnumerable{System.Action},System.Int32)">
            <summary>
            This method enumerates the actions and executes them in parallel and waits until they are complete.
            </summary>
            <param name="ts">The action enumeration.</param>
            <param name="maxThreads">The maximum number of parallel executions.</param>
            <returns>Returns a timespan containing the time taken to execute the job.</returns>
        </member>
        <member name="T:Ximura.ThreadingHelper.Semaphore">
            <summary>
            Implementation of Dijkstra's PV Semaphore based on the Monitor class.
            </summary>
        </member>
        <member name="F:Ximura.ThreadingHelper.Semaphore.m_count">
            <summary>
            The number of units alloted by this semaphore.
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.Semaphore.#ctor">
            <overloads>
            Initializes the semaphore.
            </overloads>
            <summary>
            Initialize the semaphore as a binary semaphore.
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.Semaphore.#ctor(System.Int32)">
            <summary>
            Initialize the semaphore as a counting semaphore.
            </summary>
            <param name="count">Initial number of threads that can take out units from this semaphore.</param>
            <exception cref="T:System.ArgumentException">Throws if the count argument is less than 1.</exception>
        </member>
        <member name="M:Ximura.ThreadingHelper.Semaphore.WaitOne">
            <summary>
            P the semaphore (take out 1 unit from it).
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.Semaphore.AddOne">
            <summary>
            V the semaphore (add 1 unit to it).
            </summary>
        </member>
        <member name="M:Ximura.ThreadingHelper.Semaphore.Reset(System.Int32)">
            <summary>
            Resets the semaphore to the specified count. Should be used cautiously.
            </summary>
        </member>
        <member name="T:Ximura.XimuraServiceStatusAction">
            <summary>
            This enumerations is used to signal an action for the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Start">
            <summary>
            Start the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Stop">
            <summary>
            Stop the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Pause">
            <summary>
            Pause the collection
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatusAction.Continue">
            <summary>
            Continue the collection
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolBuffer">
            <summary>
            This is the pool buffer interface. This interface is used by the pool managers 
            to reset the references when closing down.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolBuffer.ResetBuffer">
            <summary>
            This method resets the buffer and it's connection to the underlying object pool.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.Edge">
            <summary>
            The edge structure records the one-way relationship between the vertexes.
            </summary>
        </member>
        <member name="T:Ximura.Collections.IXimuraBinarySerializable">
            <summary>
            This interface is used to persist or restore an abject from a binary stream.
            </summary>
        </member>
        <member name="M:Ximura.Collections.IXimuraBinarySerializable.Read(System.IO.BinaryReader)">
            <summary>
            This method restores the object from the stream.
            </summary>
            <param name="r">The reader to read from.</param>
        </member>
        <member name="M:Ximura.Collections.IXimuraBinarySerializable.Write(System.IO.BinaryWriter)">
            <summary>
            Persists an object to the binary stream.
            </summary>
            <param name="w">The writer to persist to.</param>
        </member>
        <member name="M:Ximura.Collections.Data.Edge.op_LessThan(Ximura.Collections.Data.Edge,Ximura.Collections.Data.Edge)">
            <summary>
            The less than operator returns true if the two edges are joined on the 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.Collections.Data.Edge.op_LogicalNot(Ximura.Collections.Data.Edge)">
            <summary>
            The not operator reverses the direction of the edge.
            </summary>
            <param name="a">The edge to reverse.</param>
            <returns>returns an edge structure.</returns>
        </member>
        <member name="T:Ximura.Collections.ConcurrentQueue`1">
            <summary>
            This is the lock-free implementation of the queue class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="T:Ximura.Collections.ConcurrentDictionary`2">
            <summary>
            This class is a concurrent lock-free implementation of the IDictionary interface using a hash-table based array.
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection. Set this to null if not required.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection. Set this to null if not required.</param>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection. Set this to null if not required.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection. Set this to null if not required.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionary`2.#ctor(Ximura.Collections.ConcurrentDictionary{`0,`1,Ximura.Collections.HashTableStructBasedVertexArrayV2{System.Collections.Generic.KeyValuePair{`0,`1}}}.KeyValueOnlyKeyEqualityComparer{`0,`1},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer that allows a custom value comparer to be set in addition to a custom key comparer.</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection. Set this to null if not required.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentDictionarySLC`2">
            <summary>
            This class is a concurrent lock-free implementation of the IDictionary interface using a skip-list class based array.
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentDictionarySLC`2.#ctor(Ximura.Collections.ConcurrentDictionary{`0,`1,Ximura.Collections.SkipListClassBasedVertexArray{System.Collections.Generic.KeyValuePair{`0,`1}}}.KeyValueOnlyKeyEqualityComparer{`0,`1},System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)" -->
        <member name="T:Ximura.CRLFMatchCollectionState">
            <summary>
            This class matches on CRLF
            </summary>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.#ctor(System.Boolean)">
            <summary>
            This is the extended constructor.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.GetEnumerator">
            <summary>
            This method returns a new CRLFFoldingMatchCollection enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ximura.CRLFMatchCollectionState.CRLFFoldingMatchCollection">
            <summary>
            The class contains the match terminators.
            </summary>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.CRLFFoldingMatchCollection.#ctor(System.Boolean)">
            <summary>
            This constructor initializes the collection with the boundary.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.CRLFFoldingMatchCollection.Dispose(System.Boolean)">
            <summary>
            This method disposes the collection.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Ximura.CRLFMatchCollectionState.CRLFFoldingMatchCollection.Item(System.Int32)">
            <summary>
            This method returns the specified item for the collection. You should override this indexer.
            </summary>
            <param name="index">The position index.</param>
            <returns></returns>
        </member>
        <member name="P:Ximura.CRLFMatchCollectionState.CRLFFoldingMatchCollection.Count">
            <summary>
            This property returns the number of items in the collection. You should override this property.
            </summary>
        </member>
        <member name="T:Ximura.CRLFMatchCollectionState.CRLFTerminatorWithReset">
            <summary>
            This termination class specifically matches on CRLF and resets the match buffer when
            a termination character has been found.
            </summary>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.CRLFTerminatorWithReset.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.CRLFMatchCollectionState.CRLFTerminatorWithReset.Validate(System.Byte,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.LockableMarkableWrapper`1">
            <summary>
            The lockable base class is for objects that require fine-grained locking.
            </summary>
        </member>
        <member name="F:Ximura.LockableMarkableWrapper`1.mFlags">
            <summary>
            The private value that indicates whether the class is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.#ctor(`0)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.Lock">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.Mark">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.LockWait">
            <summary>
            This method halts any threads if the item is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.TryLock">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.TryMark">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.Unlock">
            <summary>
            This method unlocks the item.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.Unmark">
            <summary>
            This method unmarks the item.
            </summary>
        </member>
        <member name="M:Ximura.LockableMarkableWrapper`1.Clear">
            <summary>
            This method clears all the flags for the wrapper.
            </summary>
        </member>
        <member name="F:Ximura.LockableMarkableWrapper`1.Value">
            <summary>
            This is the value locked by the collection.
            </summary>
        </member>
        <member name="P:Ximura.LockableMarkableWrapper`1.IsLocked">
            <summary>
            Returns true if the item is locked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="P:Ximura.LockableMarkableWrapper`1.IsMarked">
            <summary>
            Returns true if the item is marked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="T:Ximura.BitMaskInt32">
            <summary>
            This struct sets the appropriate bits.
            </summary>
        </member>
        <member name="T:Ximura.MessageLoadException">
            <summary>
            This exception is thrown should the message exceed the maximum permitted size.
            </summary>
        </member>
        <member name="M:Ximura.MessageLoadException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.MessageLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.MessageLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.MessageLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.XimuraServiceStatus">
            <summary>
            The CatalogProcessStatus shows the current status of the Catalog Process.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Undefined">
            <summary>
            The status is undefined.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.NotStarted">
            <summary>
            The process has not started.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Starting">
            <summary>
            The process is starting up.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Started">
            <summary>
            The process is processing.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Pausing">
            <summary>
            The process is pausing.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Paused">
            <summary>
            The process is paused.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Resuming">
            <summary>
            The process is resuming.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Stopping">
            <summary>
            The process is stopping.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Stopped">
            <summary>
            The process has stopped.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Completed">
            <summary>
            The process has completed.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Resumed">
            <summary>
            The process has resumed.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Failed">
            <summary>
            The service has failed to start.
            </summary>
        </member>
        <member name="F:Ximura.XimuraServiceStatus.Disabled">
            <summary>
            The service is disabled.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorBase">
            <summary>
            This is base class for message termination. This class is used to provide custom termination logic for messages
            that use specific characters to signal completion when reading from a stream.
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.Reset">
            <summary>
            This method resets the terminator to its original values
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.ValidateBoundaryPartCondition(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ValidateBoundaryPartCondition is used to check that the boundary condition is valid based on the current buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="carryOver">The carry over bytes.</param>
            <param name="bytesRead">The bytes read.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.TerminatorHolderGetFirst">
            <summary>
            This method returns the first terminator. This will reset the terminator count to 0 and then call TerminatorHolderGetCurrent().
            </summary>
            <returns>Returns a TerminatorHolder structure.</returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.TerminatorHolderGetCurrent">
            <summary>
            This method returns the current terminator. You should override this method.
            </summary>
            <returns>Returns a TerminatorHolder structure.</returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.TerminatorHolderGetNext">
            <summary>
            This method returns the next terminator in the chain. If there is only one terminator, this method
            should return null.
            </summary>
            <returns>Returns a TerminatorHolder structure or null.</returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.Match(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64}@)">
            <summary>
            This method scans the incoming byte array and returns true when the specific termination characteristics have been met.
            </summary>
            <param name="buffer">The incoming buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The available bytes.</param>
            <param name="bytesToRead">Returns the numbers of bytes that should be read in to the fragment.</param>
            <returns>Returns true if the termination characteristics have been met.</returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.IndexOf(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method searches the buffer for the first instance of the value byte.
            </summary>
            <param name="buffer">The buffer to search.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to search.</param>
            <param name="value">The value of the byte to search for.</param>
            <returns>The position of the byte in the buffer, or -1 if the byte cannot be found.</returns>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.MatchTerminator(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            This method matches a the teminator in the byte buffer provided.
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="offset">The offset position in the byte buffer that the search should begin.</param>
            <param name="count">The number of bytes in the buffer to search.</param>
            <param name="terminatorOffset">The offset parameter within the terminator.</param>
            <param name="carryOver">The carry over value. This is needed when there is a partial match to
            the terminator at the end of the byte buffer, it will be passed as the terminatorOffset when the 
            next set of data is received from the data stream.</param>
            <param name="bytesRead">This is the number of bytes to be read from the buffer.</param>
            <returns>Returns true if there is a full match, or true along with a carryOver value greater than 
            0 when there is a partial match at the end of the byte buffer.</returns>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.CurrentSection">
            <summary>
            This property identifies the current match section.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.Length">
            <summary>
            This property shows the number of bytes read in the stream.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.Initialized">
            <summary>
            This property identifies whether the terminator has been initialized with the boundary.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.CarryOver">
            <summary>
            This is carry-over value. This value is used to set the current position in the terminator. This is needed because
            terminators can be split across multiple writes. 
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.BoundaryPartCondition">
            <summary>
            This is carry-over value. This value is used to set the current position in the terminator. This is needed because
            terminators can be split across multiple writes. 
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.IsTerminator">
            <summary>
            This property is set to true whenever the byte array has reached predetermined termination characteristics.
            These characteristics will differ depending on the termination type. 
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.Matched">
            <summary>
            This property indicates when the termination character has been matched.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorBase.TerminatorHolderMatchType">
            <summary>
            This enumeration specifies the match type.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorBase.TerminatorHolderActionType">
            <summary>
            This enumeration specifies the action type.
            </summary>
        </member>
        <member name="F:Ximura.MessageTerminatorBase.TerminatorHolderActionType.Termination">
            <summary>
            This option specifies that the incoming byte array should be matched in the same order as the terminator.
            </summary>
        </member>
        <member name="F:Ximura.MessageTerminatorBase.TerminatorHolderActionType.Exception">
            <summary>
            This option specifies that the incoming byte array can be matched with any character that appears in the array and
            that signals a continuation.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorBase.TerminatorHolder">
            <summary>
            This structure is used to hold the matching array.
            </summary>
        </member>
        <member name="F:Ximura.MessageTerminatorBase.TerminatorHolder.CRLF">
            <summary>
            This is the default CRLF match.
            </summary>
        </member>
        <member name="F:Ximura.MessageTerminatorBase.TerminatorHolder.LWSPEx">
            <summary>
            This is the default optional whitespace.
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorBase.TerminatorHolder.#cctor">
            <summary>
            This is the static constructor.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.TerminatorHolder.Terminator">
            <summary>
            The terminator byte array.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.TerminatorHolder.MatchType">
            <summary>
            The match type.
            </summary>
        </member>
        <member name="P:Ximura.MessageTerminatorBase.TerminatorHolder.ActionType">
            <summary>
            The action type.
            </summary>
        </member>
        <member name="T:Ximura.BitHelper">
            <summary>
            This static class provides bit mapping functionality for primitive types.
            </summary>
        </member>
        <member name="M:Ximura.BitHelper.BitReverse(System.Int32)">
            <summary>
            This method reverses the hashcode so that it is ordered in reverse based on bit value, i.e.
            xxx1011 => 1101xxxx => Bucket 1 1xxxxx => Bucket 3 11xxxxx => Bucket 6 110xxx etc.
            </summary>
            <param name="data">The data to reverse></param>
            <returns>Returns the reversed data</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitReverse(System.Int32,System.Int32)">
            <summary>
            This method reverses the hashcode so that it is ordered in reverse based on bit value, i.e.
            xxx1011 => 1101xxxx => Bucket 1 1xxxxx => Bucket 3 11xxxxx => Bucket 6 110xxx etc.
            </summary>
            <param name="data">The data to reverse></param>
            <param name="hiMask">This is the mask bit to start the reverse process.</param>
            <returns>Returns the reversed data</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.SByte,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.SByte,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.SByte,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.Byte,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.Byte,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.Byte,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.Int16,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.Int16,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.Int16,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.UInt16,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.UInt16,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.UInt16,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.Int32,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.Int32,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.Int32,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.UInt32,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.UInt32,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.UInt32,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.Int64,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.Int64,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.Int64,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitSet(System.UInt64,System.Byte)">
            <summary>
            This method sets the bit at the specified value.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitUnset(System.UInt64,System.Byte)">
            <summary>
            This method sets the bit at the specified position to 0.
            </summary>
            <param name="value">The data.</param>
            <param name="bit">The bit position.</param>
            <returns>Returns the new data.</returns>
        </member>
        <member name="M:Ximura.BitHelper.BitCheck(System.UInt64,System.Byte)">
            <summary>
            This method checks whether the bit is set.
            </summary>
            <param name="value">The data to check.</param>
            <param name="bit">The bit to check.</param>
            <returns>Returns true if the bit is set.</returns>
        </member>
        <member name="M:Ximura.BitHelper.SplitOnMostSignificantBit(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method splits the index on both parts.
            </summary>
            <param name="index">The index to split.</param>
            <param name="msbStartPosition">The start bit position to begin searching.</param>
            <param name="msbPosition">The highest significant bit position.</param>
            <param name="remainder">The remainder minus the 2 to the power of the bit position./</param>
        </member>
        <member name="M:Ximura.BitHelper.FindMostSignificantBit(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="msbStartPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.BitHelper.FindMostSignificantBit(System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="msbStartPosition"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.ServiceEvent">
            <summary>
            This delegate is used by the Services to report back progress
            </summary>
        </member>
        <member name="T:Ximura.IXimuraServiceParentSettings">
            <summary>
            This interface is implemented by commands that can be nested in other commands.
            </summary>
        </member>
        <member name="P:Ximura.IXimuraServiceParentSettings.ParentCommandName">
            <summary>
            The parent command service name.
            </summary>
        </member>
        <member name="T:Ximura.MetadataExtender`2">
            <summary>
            MetadataExtender is the base class for all extenders.
            </summary>
        </member>
        <member name="F:Ximura.MetadataExtender`2.mLocked">
            <summary>
            This property indicates whether the collection is locked. A locked
            collection will not create data record automatically.
            </summary>
        </member>
        <member name="F:Ximura.MetadataExtender`2.mMetaData">
            <summary>
            This is the hashtable for the extended properties.
            </summary>
        </member>
        <member name="F:Ximura.MetadataExtender`2.mInitializationCount">
            <summary>
            This is the initialization counter.
            </summary>
        </member>
        <member name="M:Ximura.MetadataExtender`2.#ctor">
            <summary>
            This is the empty constructor.
            </summary>
        </member>
        <member name="M:Ximura.MetadataExtender`2.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This is the component model constructor.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Ximura.MetadataExtender`2.CanExtend(System.Object)">
            <summary>
            This method is used to check whether the object can be extended.
            </summary>
            <param name="extendee">The object to extend</param>
            <returns>returns true if the object can be extended.</returns>
        </member>
        <member name="M:Ximura.MetadataExtender`2.BeginInit">
            <summary>
            This method is called at the beginning of the initialization phase.
            </summary>
        </member>
        <member name="M:Ximura.MetadataExtender`2.EndInit">
            <summary>
            This method is called at the end of the initialization phase.
            </summary>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ContentCollection">
            <summary>
            This is the content collections.
            </summary>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ItemAdd(`0)">
            <summary>
            This methods adds an item to the collection.
            </summary>
            <param name="key">The item to add.</param>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ItemRemove(`0)">
            <summary>
            This method removes an item from the collection.
            </summary>
            <param name="key">The object.</param>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ItemGet(`0)">
            <summary>
            This method gets an object from the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ItemGetNew(`0)">
            <summary>
            This method creates a new object based on the type specified in the 
            MetadataExtenderItem type attribute.
            </summary>
            <param name="key">The object to create the meta data container for, or null if 
            called by getNewItem().</param>
            <returns>The new item.</returns>
            <remarks>You should override this method if you wish to pass the creation
            object in to the meta data container.</remarks>
        </member>
        <member name="M:Ximura.MetadataExtender`2.ItemGetNew">
            <summary>
            This method creates a new object based on the type specified in the 
            MetadataExtenderItem type attribute.
            </summary>
            <returns>The new item.</returns>
        </member>
        <member name="P:Ximura.MetadataExtender`2.Locked">
            <summary>
            This property identifies whether the meta data container is locked.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexClassDataSentinel`1">
            <summary>
            This class is a base sentinel for the linked list.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassDataSentinel`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassDataSentinel`1.#ctor(System.Int32)">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassDataSentinel`1.Value">
            <summary>
            This override sets the value to the default of the type.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassDataSentinel`1.IsSentinel">
            <summary>
            This property specifies that the data item is a sentinel.
            </summary>
        </member>
        <member name="T:Ximura.CSVMessage">
            <summary>
            This message object encapsulates the CSV file format and is in accordance with RFC 4180.
            </summary>
        </member>
        <member name="M:Ximura.CSVMessage.#ctor">
            <summary>
            This is the default constructor which specifies that 
            the first line in the file contains the header information
            </summary>
        </member>
        <member name="M:Ximura.CSVMessage.#ctor(System.Boolean)">
            <summary>
            This constructor can be used to specify whether the first line contains header information.
            </summary>
            <param name="HeadersSupported">A boolean property that specifies whether the first line of the file contains header information.</param>
        </member>
        <member name="M:Ximura.CSVMessage.Load(System.IO.Stream)">
            <summary>
            This method reads from the stream and loads in the incoming data.
            </summary>
            <param name="data">The stream data to read from.</param>
            <returns>Returns the number of items read from the stream.</returns>
        </member>
        <member name="M:Ximura.CSVMessage.FragmentSetNext">
            <summary>
            This method sets the next fragment type.
            </summary>
            <returns>Returns the fragment object.</returns>
        </member>
        <member name="P:Ximura.CSVMessage.HeadersLoaded">
            <summary>
            This property specifies whether the headers are loaded.
            </summary>
        </member>
        <member name="P:Ximura.CSVMessage.HeadersSupported">
            <summary>
            This property specifies whether headers are supported in the first line.
            </summary>
        </member>
        <member name="P:Ximura.CSVMessage.Headers">
            <summary>
            This enumeration returns the headers in the order that they are set in the CSV file.
            </summary>
        </member>
        <member name="P:Ximura.CSVMessage.FragmentHeaderInitialType">
            <summary>
            This method returns the initial fragment for the CSV file.
            </summary>
        </member>
        <member name="T:Ximura.XimuraComponentServiceHelper">
            <summary>
            The XimuraComponentServiceHelper object is used to provide common functionality for 
            modules that implement the IXimuraComponentService interface.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ServiceEventAdd(Ximura.XimuraServiceStatus,Ximura.ServiceEvent)">
            <summary>
            This method adds a service event to the collection.
            </summary>
            <param name="status">The event status</param>
            <param name="theEvent">The event</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ServiceEventRemove(Ximura.XimuraServiceStatus,Ximura.ServiceEvent)">
            <summary>
            This method handles service event removal.
            </summary>
            <param name="status">The service status.</param>
            <param name="value">The event.</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.#ctor(System.Object,Ximura.XimuraComponentServiceHelper.ServiceCallBack,Ximura.XimuraComponentServiceHelper.ServiceCallBack,Ximura.XimuraComponentServiceHelper.ServiceCallBack,Ximura.XimuraComponentServiceHelper.ServiceCallBack)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="delInternalStart"></param>
            <param name="delInternalStop"></param>
            <param name="delInternalPause"></param>
            <param name="delInternalContinue"></param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.Start">
            <summary>
            This method starts the service based on the default async settings
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.Pause">
            <summary>
            This method pauses the service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.Continue">
            <summary>
            This method continues a paused service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.Stop">
            <summary>
            This method stops a running service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.InternalStart">
            <summary>
            This is the method to override which should start your service.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.InternalStop">
            <summary>
            This is the method to override which should stop your service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.InternalPause">
            <summary>
            This is the method to override which should pause your service
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.InternalContinue">
            <summary>
            This is the method to override which should continue your service 
            if it has been paused
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ProcessEvent(Ximura.ServiceEvent)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ProcessEvent(Ximura.ServiceEvent,Ximura.ServiceEventArgs)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
            <param name="e">The ServiceEventArgs object to pass</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ProcessEvent(Ximura.ServiceEvent,System.Object,Ximura.ServiceEventArgs)">
            <summary>
            This method fires an event to all parties that have registered with the ServiceEvent
            </summary>
            <param name="theEvent">The ServiceEvent Type to fire</param>
            <param name="sender">The sended object to pass</param>
            <param name="e">The ServiceEventArgs object to pass</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ComponentsStatusChange(Ximura.XimuraServiceStatusAction,System.Collections.ICollection)">
            <summary>
            This method can start, stop, resume or pause a group of components of the specified type.
            </summary>
            <param name="action">The action required</param>
            <param name="components">The components to which the action should be provided</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ComponentsStatusChange(Ximura.XimuraServiceStatusAction,System.Collections.ICollection,System.Type)">
            <summary>
            This method can start, stop, resume or pause a group of components of the specified type.
            </summary>
            <param name="action">The action required</param>
            <param name="components">The components to which the action should be provided</param>
            <param name="componentType">The component type.</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceHelper.ComponentsStatusChange(Ximura.XimuraServiceStatusAction,System.Collections.ICollection,System.Type,Ximura.XimuraComponentServiceHelper.ComponentStatusChangeNotify,Ximura.XimuraComponentServiceHelper.ComponentStatusChangeNotify)">
            <summary>
            This method can start, stop, resume or pause a group of components of the specified type.
            </summary>
            <param name="action">The action required</param>
            <param name="components">The components to which the action should be provided</param>
            <param name="componentType">The component type.</param>
        </member>
        <member name="P:Ximura.XimuraComponentServiceHelper.ServiceStatus">
            <summary>
            This method will return the current service status
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentServiceHelper.ServiceEnabled">
            <summary>
            This property determines whether the service component can be started.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentServiceHelper.Site">
            <summary>
            This override property calls the SiteChanged method when the site changes
            for the component.
            </summary>
        </member>
        <member name="P:Ximura.XimuraComponentServiceHelper.DesignMode">
            <summary>
            This method identifies whether it is design mode.
            </summary>
        </member>
        <member name="T:Ximura.XimuraComponentServiceHelper.ComponentStatusChangeNotify">
            <summary>
            This delegate is used to notify for changes to a child service.
            </summary>
            <param name="action">The action.</param>
            <param name="service">Thse service notification.</param>
        </member>
        <member name="T:Ximura.XimuraComponentServiceHelper.ServiceCallBack">
            <summary>
            This is the delegate used for service callbacks.
            </summary>
        </member>
        <member name="T:Ximura.XimuraComponentServiceException">
            <summary>
            This exception is thrown when an error is encountered during the component status change event.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceException.#ctor">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
        </member>
        <member name="M:Ximura.XimuraComponentServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XimuraException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The base exception.</param>
        </member>
        <member name="M:Ximura.XimuraComponentServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This exception is used for deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Ximura.XimuraAppContainer">
            <summary>
            AppContainer is the base container for the Ximura Application framework. 
            The container is used to share services between the components within an application.
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor">
            <summary>
            This is the default container constructor
            </summary>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            This is container constructor with a service provider
            </summary>
            <param name="theProvider"></param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.#ctor(System.ComponentModel.Design.IServiceContainer,System.Object)">
            <summary>
            This is the expanded constructor including the parent object for the 
            expanded ElementSite item.
            </summary>
            <param name="theProvider"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
            <summary>
            This method creates a new ElementSite compoent
            </summary>
            <param name="component">The component</param>
            <param name="name">The name</param>
            <returns>The ElementSite object.</returns>
        </member>
        <member name="M:Ximura.XimuraAppContainer.Add(System.ComponentModel.IComponent,System.String)">
            <summary>
            This overriden method adds event support to the Add event
            </summary>
            <param name="component">The component to add.</param>
            <param name="name">The name of the component 
            or null if this is not set</param>
        </member>
        <member name="M:Ximura.XimuraAppContainer.Remove(System.ComponentModel.IComponent)">
            <summary>
            This overriden method adds event support to the Remove method.
            </summary>
            <param name="component">The component to remove.</param>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentAdding">
            <summary>
            This event will be fired when a component is added to the collection.
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentAdded">
            <summary>
            This event will be fired when a component is added.
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentRemoving">
            <summary>
            This event will be fired when a component is removed from the
            collection
            </summary>
        </member>
        <member name="E:Ximura.XimuraAppContainer.ComponentRemoved">
            <summary>
            This event will be fired when a component is removed.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainer.ServiceProvider">
            <summary>
            This is the service provider.
            </summary>
        </member>
        <member name="P:Ximura.XimuraAppContainer.ServiceContainer">
            <summary>
            This is the service container.
            </summary>
        </member>
        <member name="T:Ximura.XimuraAppContainer.AppContainerEventHandler">
            <summary>
            This is the event delegate used to monitor component addition/deletion
            for the XimuraAppContainer object.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexClassData`1">
            <summary>
            This vertex class holds the collection data.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassData`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassData`1.#ctor(`0,System.Int32)">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassData`1.Dispose">
            <summary>
            This method removes and object references.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassData`1.Value">
            <summary>
            This is the data for the vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassData`1.IsSentinel">
            <summary>
            This property specifies that the data item is a sentinel.
            </summary>
        </member>
        <member name="T:Ximura.JobSignature">
            <summary>
            This structure is used hold the job signature.
            </summary>
        </member>
        <member name="F:Ximura.JobSignature.encryptHeader">
            <summary>
            The header
            </summary>
        </member>
        <member name="F:Ximura.JobSignature.encryptBuffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="F:Ximura.JobSignature.encryptedHash">
            <summary>
            The hash.
            </summary>
        </member>
        <member name="M:Ximura.JobSignature.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This creates the signature. You may pass null as a parameter.
            </summary>
            <param name="encryptHeader">The header.</param>
            <param name="encryptBuffer">The buffer.</param>
            <param name="encryptedHash">The hash.</param>
        </member>
        <member name="F:Ximura.JobSignature.Empty">
            <summary>
            This is the empty job signature.
            </summary>
        </member>
        <member name="M:Ximura.JobSignature.#cctor">
            <summary>
            This is the static constructor.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraSessionRQAsyncWithDependency">
            <summary>
            This is the async interface
            </summary>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgessCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="M:Ximura.IXimuraSessionRQAsyncWithDependency.ProcessRequestAsyncWithDependency(System.Guid,Ximura.IXimuraRQRSEnvelope,Ximura.CommandRSCallback,Ximura.CommandProgressCallback,Ximura.JobPriority,System.String)">
            <summary>
            Process an asychronous request.
            </summary>
            <param name="jobID">The job ID. This should be set to a new Guid.</param>
            <param name="data">The data</param>
            <param name="RSCallback">The call back completion delegate.</param>
            <param name="ProgressCallback">The request progress delegate. Set this to null if not needed.</param>
            <param name="priority">The request priority.</param>
            <param name="dependencyKey">The dependency key, if this is set to null the key is ignored.</param>
            <returns>The job guid.</returns>
        </member>
        <member name="T:Ximura.MessageCRLFFragment">
            <summary>
            This is the default CRLF fragment that does not support folding.
            </summary>
        </member>
        <member name="T:Ximura.MessageCRLFFragment`1">
            <summary>
            This is the base generic CRLF fragment. You can set the folding characteristics by setting the 
            generic term parameter to either TerminatorCRLF or TerminatorCRLFNoFolding.
            </summary>
            <typeparam name="TERM">The terminator class.</typeparam>
        </member>
        <member name="M:Ximura.MessageCRLFFragment`1.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageCRLFFragment`1.Reset">
            <summary>
            This override resets the default encoding.
            </summary>
        </member>
        <member name="P:Ximura.MessageCRLFFragment`1.DataString">
            <summary>
            This is the string representation of the data using the default encoding.
            </summary>
        </member>
        <member name="P:Ximura.MessageCRLFFragment`1.DefaultEncoding">
            <summary>
            This is the default encoding for the message
            </summary>
        </member>
        <member name="M:Ximura.MessageCRLFFragment.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="T:Ximura.StreamCounter">
            <summary>
            This wrapper stream is used to count the number of bytes being written to the underlying stream.
            </summary>
        </member>
        <member name="T:Ximura.StreamCounter.CounterDirection">
            <summary>
            This enumeration determines which direction the stream is working.
            </summary>
        </member>
        <member name="F:Ximura.StreamCounter.CounterDirection.Write">
            <summary>
            The stream is being written to.
            </summary>
        </member>
        <member name="F:Ximura.StreamCounter.CounterDirection.Read">
            <summary>
            The stream is being read from.
            </summary>
        </member>
        <member name="T:Ximura.AttributeHelper">
            <summary>
            Provide special functionality to deal with Attribute.
            </summary>
            <summary>
            Provide special functionality to deal with Attribute.
            </summary>
        </member>
        <member name="M:Ximura.AttributeHelper.Attribute``1(System.Type)">
            <summary>
            This extension method returns the first attribute of the specified type.
            </summary>
            <typeparam name="A">The attribute type.</typeparam>
            <param name="baseType">The base type to search.</param>
            <returns>Returns the first attribute or null if no attribute can be found.</returns>
        </member>
        <member name="M:Ximura.AttributeHelper.Attributes``1(System.Type)">
            <summary>
            This extension method returns a list of the specified attribute for the base type specified.
            </summary>
            <typeparam name="A">The attribute type.</typeparam>
            <param name="baseType">The base type to search.</param>
            <returns>Returns a list of attributes.</returns>
        </member>
        <member name="M:Ximura.AttributeHelper.PropertyAttributes``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.AttributeHelper.GetPropertyAttributes``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.AttributeHelper.GetAttribute``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Ximura.AttributeHelper.GetAttributes``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.IntermediateObjectEnumerator`3">
            <summary>
            This method is used to parse the data stream with an intermediate data type prior to conversion.
            </summary>
            <typeparam name="D">The source data type, i.e. stream</typeparam>
            <typeparam name="I">The intermediate data type.</typeparam>
            <typeparam name="O">The output record data type, i.e. int</typeparam>
        </member>
        <member name="M:Ximura.IntermediateObjectEnumerator`3.#ctor(`0,System.Func{`0,System.Nullable{Ximura.Tuple{`1,`0}}},System.Func{`1,`2})">
            <summary>
            This is the protected constructor.
            </summary>
            <param name="data">The data source.</param>
            <param name="parse">The parsing function.</param>
            <param name="convert">The conversion function to convert the intermediate type in to the output type.</param>
        </member>
        <member name="T:Ximura.PoolBuffer`1">
            <summary>
            The pool buffer allow multiple clients to connect to the same underlying pool, but removes direct
            access to the underlying pool allowing more stable support.
            </summary>
        </member>
        <member name="M:Ximura.PoolBuffer`1.#ctor(Ximura.IXimuraPool)">
            <summary>
            This is the internal constructor. The pool buffer can only be accessed by the pool manager.
            </summary>
            <param name="pool">The internal pool.</param>
        </member>
        <member name="M:Ximura.PoolBuffer`1.Dispose">
            <summary>
            This method disposes the pool buffer class.
            </summary>
        </member>
        <member name="M:Ximura.PoolBuffer`1.DisposedCheck">
            <summary>
            This method checks whether the pool buffer has been disposed.
            </summary>
        </member>
        <member name="M:Ximura.PoolBuffer`1.DisconnectCheck">
            <summary>
            This method checks whether the buffer has been disconnected from the pool.
            </summary>
        </member>
        <member name="M:Ximura.PoolBuffer`1.Disconnect">
            <summary>
            This method disconnects the buffer from the pool.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ConcurrentList`1">
            <summary>
            This is the lock-free implementation of the List class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="T:Ximura.Collections.ConcurrentListSLC`1">
            <summary>
            This is the lock-free implementation of the List class using a skip-list class based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLC`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Ximura.Collections.ConcurrentListSLC`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)" -->
        <member name="T:Ximura.Collections.ConcurrentListSLS`1">
            <summary>
            This is the lock-free implementation of the List class using a skip-list class based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor">
            <summary>
            This is the default constructor. The collection will be constructed with a base capacity of 1000.
            </summary>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
        </member>
        <member name="M:Ximura.Collections.ConcurrentListSLS`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="comparer">This is the comparer used to detect equality between items in the collection. 
            If this is set to null the default comparer for the type will be used instead./</param>
            <param name="capacity">The collection initial capacity.</param>
            <param name="collection">The values in this enumeration will be loaded in to the collection.</param>
            <param name="isFixedSize">The collection is fixed to the size passed in the capacity parameter.</param>
        </member>
        <member name="T:Ximura.JobPriority">
            <summary>
            Thread pool priority is used to assign the job position within the 
            Priority Job queue.
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Realtime">
            <summary>
            This is the highest priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.High">
            <summary>
            This is high priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.AboveNormal">
            <summary>
            This is above normal priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Normal">
            <summary>
            This is the default priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.BelowNormal">
            <summary>
            This is below normal priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.Low">
            <summary>
            This is the lowest priority
            </summary>
        </member>
        <member name="F:Ximura.JobPriority.NotSet">
            <summary>
            This is the not set state.
            </summary>
        </member>
        <member name="T:Ximura.RQRSFolder">
            <summary>
            RQRSFolder is a composite content object that can contain multiple entity object along with numerous other
            named parameters.
            </summary>
        </member>
        <member name="F:Ximura.RQRSFolder.mStatus">
            <summary>
            This is the internal HTTP status code.
            </summary>
        </member>
        <member name="F:Ximura.RQRSFolder.mSubstatus">
            <summary>
            This is the internal substatus code/description
            </summary>
        </member>
        <member name="F:Ximura.RQRSFolder.mCulture">
            <summary>
            The culture for the request.
            </summary>
        </member>
        <member name="M:Ximura.RQRSFolder.#ctor">
            <summary>
            This is the default constuctor.
            </summary>
        </member>
        <member name="M:Ximura.RQRSFolder.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This is the component model constructor.
            </summary>
            <param name="container">The base container.</param>
        </member>
        <member name="M:Ximura.RQRSFolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ximura.RQRSFolder.Reset">
            <summary>
            This method resets the object.
            </summary>
        </member>
        <member name="P:Ximura.RQRSFolder.Status">
            <summary>
            The Status is the HTTP status code that is used to define the object's status.
            </summary>
        </member>
        <member name="P:Ximura.RQRSFolder.Substatus">
            <summary>
            This is the response substatus. This can be used to return a substatus
            field or a text description.
            </summary>
        </member>
        <member name="P:Ximura.RQRSFolder.CanPool">
            <summary>
            This method returns true if the object can be pooled.
            </summary>
        </member>
        <member name="P:Ximura.RQRSFolder.ID">
            <summary>
            This is the request ID.
            </summary>
        </member>
        <member name="T:Ximura.LockableWrapper`1">
            <summary>
            The lockable base class is for objects that require fine-grained locking.
            </summary>
        </member>
        <member name="F:Ximura.LockableWrapper`1.mFlags">
            <summary>
            The private value that indicates whether the class is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableWrapper`1.#ctor(`0)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ximura.LockableWrapper`1.Lock">
            <summary>
            This method locks the particular item.
            </summary>
        </member>
        <member name="M:Ximura.LockableWrapper`1.LockWait">
            <summary>
            This method halts any threads if the item is locked.
            </summary>
        </member>
        <member name="M:Ximura.LockableWrapper`1.TryLock">
            <summary>
            This method attempts to lock the item.
            </summary>
            <returns>Returns true if the item is successfully locked.</returns>
        </member>
        <member name="M:Ximura.LockableWrapper`1.Unlock">
            <summary>
            This method unlocks the item.
            </summary>
        </member>
        <member name="F:Ximura.LockableWrapper`1.Value">
            <summary>
            This is the value locked by the collection.
            </summary>
        </member>
        <member name="P:Ximura.LockableWrapper`1.IsLocked">
            <summary>
            Returns true if the item is locked.
            </summary>
            <returns>Returns true if the item is locked.</returns>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexStruct`1">
            <summary>
            This structure is used to hold the item in the collection.
            </summary>
            <typeparam name="T">The container object.</typeparam>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexStruct`1.Sentinel(System.Int32,System.Int32)">
            <summary>
            This static method creates a sentinel vertex. Sentinel vertexes are vertexes that do not include data,
            but are used by the hash table to mark a shortcut to data sets based on their hashcode.
            </summary>
            <param name="hashID">The hashID.</param>
            <param name="nextSlotIDPlus1">The ID of the next vertex in the chain (plus 1).</param>
            <returns>Returns a new sentinel for the specific hash ID.</returns>
        </member>
        <member name="F:Ximura.Collections.Data.CollectionVertexStruct`1.mHashID">
            <summary>
            The internal hashid.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexStruct`1.#ctor(System.Int32,System.Int32)">
            <summary>
            This constructor creates a slot as a sentinel, with only the next parameter set.
            </summary>
            <param name="hashID">The item hashcode.</param>
            <param name="nextSlotIDPlus1">The next item in the list.</param>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexStruct`1.#ctor(System.Int32,`0,System.Int32)">
            <summary>
            This constructor sets the value for the slot.
            </summary>
            <param name="hashID">The item hashcode.</param>
            <param name="value">The slot value.</param>
            <param name="nextSlotIDPlus1">The next item in the list.</param>
        </member>
        <member name="F:Ximura.Collections.Data.CollectionVertexStruct`1.NextSlotIDPlus1">
            <summary>
            The next item in the list.
            </summary>
        </member>
        <member name="F:Ximura.Collections.Data.CollectionVertexStruct`1.Value">
            <summary>
            The slot value.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexStruct`1.ToString">
            <summary>
            This override provides quick and easy debugging support.
            </summary>
            <returns>Returns a string representation of the vertex.</returns>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexStruct`1.HashID">
            <summary>
            The item hashid.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexStruct`1.IsTerminator">
            <summary>
            This property identifies whether the vertex is the last item in the data chain.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexStruct`1.IsSentinel">
            <summary>
            This property identifies whether the vertex is a sentinel vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexStruct`1.Data">
            <summary>
            This is the information contained in the vertex.
            </summary>
        </member>
        <member name="T:Ximura.Collections.Data.CollectionVertexClassSentinel`1">
            <summary>
            
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassSentinel`1.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassSentinel`1.#ctor(System.Int32,Ximura.Collections.Data.CollectionVertexClass{`0})">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.CollectionVertexClassSentinel`1.Dispose">
            <summary>
            This method removes and object references.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassSentinel`1.Value">
            <summary>
            This override sets the value to the default of the type.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassSentinel`1.IsSentinel">
            <summary>
            This property specifies that the data item is a sentinel.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassSentinel`1.Up">
            <summary>
            The Up sentinel.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.CollectionVertexClassSentinel`1.Down">
            <summary>
            The down item.
            </summary>
        </member>
        <member name="T:Ximura.Collections.RedBlackTreeLockableVertex`2">
            <summary>
            This class is the vertex that contains both the key and value data within the tree.
            </summary>
            <typeparam name="TKey">The vertex key type.</typeparam>
            <typeparam name="TVal">The vertex value type.</typeparam>
        </member>
        <member name="M:Ximura.Collections.RedBlackTreeLockableVertex`2.#ctor">
            <summary>
            This is the default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Collections.RedBlackTreeLockableVertex`2.ToString">
            <summary>
            This override provides useful debug information.
            </summary>
            <returns>Returns a string representation of the vertex data.</returns>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.Key">
            <summary>
            This is the key data for the RebBlack tree vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.Value">
            <summary>
            This is the data stored in the vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.Parent">
            <summary>
            This is the parent vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.Left">
            <summary>
            This is the left vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.Right">
            <summary>
            This is the right vertex.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.IsRed">
            <summary>
            Returns true if the vertex is red.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.IsBlack">
            <summary>
            Returns true if the vertex is black.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.IsRoot">
            <summary>
            This property determines whether the vertex is the root vertex, i.e. it does not have a parent.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.IsSentinel">
            <summary>
            This property determines whether the vertex is a sentinel, i.e. a vertex without any child vertexes.
            </summary>
        </member>
        <member name="P:Ximura.Collections.RedBlackTreeLockableVertex`2.IsTerminator">
            <summary>
            This property determines whether the vertex is a sentinel, i.e. a vertex without any child vertexes.
            </summary>
        </member>
        <member name="T:Ximura.Collections.ConcurrentPool`1">
            <summary>
            This is the lock-free implementation of the Pool class using a hash-table based array.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="T:Ximura.MatchSkipTerminator`2">
            <summary>
            This terminator is used to skip items in a collection up to a certain criteria.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMatch"></typeparam>
        </member>
        <member name="M:Ximura.MatchSkipTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
            
            </summary>
            <param name="Terminator"></param>
            <param name="CanScan"></param>
        </member>
        <member name="M:Ximura.MatchSkipTerminator`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Func{`0,Ximura.MatchTerminatorResult,Ximura.MatchTerminatorStatus},System.Func{Ximura.MatchTerminatorResult,System.Collections.Generic.Queue{`0},`0,System.Int64,System.Boolean})">
            <summary>
            
            </summary>
            <param name="Terminator"></param>
            <param name="CanScan"></param>
            <param name="Predicate"></param>
            <param name="PredicateTerminator"></param>
        </member>
        <member name="M:Ximura.MatchSkipTerminator`2.Validate(`0,Ximura.MatchTerminatorResult)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="currentResult"></param>
            <returns></returns>
        </member>
        <member name="T:Ximura.CommandRSCallback">
            <summary>
            The command call back delegate is used for asynchronous command calls.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments including the envelope.</param>
        </member>
        <member name="T:Ximura.DependencyValidateRSCallback">
            <summary>
            The command call back delegate is used for asynchronous command calls.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments including the envelope.</param>
            <returns>Returns the true if the response can be deemed a success, otherwise if this returns false
            any further jobs using this validation ID will be ignored.</returns>
        </member>
        <member name="T:Ximura.CommandProgressCallback">
            <summary>
            This delegate is used to provide feedback for long running jobs.
            </summary>
        </member>
        <member name="T:Ximura.DependencyValidateRSStatus">
            <summary>
            This enumeration is used to signal the job status.
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Failure">
            <summary>
            The job has failed; all further jobs using this dependency key will be ignored, and any queued jobs
            will be cancelled.
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Success">
            <summary>
            The job executed successfully
            </summary>
        </member>
        <member name="F:Ximura.DependencyValidateRSStatus.Abort">
            <summary>
            The entire completion job will be aborted.
            </summary>
            <remarks>This is not currently implemented and will be treated as a failure.</remarks>
        </member>
        <member name="T:Ximura.CommandRSEventArgs">
            <summary>
            This class is used to send information when a command request completes.
            </summary>
        </member>
        <member name="M:Ximura.CommandRSEventArgs.#ctor(Ximura.JobBase)">
            <summary>
            This is the default constructor.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:Ximura.CommandRSEventArgs.Reset">
            <summary>
            This method is used for pooling resets.
            </summary>
        </member>
        <member name="P:Ximura.CommandRSEventArgs.Data">
            <summary>
            This is the returning job data.
            </summary>
        </member>
        <member name="P:Ximura.CommandRSEventArgs.ID">
            <summary>
            This is the returning job id.
            </summary>
        </member>
        <member name="T:Ximura.CommandProgressEventArgs">
            <summary>
            This class is used to report progress during a command request.
            </summary>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor">
            <summary>
            This is the empty constructor.
            </summary>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor(System.Int32)">
            <summary>
            This method can be used to return a straight progress indicator.
            </summary>
            <param name="progress">The command progress.</param>
        </member>
        <member name="M:Ximura.CommandProgressEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            This method can be used to return a straight progress indicator.
            </summary>
            <param name="progress">The command progress.</param>
            <param name="description">The command progress description.</param>
        </member>
        <member name="P:Ximura.CommandProgressEventArgs.Progress">
            <summary>
            The command progress.
            </summary>
        </member>
        <member name="P:Ximura.CommandProgressEventArgs.Description">
            <summary>
            The progress description.
            </summary>
        </member>
        <member name="T:Ximura.MessageTerminatorCSV">
            <summary>
            This class is used to identify the termination of a CSV line and is coded to be in accordance with RFC 4180.
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorCSV.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Ximura.MessageTerminatorCSV.Reset">
            <summary>
            This method resets the terminator.
            </summary>
        </member>
        <member name="T:Ximura.Collections.SkipListSentinelVertexStruct">
            <summary>
            This structure is used to hold the item in the collection.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListSentinelVertexStruct.cnSentinelMaskSet">
            <summary>
            This is the empty vertex.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListSentinelVertexStruct.#ctor(System.Int32,System.Int32)">
            <summary>
            This constructor creates a slot as a sentinel, with only the next parameter set.
            </summary>
            <param name="hashID">The item hashcode.</param>
            <param name="nextSlotIDPlus1">The next item in the list.</param>
        </member>
        <member name="F:Ximura.Collections.SkipListSentinelVertexStruct.HashID">
            <summary>
            The item hashid.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListSentinelVertexStruct.NextSlotIDPlus1">
            <summary>
            The next item in the list.
            </summary>
        </member>
        <member name="F:Ximura.Collections.SkipListSentinelVertexStruct.DownIDPlus1">
            <summary>
            The next item in the list.
            </summary>
        </member>
        <member name="M:Ximura.Collections.SkipListSentinelVertexStruct.ToString">
            <summary>
            This override provides quick and easy debugging support.
            </summary>
            <returns>Returns a string representation of the vertex.</returns>
        </member>
        <member name="P:Ximura.Collections.SkipListSentinelVertexStruct.IsTerminator">
            <summary>
            This property identifies whether the vertex is the last item in the data chain.
            </summary>
        </member>
        <member name="P:Ximura.Collections.SkipListSentinelVertexStruct.IsSentinel">
            <summary>
            This property identifies whether the vertex is a sentinel vertex.
            </summary>
        </member>
        <member name="T:Ximura.Pool`1">
            <summary>
            This is the base object pool.
            </summary>
            <typeparam name="T">The pool type.</typeparam>
        </member>
        <member name="M:Ximura.Pool`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Func{`0})">
            <summary>
            The default constructor.
            </summary>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
        </member>
        <member name="M:Ximura.Pool`1.#ctor(System.Func{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the pool constructor with default arguments.
            </summary>
            <param name="min">This is the minimum size.</param>
            <param name="max">This is the maximum size.</param>
            <param name="prefer">This is the prefered size.</param>
            <param name="remoteInvocator">This delegate can be used to create a new pool object.</param>
        </member>
        <member name="M:Ximura.Pool`1.CreateNewPoolObject">
            <summary>
            This method creates a new pool object of type T.
            </summary>
            <returns>Returns the new object.</returns>
        </member>
        <member name="T:Ximura.IXimuraPoolDeserializable">
            <summary>
            This interface is used to retrieve an object that support the deserializable interface.
            </summary>
        </member>
        <member name="M:Ximura.IXimuraPoolDeserializable.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object from the pool and deserializes this information in the serialization
            objects.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
            <returns>Returns the object specified from the pool.</returns>
        </member>
        <member name="P:Ximura.IXimuraPoolDeserializable.SupportsDeserialization">
            <summary>
            This boolean property returns true if the object type for the pool supports deserialization.
            </summary>
        </member>
        <member name="T:Ximura.IXimuraPoolDeserializable`1">
            <summary>
            This is the generic interface for poolable deserializable objects.
            </summary>
            <typeparam name="T">The poolable object type.</typeparam>
        </member>
        <member name="M:Ximura.IXimuraPoolDeserializable`1.Get(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method returns an object of type T from the pool and deserializes this 
            information in the serialization objects.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
            <returns>Returns the object specified from the pool.</returns>
        </member>
        <member name="T:Ximura.Collections.Data.Vertex">
            <summary>
            A vertex is the fundemental unit for building a relational graph. 
            The Vertex structure is built around an unsigned integer, but has additonal properties.
            </summary>
        </member>
        <member name="M:Ximura.Collections.Data.Vertex.ToString">
            <summary>
            This override converts the vertex to a readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ximura.Collections.Data.Vertex.IsNull">
            <summary>
            The null vertex has a value of 0.
            </summary>
        </member>
        <member name="P:Ximura.Collections.Data.Vertex.Value">
            <summary>
            The unsigned integer value of the vertex.
            </summary>
        </member>
        <member name="T:Ximura.RQRSEnvelopeHelper">
            <summary>
            The RQRSEnvelopeHelper is used to centralize pooling for the RQRSContract objects.
            </summary>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.#cctor">
            <summary>
            This is the static constuctor for the class.
            </summary>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Start(Ximura.IXimuraPoolManager)">
            <summary>
            This method starts the pooling.
            </summary>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Stop">
            <summary>
            This method stops the pooling and clears any remaining objects..
            </summary>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get(Ximura.EnvelopeAddress)">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract, and the request id is set to new ID.
            </summary>
            <param name="address">The envelope address. 
            This will be set to the EnvelopeAddress property in the envelope.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetCallback(Ximura.EnvelopeAddress)">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract, and the request id is set to new ID.
            </summary>
            <param name="address">The envelope address. 
            This will be set to the EnvelopeAddress property in the envelope.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get(Ximura.EnvelopeAddress,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract.
            </summary>
            <param name="address">The envelope address. This will be set to the EnvelopeAddress property in the envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetCallback(Ximura.EnvelopeAddress,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address. By
            default the address is set to the EnvelopeContract.
            </summary>
            <param name="address">The envelope address. This will be set to the EnvelopeAddress property in the envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get(Ximura.EnvelopeAddress,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address.
            </summary>
            <param name="address">The envelope address.</param>
            <param name="setAddress">If this parameter is set to true the addess will be set to the Envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetCallback(Ximura.EnvelopeAddress,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            This method get the appropriate EnvelopeContract based on the command ID in the address.
            </summary>
            <param name="address">The envelope address.</param>
            <param name="setAddress">If this parameter is set to true the addess will be set to the Envelope.</param>
            <param name="requestID">The required request id. Set this to null if you do not want the ID set.</param>
            <returns>Returns the EnvelopeContract.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get(System.Guid)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            command type.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetCallback(System.Guid)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            command type.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get(System.Type)">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            object type.
            </summary>
            <param name="objectType">The envelope type.</param>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.Get``2">
            <summary>
            This static method returns an EnvelopeContract from the pool for the specific
            object type.
            </summary>
            <returns>Returns a EnvelopeContract for the specific command ID. If the command
            is not registered for the application, this method will return null.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.ResolveType(System.Guid)">
            <summary>
            This method returns the envelope request type for registered commands.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns the type, or null if the command cannot be found.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.ResolveTypeCallback(System.Guid)">
            <summary>
            This method resolves the envelope callback type for registered commands.
            </summary>
            <param name="commandID">The command ID.</param>
            <returns>Returns the type, or null if the command cannot be found.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetPoolManager(System.Guid)">
            <summary>
            This method returns the pool manager based on the command ID type.
            </summary>
            <param name="commandID">The command ID to resolve.</param>
            <returns>Returns the pool, or null if the pool cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetPoolManagerCallback(System.Guid)">
            <summary>
            This method returns the callback pool manager based on the command ID type.
            </summary>
            <param name="commandID">The command ID to resolve.</param>
            <returns>Returns the pool, or null if the pool cannot be resolved.</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetPoolManager(System.Type)">
            <summary>
            This method returns the pool manager based on the object type of the envelope.
            </summary>
            <param name="objectType">The envelope object type.</param>
            <returns>Returns a pool manager object or null if the type is null or cannot be resolved..</returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetPoolManagerInternal(System.Type,System.Boolean)">
            <summary>
            This method returns a unbuffered pool manager for the type specified.
            </summary>
            <param name="objectType">The envelope type required.</param>
            <param name="buffered">This parameter specifies whether the pool should be wrapped
            around a buffered wrapper to disable the Clear() method.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.GetPoolManagerInternal``2(System.Boolean)">
            <summary>
            This method returns a unbuffered pool manager for the type specified.
            </summary>
            <param name="objectType">The envelope type required.</param>
            <param name="buffered">This parameter specifies whether the pool should be wrapped
            around a buffered wrapper to disable the Clear() method.</param>
            <returns></returns>
        </member>
        <member name="M:Ximura.RQRSEnvelopeHelper.RegisterCommand(System.Guid,System.String,System.Type,System.Type)">
            <summary>
            This method registers the command in the object pool. If the object pool type does not exist the command
            creates a new pool.
            </summary>
            <param name="commandID">The command ID to register.</param>
            <param name="commandName">This is the name of the command which is used by the performance counters.</param>
            <param name="objectType">The envelope type to register.</param>
            <param name="objectCallbackType">The envelope callback type to register.</param>
        </member>
        <member name="T:Ximura.PoolableObjectPoolManagerDirectAccess">
            <summary>
            This object is an example of an object that implements the IXimuraPoolManagerDirectAccess interface.
            This interface allows a poolable object to use other object from the base pool manager. This
            is useful for poolable object that need to create a large number of child objects. The functionality
            for this is implemented in the base class, but is only activated if the pool manager detects 
            that the object implements this interface.
            </summary>
        </member>
        <member name="M:Ximura.PoolableObjectPoolManagerDirectAccess.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
    </members>
</doc>
